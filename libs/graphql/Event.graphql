fragment Event on Event {
  id
  type
  since
  until
  summary
  description
  descriptionMember
  filesLegacy
  name
  capacity
  remainingPersonSpots
  remainingLessons
  locationText
  isLocked
  isVisible
  isPublic
  enableNotes
  eventTrainersList {
    id
    lessonsOffered
    lessonsRemaining
    person {
      ...Person
    }
  }
  eventInstancesList {
    ...EventInstance
  }
}

fragment EventInstance on EventInstance {
  id
  range {
    start {
      value
      inclusive
    }
    end {
      inclusive
      value
    }
  }
}

fragment EventInstanceExtended on EventInstance {
  ...EventInstance
  event {
    ...Event
    eventRegistrationsList {
      ...EventRegistration
    }
  }
}

fragment EventRegistration on EventRegistration {
  id
  isConfirmed
  note
  statusTime
  payment {
    ...PaymentItem
  }
  personId
  person {
    ...Person
  }
  coupleId
  couple {
    ...Couple
  }
  eventLessonDemandsByRegistrationIdList {
    id
    lessonCount
    trainerId
  }
}

query Event($id: BigInt!) {
  event(id: $id) {
    ...Event
    eventRegistrationsList {
      ...EventRegistration
    }
  }
}

query EventList($first: Int, $offset: Int, $visible: Boolean) {
  events(first: $first, offset: $offset, orderBy: [SINCE_DESC], condition: {isVisible: $visible}) {
    totalCount
    nodes {
      ...Event
    }
  }
}

query EventInstanceRange($range: DatetimeRangeInput!, $onlyMine: Boolean! = false) {
  list: eventInstancesForRangeList(searchRange: $range, onlyMine: $onlyMine) {
    ...EventInstanceExtended
  }
}

mutation ToggleEventVisible($id: BigInt!, $visible: Boolean!) {
  updateEvent(input: {id: $id, patch: {isVisible: $visible}}) {
    event {
      ...Event
    }
  }
}

mutation CreateEvent($input: EventInput!) {
  createEvent(input: {event: $input}) {
    event {
      ...Event
    }
  }
}

mutation UpdateEvent($id: BigInt!, $patch: EventPatch!) {
  updateEvent(input: {id: $id, patch: $patch}) {
    event {
      ...Event
    }
  }
}

mutation DeleteEvent($id: BigInt!) {
  deleteEvent(input: {id: $id}) {
    __typename
  }
}

query MyEvents {
  events(condition: {isVisible: true, isFuture: true, type: CAMP}, orderBy: [SINCE_ASC]) {
    nodes {
      ...Event
      eventRegistrationsList {
        ...EventRegistration
      }
    }
  }
}

mutation RegisterToEvent($input: RegisterToEventInput!) {
  registerToEvent(input: $input) {
    eventRegistration {
      ...EventRegistration
    }
  }
}

mutation CancelRegistration($input: CancelRegistrationInput!) {
  cancelRegistration(input: $input) {
    __typename
  }
}

mutation SetLessonDemand($input: SetLessonDemandInput!) {
  setLessonDemand(input: $input) {
    eventLessonDemand {
      id
      lessonCount
      trainerId
    }
  }
}
