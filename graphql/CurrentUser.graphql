fragment UserAuth on User {
  id
  uLogin
  uEmail
  userProxiesList {
    id
    person {
      ...PersonWithLinks
    }
  }
}

query CurrentUser {
  refreshJwt
  getCurrentUser {
    ...UserAuth
  }
}

query UserList {
  users {
    nodes {
      id
      uLogin
      uEmail
    }
  }
}

mutation Login($login: String!, $passwd: String!) {
  login(input: { login: $login, passwd: $passwd }) {
    result {
      jwt
      usr {
        ...UserAuth
      }
    }
  }
}

mutation OtpLogin($token: UUID!) {
  otpLogin(input: { token: $token }) {
    result {
      jwt
      usr {
        ...UserAuth
      }
    }
  }
}

mutation ResetPassword($input: ResetPasswordInput!) {
  resetPassword(input: $input) {
    __typename
  }
}

mutation ChangePassword($input: ChangePasswordInput!) {
  changePassword(input:  $input) {
    __typename
  }
}

fragment MembershipApplication on MembershipApplication {
  bio
  middleName
  nationalIdNumber
  nationality
  note
  phone
  prefixTitle
  status
  suffixTitle
  taxIdentificationNumber
  birthDate
  tenantId
  wdsfId
  cstsId
  email
  firstName
  gender
  id
  lastName
}

query MyMembershipApplications {
  membershipApplicationsList(condition: { status: SENT }) {
    ...MembershipApplication
  }
}

mutation CreateMembershipApplication($input: CreateMembershipApplicationInput!) {
  createMembershipApplication(input: $input) {
    membershipApplication {
      ...MembershipApplication
    }
  }
}

mutation UpdateMembershipApplication($input: UpdateMembershipApplicationInput!) {
  updateMembershipApplication(input: $input) {
    membershipApplication {
      ...MembershipApplication
    }
  }
}

mutation DeleteMembershipApplication($input: DeleteMembershipApplicationInput!) {
  deleteMembershipApplication(input: $input) {
    membershipApplication {
      ...MembershipApplication
    }
  }
}

mutation ConfirmMembershipApplication($input: ConfirmMembershipApplicationInput!) {
  confirmMembershipApplication(input: $input) {
    person {
      ...Person
    }
  }
}

mutation RegisterWithoutInvitation($input: RegisterWithoutInvitationInput!) {
  registerWithoutInvitation(input: $input) {
    result {
      jwt
      usr {
        ...UserAuth
      }
    }
  }
}

mutation RegisterUsingInvitation($input: RegisterUsingInvitationInput!) {
  registerUsingInvitation(input: $input) {
    result {
      jwt
      usr {
        ...UserAuth
      }
    }
  }
}

query InvitationInfo($token: UUID!) {
  invitationInfo(token: $token)
}
