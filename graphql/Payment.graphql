fragment Posting on Posting {
  id
  amount
  transaction {
    id
    description
    effectiveDate
    payment {
      ...Payment
    }
  }
}

fragment Payment on Payment {
  id
  status
  isAutoCreditAllowed
  dueAt
  paidAt
  createdAt
  variableSymbol
  specificSymbol
  cohortSubscription {
    id
    cohort {
      id
      name
    }
  }
  eventRegistration {
    id
    event {
      ...Event
    }
  }
  eventInstance {
    id
    since
    event {
      ...Event
    }
  }
}

fragment PaymentDetail on Payment {
  ...Payment
  transactions {
    nodes {
      id
      description
      effectiveDate
      postingsList {
        id
        amount
        account {
          id
          person {
            id
            name
          }
          tenant {
            id
            name
          }
        }
      }
    }
  }
}

query Payment($id: BigInt!) {
  payment(id: $id) {
    ...PaymentDetail
  }
}

mutation DeletePayment($id: BigInt!) {
  deletePayment(input: { id: $id }) {
    __typename
  }
}

mutation CreateCreditTransaction($input: CreateCreditTransactionForPersonInput!) {
  createCreditTransactionForPerson(input: $input) {
    transaction {
      id
      effectiveDate
      postingsList {
        id
        amount
        account {
          id
          person {
            id
            name
          }
        }
      }
    }
  }
}

query BalanceSheet($since: Datetime, $until: Datetime) {
  accountsList {
    id
    person {
      id
      name
      firstName
      lastName
    }
    assets(since: $since, until: $until)
    liabilities(since: $since, until: $until)
  }
}

mutation MarkAsPaid($id: BigInt!) {
  updatePayment(input: { id: $id, patch: {status: PAID} } ) {
    payment {
      id
      status
    }
  }
}
