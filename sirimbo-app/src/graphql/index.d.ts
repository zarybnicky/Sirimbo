/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

declare module "graphql-tag" {

  export function gql(source: "\nquery UpozorneniList($offset: Int, $limit: Int) {\n  upozorneni(limit: $limit, offset: $offset, order_by: {up_timestamp_add: desc}) {\n    up_id\n    up_kdo\n    up_lock\n    up_nadpis\n    up_text\n    up_timestamp\n    up_timestamp_add\n    user {\n      u_id\n      u_jmeno\n      u_prijmeni\n    }\n    upozorneni_skupinies {\n      skupiny {\n        s_name\n        s_description\n        s_color_text\n        s_color_rgb\n      }\n    }\n  }\n  aggregate: upozorneni_aggregate {\n    aggregate {\n      count\n    }\n  }\n}"): typeof import('./graphql').UpozorneniListDocument;
  export function gql(source: "\nquery ArticlesAdminList($offset: Int, $limit: Int) {\n  aktuality: aktuality_admin(limit: $limit, offset: $offset, order_by: {at_timestamp_add: desc}) {\n    at_foto\n    at_foto_main\n    at_id\n    at_jmeno\n    at_kat\n    at_kdo\n    at_preview\n    at_text\n    at_timestamp_add\n    at_timestamp\n  }\n  aggregate: aktuality_admin_aggregate {\n    aggregate {\n      count\n    }\n  }\n}"): typeof import('./graphql').ArticlesAdminListDocument;
  export function gql(source: "\nquery SingleParameter($name: String!) {\n  parameters_by_pk(pa_name: $name) {\n    pa_value\n  }\n}"): typeof import('./graphql').SingleParameterDocument;
  export function gql(source: "\nquery AkceList($offset: Int, $limit: Int) {\n  akce(limit: $limit, offset: $offset, order_by: {a_od: desc}) {\n    a_do\n    a_id\n    a_info\n    a_dokumenty\n    a_jmeno\n    a_kapacita\n    a_kde\n    a_lock\n    a_od\n    a_timestamp\n    a_visible\n    akce_items {\n      ai_id\n      user {\n        u_jmeno\n        u_prijmeni\n        u_id\n      }\n    }\n    aggregate: akce_items_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n  aggregate: akce_aggregate {\n    aggregate {\n      count\n    }\n  }\n}"): typeof import('./graphql').AkceListDocument;
  export function gql(source: "\n  mutation setAkceVisible($id: bigint!, $visible: Boolean!) {\n    update_akce_by_pk(pk_columns: {a_id: $id}, _set: {a_visible: $visible}) {\n      a_id\n    }\n  }\n"): typeof import('./graphql').SetAkceVisibleDocument;
  export function gql(source: "\n  query GalleryDirList($offset: Int, $limit: Int) {\n    galerie_dir(limit: $limit, offset: $offset, order_by: {gd_name: asc}) {\n      gd_hidden\n      gd_id\n      gd_id_rodic\n      gd_level\n      gd_name\n      gd_path\n    }\n    aggregate: galerie_dir_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n"): typeof import('./graphql').GalleryDirListDocument;
  export function gql(source: "\n  mutation setGalerieDirVisible($id: bigint!, $visible: Boolean!) {\n    update_galerie_dir_by_pk(pk_columns: {gd_id: $id}, _set: {gd_hidden: $visible}) {\n      gd_id\n    }\n  }\n"): typeof import('./graphql').SetGalerieDirVisibleDocument;
  export function gql(source: "\nquery ReservationAdminList($offset: Int, $limit: Int) {\n  nabidka: nabidka_admin(limit: $limit, offset: $offset, order_by: {n_od: desc}) {\n    n_visible\n    n_trener\n    n_timestamp\n    n_pocet_hod\n    n_od\n    n_max_pocet_hod\n    n_lock\n    n_id\n    n_do\n    user {\n      u_jmeno\n      u_prijmeni\n      u_id\n    }\n    nabidka_items {\n      ni_lock\n      ni_partner\n      ni_pocet_hod\n      pary {\n        user {\n          u_id\n          u_jmeno\n          u_prijmeni\n        }\n      }\n    }\n  }\n  aggregate: nabidka_admin_aggregate {\n    aggregate {\n      count\n    }\n  }\n}"): typeof import('./graphql').ReservationAdminListDocument;
  export function gql(source: "\n  mutation setNabidkaVisible($id: bigint!, $visible: Boolean!) {\n    update_nabidka_admin(where: {n_id: {_eq: $id}}, _set: {n_visible: $visible}) {\n      affected_rows\n    }\n  }\n"): typeof import('./graphql').SetNabidkaVisibleDocument;
  export function gql(source: "\nquery NabidkaList($offset: Int, $limit: Int) {\n  nabidka(limit: $limit, offset: $offset) {\n    n_visible\n    n_trener\n    n_timestamp\n    n_pocet_hod\n    n_od\n    n_max_pocet_hod\n    n_lock\n    n_id\n    n_do\n    user {\n      u_jmeno\n      u_prijmeni\n      u_id\n    }\n    nabidka_items {\n      ni_lock\n      ni_partner\n      ni_pocet_hod\n      pary {\n        user {\n          u_id\n          u_jmeno\n          u_prijmeni\n        }\n      }\n    }\n  }\n}"): typeof import('./graphql').NabidkaListDocument;
  export function gql(source: "\nquery ScheduleAdminList($offset: Int, $limit: Int) {\n  rozpis: rozpis_admin(limit: $limit, offset: $offset, order_by: {r_datum: desc}) {\n    r_datum\n    r_id\n    r_kde\n    r_lock\n    r_timestamp\n    r_trener\n    r_visible\n    user {\n      u_jmeno\n      u_prijmeni\n      u_id\n    }\n    rozpis_items {\n      ri_od\n      ri_do\n      ri_id\n      ri_partner\n    }\n  }\n  aggregate: rozpis_admin_aggregate {\n    aggregate {\n      count\n    }\n  }\n}"): typeof import('./graphql').ScheduleAdminListDocument;
  export function gql(source: "\n  mutation setRozpisVisible($id: bigint!, $visible: Boolean!) {\n    update_rozpis_admin(where: {r_id: {_eq: $id}}, _set: {r_visible: $visible}) {\n      affected_rows\n    }\n  }\n"): typeof import('./graphql').SetRozpisVisibleDocument;
  export function gql(source: string): unknown;

    export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<    infer TType,    any  >    ? TType    : never;  
}