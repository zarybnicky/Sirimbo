/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PhotoDirectory,
    PhotoDirectoryFromJSON,
    PhotoDirectoryToJSON,
    ReservationResponse,
    ReservationResponseFromJSON,
    ReservationResponseToJSON,
} from '../models';

export interface ApiEventIdToggleVisibleGetRequest {
    id: number;
}

export interface ApiQrPaymentPngGetRequest {
    acc?: string;
    am?: string;
    msg?: string;
    ss?: string;
    vs?: string;
    ks?: string;
}

export interface ApiScheduleIdToggleVisibleGetRequest {
    id: number;
}

export interface GetReservationRequest {
    id: number;
}

export interface ToggleVisiblePhotoDirectoryRequest {
    id: number;
}

export interface ToggleVisibleReservationRequest {
    id: number;
}

export interface WpV2PagesPageAutosavesGetRequest {
    page: number;
}

export interface WpV2PagesPageGetRequest {
    page: number;
}

export interface WpV2TypesTypeGetRequest {
    type: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async apiEventIdToggleVisibleGetRaw(requestParameters: ApiEventIdToggleVisibleGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiEventIdToggleVisibleGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/event/{id}/toggle-visible`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiEventIdToggleVisibleGet(requestParameters: ApiEventIdToggleVisibleGetRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.apiEventIdToggleVisibleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiExportEmailsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/export-emails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiExportEmailsGet(initOverrides?: RequestInit): Promise<Array<string>> {
        const response = await this.apiExportEmailsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQrPaymentPngGetRaw(requestParameters: ApiQrPaymentPngGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        if (requestParameters.acc !== undefined) {
            queryParameters['acc'] = requestParameters.acc;
        }

        if (requestParameters.am !== undefined) {
            queryParameters['am'] = requestParameters.am;
        }

        if (requestParameters.msg !== undefined) {
            queryParameters['msg'] = requestParameters.msg;
        }

        if (requestParameters.ss !== undefined) {
            queryParameters['ss'] = requestParameters.ss;
        }

        if (requestParameters.vs !== undefined) {
            queryParameters['vs'] = requestParameters.vs;
        }

        if (requestParameters.ks !== undefined) {
            queryParameters['ks'] = requestParameters.ks;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/qr-payment.png`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async apiQrPaymentPngGet(requestParameters: ApiQrPaymentPngGetRequest, initOverrides?: RequestInit): Promise<Blob> {
        const response = await this.apiQrPaymentPngGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiScheduleIdToggleVisibleGetRaw(requestParameters: ApiScheduleIdToggleVisibleGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiScheduleIdToggleVisibleGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/schedule/{id}/toggle-visible`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiScheduleIdToggleVisibleGet(requestParameters: ApiScheduleIdToggleVisibleGetRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.apiScheduleIdToggleVisibleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWhoamiGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/whoami`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiWhoamiGet(initOverrides?: RequestInit): Promise<string> {
        const response = await this.apiWhoamiGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getPhotoDirectoriesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PhotoDirectory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/photo/directory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PhotoDirectoryFromJSON));
    }

    /**
     */
    async getPhotoDirectories(initOverrides?: RequestInit): Promise<Array<PhotoDirectory>> {
        const response = await this.getPhotoDirectoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getReservationRaw(requestParameters: GetReservationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReservationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getReservation(requestParameters: GetReservationRequest, initOverrides?: RequestInit): Promise<ReservationResponse> {
        const response = await this.getReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async logoutGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async logoutGet(initOverrides?: RequestInit): Promise<void> {
        await this.logoutGetRaw(initOverrides);
    }

    /**
     */
    async toggleVisiblePhotoDirectoryRaw(requestParameters: ToggleVisiblePhotoDirectoryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling toggleVisiblePhotoDirectory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/photo/directory/{id}/toggle-visible`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async toggleVisiblePhotoDirectory(requestParameters: ToggleVisiblePhotoDirectoryRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.toggleVisiblePhotoDirectoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async toggleVisibleReservationRaw(requestParameters: ToggleVisibleReservationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling toggleVisibleReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/{id}/toggle-visible`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async toggleVisibleReservation(requestParameters: ToggleVisibleReservationRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.toggleVisibleReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wpV2BlocksGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<{ [key: string]: object; }>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp/v2/blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wpV2BlocksGet(initOverrides?: RequestInit): Promise<Array<{ [key: string]: object; }>> {
        const response = await this.wpV2BlocksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async wpV2BlocksOptionsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<any>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp/v2/blocks`,
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wpV2BlocksOptions(initOverrides?: RequestInit): Promise<Array<any>> {
        const response = await this.wpV2BlocksOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async wpV2MediaOptionsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<any>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp/v2/media`,
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wpV2MediaOptions(initOverrides?: RequestInit): Promise<Array<any>> {
        const response = await this.wpV2MediaOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async wpV2PagesPageAutosavesGetRaw(requestParameters: WpV2PagesPageAutosavesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<{ [key: string]: object; }>>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling wpV2PagesPageAutosavesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp/v2/pages/{page}/autosaves`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wpV2PagesPageAutosavesGet(requestParameters: WpV2PagesPageAutosavesGetRequest, initOverrides?: RequestInit): Promise<Array<{ [key: string]: object; }>> {
        const response = await this.wpV2PagesPageAutosavesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wpV2PagesPageGetRaw(requestParameters: WpV2PagesPageGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling wpV2PagesPageGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp/v2/pages/{page}`.replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wpV2PagesPageGet(requestParameters: WpV2PagesPageGetRequest, initOverrides?: RequestInit): Promise<{ [key: string]: object; }> {
        const response = await this.wpV2PagesPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wpV2TaxonomiesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp/v2/taxonomies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wpV2TaxonomiesGet(initOverrides?: RequestInit): Promise<{ [key: string]: object; }> {
        const response = await this.wpV2TaxonomiesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async wpV2ThemesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp/v2/themes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wpV2ThemesGet(initOverrides?: RequestInit): Promise<{ [key: string]: object; }> {
        const response = await this.wpV2ThemesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async wpV2TypesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp/v2/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wpV2TypesGet(initOverrides?: RequestInit): Promise<{ [key: string]: object; }> {
        const response = await this.wpV2TypesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async wpV2TypesTypeGetRaw(requestParameters: WpV2TypesTypeGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling wpV2TypesTypeGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp/v2/types/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wpV2TypesTypeGet(requestParameters: WpV2TypesTypeGetRequest, initOverrides?: RequestInit): Promise<{ [key: string]: object; }> {
        const response = await this.wpV2TypesTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async wpV2UsersGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp/v2/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wpV2UsersGet(initOverrides?: RequestInit): Promise<{ [key: string]: object; }> {
        const response = await this.wpV2UsersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async wpV2UsersMeGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wp/v2/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async wpV2UsersMeGet(initOverrides?: RequestInit): Promise<{ [key: string]: object; }> {
        const response = await this.wpV2UsersMeGetRaw(initOverrides);
        return await response.value();
    }

}
