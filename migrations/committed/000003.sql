--! Previous: sha1:608af8b9b6516ab91d6e0884a1ae9920d1e14df0
--! Hash: sha1:c43f6cb0a1233edc55e43a3d155bfd7b723c4cae

-- Fix current_session_id
create or replace function current_session_id() returns text as $$
  select nullif(current_setting('jwt.claims.session_id', true), '')::text;
$$ language sql stable;
grant execute on function current_session_id to anonymous;


-- Announcement/post scheduling
alter table upozorneni drop column if exists scheduled_since cascade;
alter table upozorneni add column scheduled_since timestamptz null default null;
alter table upozorneni drop column if exists scheduled_until cascade;
alter table upozorneni add column scheduled_until timestamptz null default null;

create or replace function my_announcements() returns setof upozorneni as $$
  select upozorneni.* from upozorneni
  where (scheduled_since is null or scheduled_since <= now())
    and (scheduled_until is null or scheduled_until >= now());
$$ language sql stable;
grant execute on function my_announcements to member;


-- New entities: tenant, location, room
drop table if exists tenant cascade;
create table tenant (
       id bigint generated by default as identity primary key,
       name text not null,
       member_info jsonb not null
);
revoke ALL ON TABLE tenant from anonymous;
grant select ON TABLE tenant TO anonymous;
grant ALL ON TABLE tenant TO administrator;

create or replace function current_tenant_id() returns bigint as $$
  select 1;
$$ language sql stable;
grant execute on function current_tenant_id to anonymous;

CREATE FUNCTION public.get_current_tenant() RETURNS public.tenant AS $$
  SELECT * FROM tenant WHERE id = current_tenant_id();
$$ LANGUAGE sql STABLE SECURITY DEFINER;
grant execute on function current_tenant_id to anonymous;

DROP TABLE IF EXISTS location CASCADE;
CREATE TABLE location (
       id bigint generated by default as identity primary key,
       name text not null,
       description jsonb not null,
       tenant bigint references tenant
);
revoke ALL ON TABLE location from anonymous;
grant select ON TABLE location TO anonymous;
GRANT ALL ON TABLE location TO administrator;

DROP TABLE IF EXISTS room CASCADE;
CREATE TABLE room (
       id bigint generated by default as identity primary key,
       name text not null,
       description jsonb not null,
       location bigint references location
);
revoke ALL ON TABLE room from anonymous;
grant select ON TABLE room TO anonymous;
GRANT ALL ON TABLE room TO anonymous;

DROP TABLE IF EXISTS attachment CASCADE;
create table attachment (
       object_name text primary key,
       preview_object_name text null,
       uploaded_by bigint references users,
       uploaded_at timestamptz not null default now()
);
revoke ALL ON TABLE attachment from anonymous;
grant select ON TABLE attachment TO anonymous;
GRANT ALL ON TABLE attachment TO member;


drop type if exists tenant_attachment_type cascade;
create type tenant_attachment_type as enum (
  'logo',
  'photo',
  'map'
);

DROP TABLE IF EXISTS tenant_attachment CASCADE;
CREATE TABLE tenant_attachment (
       tenant_id bigint references tenant,
       object_name text references attachment,
       type tenant_attachment_type,
       primary key (tenant_id, object_name)
);
revoke ALL ON TABLE tenant_attachment from anonymous;
grant select ON TABLE tenant_attachment TO anonymous;
GRANT ALL ON TABLE tenant_attachment TO administrator;

DROP TABLE IF EXISTS location_attachment CASCADE;
CREATE TABLE location_attachment (
       location_id bigint references location,
       object_name text references attachment,
       primary key (location_id, object_name)
);
revoke ALL ON TABLE location_attachment from anonymous;
grant select ON TABLE location_attachment TO anonymous;
GRANT ALL ON TABLE location_attachment TO administrator;

DROP TABLE IF EXISTS room_attachment CASCADE;
CREATE TABLE room_attachment (
       room_id bigint references room,
       object_name text references attachment,
       primary key (room_id, object_name)
);
revoke ALL ON TABLE room_attachment from anonymous;
grant select ON TABLE room_attachment TO anonymous;
GRANT ALL ON TABLE room_attachment TO administrator;


drop type if exists gender_type cascade;
create type gender_type as enum (
  'men',
  'woman',
  'unspecified'
);

drop table if exists person cascade;
create table person (
       id bigint generated by default as identity primary key,
       first_name text not null,
       last_name text not null,
       gender gender_type not null
);
revoke ALL ON TABLE person from anonymous;
grant select ON TABLE person TO anonymous;
GRANT ALL ON TABLE person TO administrator;


DROP TABLE IF EXISTS tenant_person CASCADE;
CREATE TABLE tenant_person (
       tenant_id bigint references tenant,
       person_id bigint references person,
       primary key (tenant_id, person_id)
);
revoke ALL ON TABLE tenant_person from anonymous;
grant select ON TABLE tenant_person TO anonymous;
GRANT ALL ON TABLE tenant_person TO administrator;


insert into tenant (name, member_info) values ('TK Olymp', '[]'::json);
insert into location (name, description, tenant) values ('ZŠ Holečkova', '[]'::json, 1);
insert into location (name, description, tenant) values ('SGO', '[]'::json, 1);
insert into room (name, description, location) values ('Baletní sál', '[]'::json, 1);
insert into room (name, description, location) values ('Stará tělocvična SGO', '[]'::json, 2);


create or replace function public.change_password(old_pass varchar, new_pass varchar) returns void as $$
declare
  usr users;
  v_salt varchar;
begin
  select users.* into usr from users where u_id = current_user_id() limit 1;

  select encode(digest('######TK.-.OLYMP######', 'md5'), 'hex') into v_salt;
  if usr.u_pass != encode(digest(v_salt || old_pass || v_salt, 'sha1'), 'hex') then
    raise exception 'INVALID_PASSWORD' using errcode = '28P01';
  end if;

  update users set u_pass = new_pass where u_id = usr.u_id;
end;
$$ language plpgsql strict volatile security definer;
select * from plpgsql_check_function('public.change_password');
grant execute on function change_password to member;


-- New event sign-up
alter table akce_item drop column if exists notes cascade;
alter table akce_item add column notes text not null default '';

DELETE FROM akce_item a USING akce_item b
WHERE a.ai_id < b.ai_id AND a.ai_user = b.ai_user and a.ai_id_rodic = b.ai_id_rodic;

ALTER TABLE ONLY public.akce_item
drop constraint if exists akce_item_unique_user_event_key,
ADD CONSTRAINT akce_item_unique_user_event_key UNIQUE (ai_user, ai_id_rodic);

create or replace function create_participation(event_id bigint, year_of_birth int, my_notes text) returns void as $$
declare
  event akce;
begin
  select * into event from akce where a_id=event_id;
  if event is null then
    raise exception 'ITEM_NOT_FOUND' using errcode = '28000';
  end if;

  if event.a_lock then
    raise exception 'ITEM_LOCKED' using errcode = '42501';
  end if;

  INSERT INTO akce_item
    (ai_id_rodic, ai_user, ai_rok_narozeni, notes)
  values
    (event_id, current_user_id(), year_of_birth, my_notes)
  ON CONFLICT (ai_id_rodic, ai_user)
  DO UPDATE SET notes = my_notes, ai_rok_narozeni=year_of_birth;
end;
$$ language plpgsql strict volatile security definer;
select * from plpgsql_check_function('public.create_participation');
grant execute on function create_participation to member;

create or replace function cancel_participation(event_id bigint) returns void as $$
declare
  event akce;
begin
  select * into event from akce where a_id=event_id;
  if event is null then
    raise exception 'ITEM_NOT_FOUND' using errcode = '28000';
  end if;

  if event.a_lock then
    raise exception 'ITEM_LOCKED' using errcode = '42501';
  end if;

  delete from akce_item where ai_id_rodic=event.a_id and ai_user=current_user_id();
end;
$$ language plpgsql strict volatile security definer;
select * from plpgsql_check_function('public.cancel_participation');
grant execute on function cancel_participation to member;

-- New event view
create or replace function my_events() returns table (
  id bigint,
  since timestamptz,
  until timestamptz,
  info text,
  name text,
  location text,
  has_capacity boolean,
  signed_up boolean,
  my_notes text
) as $$
  select
    a_id as id,
    a_od as since,
    a_do as until,
    a_info as info,
    a_jmeno as name,
    a_kde as location,
    (select count(*) < a_kapacita from akce_item where ai_id_rodic = a_id) as has_capacity,
    (select exists (select ai_id from akce_item where ai_id_rodic=a_id and ai_user=current_user_id())) as signed_up,
    (select notes from akce_item where ai_id_rodic=a_id and ai_user=current_user_id()) as my_notes
  from akce
  where a_visible = true -- a_do is null or a_do >= now()
$$ language sql stable;
grant execute on function my_events to member;
