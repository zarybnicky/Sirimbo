# This file is generated by composer-plugin-nixify.
# Manual changes might be lost - proceed with caution!

{ lib, php, phpPackages, unzip, stdenv, runCommandLocal, writeText, fetchurl

# Default fetcher.
, fetcher ? (args: fetchurl { inherit (args) name urls sha256; })

}: src:

with lib;

let

  composerPath = phpPackages.composer.src;
  cacheEntries = [
    { name = "stephank_composer-plugin-nixify-1.0.5.0"; filename = "stephank/composer-plugin-nixify/e2a1020a7b33878e01d46dacea0674500d4a711e.zip"; sha256 = "155098d53ec086f0c382f14dd7634909b55adf291bebb4f7c308b8ac399f3cf2"; urls = [ "https://nexus.inuits.io/repository/composer/stephank/composer-plugin-nixify/v1.0.5/stephank-composer-plugin-nixify-v1.0.5.zip" ]; }
    { name = "symfony_polyfill-ctype-1.20.0.0"; filename = "symfony/polyfill-ctype/96413989352e4c250610adb11bc3fe0c0216750a.zip"; sha256 = "b606e3c567b8221f73bcfa4d8eab6cad7b63725614577f54b53742f3afdfa33f"; urls = [ "https://nexus.inuits.io/repository/composer/symfony/polyfill-ctype/v1.20.0/symfony-polyfill-ctype-v1.20.0.zip" ]; }
    { name = "symfony_polyfill-mbstring-1.20.0.0"; filename = "symfony/polyfill-mbstring/0fadfb718dd2a7e31a7f8732cdd2bec1184e0f90.zip"; sha256 = "fc1851cbd1adf5eb74631e2a0e8e7452bb53a73265e95e5d8c0b1577c2a1f4e7"; urls = [ "https://nexus.inuits.io/repository/composer/symfony/polyfill-mbstring/v1.20.0/symfony-polyfill-mbstring-v1.20.0.zip" ]; }
    { name = "twig_twig-3.1.1.0"; filename = "twig/twig/60b85e2d4dd2c0780928110740c8b7ef474842af.zip"; sha256 = "482ac4e13b2087ab9bf51a639d0f6e70878fa4d9323245116b3914746942041e"; urls = [ "https://nexus.inuits.io/repository/composer/twig/twig/v3.1.1/twig-twig-v3.1.1.zip" ]; }
  ];

  # Shell snippet to collect all project dependencies.
  collectCacheScript = writeText "collect-cache.sh" (
    concatMapStrings (args: ''
      (
        cacheFile=${escapeShellArg args.filename}
        cacheFilePath="$COMPOSER_CACHE_DIR/files/$cacheFile"
        mkdir -p "$(dirname "$cacheFilePath")"
        cp ${escapeShellArg (fetcher args)} "$cacheFilePath"
      )
    '') cacheEntries
  );

in stdenv.mkDerivation {
  name = "zarybnicky_tkolymp.cz";
  inherit src;

  # Make sure the build uses the right PHP version everywhere.
  # Also include unzip for Composer.
  buildInputs = [ php unzip ];

  # Defines the shell alias to run Composer.
  postHook = ''
    composer () {
      php "$NIX_COMPOSER_PATH" "$@"
    }
  '';

  configurePhase = ''
    runHook preConfigure

    # Set the cache directory for Composer.
    export COMPOSER_CACHE_DIR="$NIX_BUILD_TOP/.composer/cache"

    # Build the cache directory contents.
    source ${collectCacheScript}

    # Store the absolute path to Composer for the 'composer' alias.
    export NIX_COMPOSER_PATH="$(readlink -f ${escapeShellArg composerPath})"

    # Run normal Composer install to complete dependency installation.
    composer install

    runHook postConfigure
  '';

  buildPhase = ''
    runHook preBuild
    runHook postBuild
  '';

  installPhase = ''
    runHook preInstall

    mkdir -p $out/libexec $out/bin

    # Move the entire project to the output directory.
    mv $PWD "$out/libexec/$sourceRoot"
    cd "$out/libexec/$sourceRoot"

    # Update the path to Composer.
    export NIX_COMPOSER_PATH="$(readlink -f ${escapeShellArg composerPath})"

    # Invoke a plugin internal command to setup binaries.
    composer nixify-install-bin "$out/bin"

    runHook postInstall
  '';

  passthru = {
    inherit php;
  };
}
