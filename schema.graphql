type AddressDomain {
  city: String
  conscriptionNumber: String
  district: String
  orientationNumber: String
  postalCode: String
  region: String
  street: String
}

input AddressDomainInput {
  city: String
  conscriptionNumber: String
  district: String
  orientationNumber: String
  postalCode: String
  region: String
  street: String
}

"""A connection to a list of `Aktuality` values."""
type AktualitiesConnection {
  """
  A list of edges which contains the `Aktuality` and cursor to aid in pagination.
  """
  edges: [AktualitiesEdge!]!

  """A list of `Aktuality` objects."""
  nodes: [Aktuality!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Aktuality` you could get from the connection."""
  totalCount: Int!
}

"""A `Aktuality` edge in the connection."""
type AktualitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Aktuality` at the end of the edge."""
  node: Aktuality!
}

"""Methods to use when ordering `Aktuality`."""
enum AktualitiesOrderBy {
  AT_FOTO_ASC
  AT_FOTO_DESC
  AT_FOTO_MAIN_ASC
  AT_FOTO_MAIN_DESC
  AT_ID_ASC
  AT_ID_DESC
  AT_JMENO_ASC
  AT_JMENO_DESC
  AT_KAT_ASC
  AT_KAT_DESC
  AT_KDO_ASC
  AT_KDO_DESC
  AT_PREVIEW_ASC
  AT_PREVIEW_DESC
  AT_TEXT_ASC
  AT_TEXT_DESC
  AT_TIMESTAMP_ADD_ASC
  AT_TIMESTAMP_ADD_DESC
  AT_TIMESTAMP_ASC
  AT_TIMESTAMP_DESC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__GF_ID_ASC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__GF_ID_DESC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__GF_ID_RODIC_ASC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__GF_ID_RODIC_DESC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__GF_KDO_ASC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__GF_KDO_DESC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__GF_NAME_ASC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__GF_NAME_DESC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__GF_PATH_ASC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__GF_PATH_DESC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__GF_TIMESTAMP_ASC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__GF_TIMESTAMP_DESC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__ID_ASC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__ID_DESC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__TENANT_ID_ASC
  GALERIE_FOTO_BY_AT_FOTO_MAIN__TENANT_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  TITLE_PHOTO_URL_ASC
  TITLE_PHOTO_URL_DESC
  USER_BY_AT_KDO__ID_ASC
  USER_BY_AT_KDO__ID_DESC
  USER_BY_AT_KDO__TENANT_ID_ASC
  USER_BY_AT_KDO__TENANT_ID_DESC
  USER_BY_AT_KDO__U_CREATED_AT_ASC
  USER_BY_AT_KDO__U_CREATED_AT_DESC
  USER_BY_AT_KDO__U_EMAIL_ASC
  USER_BY_AT_KDO__U_EMAIL_DESC
  USER_BY_AT_KDO__U_ID_ASC
  USER_BY_AT_KDO__U_ID_DESC
  USER_BY_AT_KDO__U_JMENO_ASC
  USER_BY_AT_KDO__U_JMENO_DESC
  USER_BY_AT_KDO__U_LOGIN_ASC
  USER_BY_AT_KDO__U_LOGIN_DESC
  USER_BY_AT_KDO__U_NATIONALITY_ASC
  USER_BY_AT_KDO__U_NATIONALITY_DESC
  USER_BY_AT_KDO__U_PRIJMENI_ASC
  USER_BY_AT_KDO__U_PRIJMENI_DESC
  USER_BY_AT_KDO__U_TIMESTAMP_ASC
  USER_BY_AT_KDO__U_TIMESTAMP_DESC
}

type Aktuality {
  atFoto: BigInt
  atFotoMain: BigInt
  atId: BigInt!
  atJmeno: String!
  atKat: String!
  atKdo: BigInt
  atPreview: String!
  atText: String!
  atTimestamp: Datetime
  atTimestampAdd: Datetime

  """Reads a single `GalerieFoto` that is related to this `Aktuality`."""
  galerieFotoByAtFotoMain: GalerieFoto
  id: BigInt

  """Reads a single `Tenant` that is related to this `Aktuality`."""
  tenant: Tenant
  tenantId: BigInt!
  titlePhotoUrl: String

  """Reads a single `User` that is related to this `Aktuality`."""
  userByAtKdo: User
}

"""
A condition to be used against `Aktuality` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AktualityCondition {
  """Checks for equality with the object’s `atFoto` field."""
  atFoto: BigInt

  """Checks for equality with the object’s `atFotoMain` field."""
  atFotoMain: BigInt

  """Checks for equality with the object’s `atId` field."""
  atId: BigInt

  """Checks for equality with the object’s `atJmeno` field."""
  atJmeno: String

  """Checks for equality with the object’s `atKat` field."""
  atKat: String

  """Checks for equality with the object’s `atKdo` field."""
  atKdo: BigInt

  """Checks for equality with the object’s `atPreview` field."""
  atPreview: String

  """Checks for equality with the object’s `atText` field."""
  atText: String

  """Checks for equality with the object’s `atTimestamp` field."""
  atTimestamp: Datetime

  """Checks for equality with the object’s `atTimestampAdd` field."""
  atTimestampAdd: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `titlePhotoUrl` field."""
  titlePhotoUrl: String
}

"""An input for mutations affecting `Aktuality`"""
input AktualityInput {
  atFoto: BigInt
  atFotoMain: BigInt
  atId: BigInt
  atJmeno: String!
  atKat: String
  atKdo: BigInt
  atPreview: String!
  atText: String!
  atTimestamp: Datetime
  atTimestampAdd: Datetime
  id: BigInt
  tenantId: BigInt
  titlePhotoUrl: String
}

"""
Represents an update to a `Aktuality`. Fields that are set will be updated.
"""
input AktualityPatch {
  atFoto: BigInt
  atFotoMain: BigInt
  atId: BigInt
  atJmeno: String
  atKat: String
  atKdo: BigInt
  atPreview: String
  atText: String
  atTimestamp: Datetime
  atTimestampAdd: Datetime
  id: BigInt
  tenantId: BigInt
  titlePhotoUrl: String
}

type Attachment {
  directory: String
  downloadUrl: String!
  height: Int

  """Reads and enables pagination through a set of `LocationAttachment`."""
  locationAttachmentsByObjectName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LocationAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LocationAttachment`."""
    orderBy: [LocationAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationAttachmentsConnection!
  objectName: String!
  previewObjectName: String
  publicUrl: String!

  """Reads and enables pagination through a set of `RoomAttachment`."""
  roomAttachmentsByObjectName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomAttachment`."""
    orderBy: [RoomAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomAttachmentsConnection!

  """Reads and enables pagination through a set of `TenantAttachment`."""
  tenantAttachmentsByObjectName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TenantAttachment`."""
    orderBy: [TenantAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TenantAttachmentsConnection!
  thumbhash: String
  uploadUrl: String!
  uploadedAt: Datetime!
  uploadedBy: BigInt

  """Reads a single `User` that is related to this `Attachment`."""
  userByUploadedBy: User
  width: Int
}

"""
A condition to be used against `Attachment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttachmentCondition {
  """Checks for equality with the object’s `directory` field."""
  directory: String

  """Checks for equality with the object’s `height` field."""
  height: Int

  """Checks for equality with the object’s `objectName` field."""
  objectName: String

  """Checks for equality with the object’s `previewObjectName` field."""
  previewObjectName: String

  """Checks for equality with the object’s `thumbhash` field."""
  thumbhash: String

  """Checks for equality with the object’s `uploadedAt` field."""
  uploadedAt: Datetime

  """Checks for equality with the object’s `uploadedBy` field."""
  uploadedBy: BigInt

  """Checks for equality with the object’s `width` field."""
  width: Int
}

"""A connection to a list of `String` values."""
type AttachmentDirectoriesConnection {
  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [AttachmentDirectoryEdge!]!

  """A list of `String` objects."""
  nodes: [String]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type AttachmentDirectoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""An input for mutations affecting `Attachment`"""
input AttachmentInput {
  height: Int
  objectName: String!
  previewObjectName: String
  thumbhash: String
  uploadedAt: Datetime
  uploadedBy: BigInt
  width: Int
}

"""A connection to a list of `Attachment` values."""
type AttachmentsConnection {
  """
  A list of edges which contains the `Attachment` and cursor to aid in pagination.
  """
  edges: [AttachmentsEdge!]!

  """A list of `Attachment` objects."""
  nodes: [Attachment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Attachment` you could get from the connection."""
  totalCount: Int!
}

"""A `Attachment` edge in the connection."""
type AttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Attachment` at the end of the edge."""
  node: Attachment!
}

"""Methods to use when ordering `Attachment`."""
enum AttachmentsOrderBy {
  HEIGHT_ASC
  HEIGHT_DESC
  LOCATION_ATTACHMENTS_BY_OBJECT_NAME__COUNT_ASC
  LOCATION_ATTACHMENTS_BY_OBJECT_NAME__COUNT_DESC
  NATURAL
  OBJECT_NAME_ASC
  OBJECT_NAME_DESC
  PREVIEW_OBJECT_NAME_ASC
  PREVIEW_OBJECT_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOM_ATTACHMENTS_BY_OBJECT_NAME__COUNT_ASC
  ROOM_ATTACHMENTS_BY_OBJECT_NAME__COUNT_DESC
  TENANT_ATTACHMENTS_BY_OBJECT_NAME__COUNT_ASC
  TENANT_ATTACHMENTS_BY_OBJECT_NAME__COUNT_DESC
  THUMBHASH_ASC
  THUMBHASH_DESC
  UPLOADED_AT_ASC
  UPLOADED_AT_DESC
  UPLOADED_BY_ASC
  UPLOADED_BY_DESC
  USER_BY_UPLOADED_BY__ID_ASC
  USER_BY_UPLOADED_BY__ID_DESC
  USER_BY_UPLOADED_BY__TENANT_ID_ASC
  USER_BY_UPLOADED_BY__TENANT_ID_DESC
  USER_BY_UPLOADED_BY__U_CREATED_AT_ASC
  USER_BY_UPLOADED_BY__U_CREATED_AT_DESC
  USER_BY_UPLOADED_BY__U_EMAIL_ASC
  USER_BY_UPLOADED_BY__U_EMAIL_DESC
  USER_BY_UPLOADED_BY__U_ID_ASC
  USER_BY_UPLOADED_BY__U_ID_DESC
  USER_BY_UPLOADED_BY__U_JMENO_ASC
  USER_BY_UPLOADED_BY__U_JMENO_DESC
  USER_BY_UPLOADED_BY__U_LOGIN_ASC
  USER_BY_UPLOADED_BY__U_LOGIN_DESC
  USER_BY_UPLOADED_BY__U_NATIONALITY_ASC
  USER_BY_UPLOADED_BY__U_NATIONALITY_DESC
  USER_BY_UPLOADED_BY__U_PRIJMENI_ASC
  USER_BY_UPLOADED_BY__U_PRIJMENI_DESC
  USER_BY_UPLOADED_BY__U_TIMESTAMP_ASC
  USER_BY_UPLOADED_BY__U_TIMESTAMP_DESC
  WIDTH_ASC
  WIDTH_DESC
}

enum AttendanceType {
  ATTENDED
  EXCUSED
  NOT_EXCUSED
  UNKNOWN
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""All input for the `cancelRegistration` mutation."""
input CancelRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  registrationId: BigInt!
}

"""The output of our `cancelRegistration` mutation."""
type CancelRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPass: String!
  oldPass: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type CohortGroup {
  description: String!
  id: BigInt!
  isPublic: Boolean!
  name: String!
  ordering: Int!

  """Reads and enables pagination through a set of `Skupiny`."""
  skupiniesByCohortGroup(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Skupiny`."""
    orderBy: [SkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SkupiniesConnection!

  """Reads a single `Tenant` that is related to this `CohortGroup`."""
  tenant: Tenant
  tenantId: BigInt!
}

"""
A condition to be used against `CohortGroup` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CohortGroupCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isPublic` field."""
  isPublic: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `ordering` field."""
  ordering: Int

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

"""An input for mutations affecting `CohortGroup`"""
input CohortGroupInput {
  description: String
  id: BigInt
  isPublic: Boolean
  name: String!
  ordering: Int
  tenantId: BigInt
}

"""
Represents an update to a `CohortGroup`. Fields that are set will be updated.
"""
input CohortGroupPatch {
  description: String
  id: BigInt
  isPublic: Boolean
  name: String
  ordering: Int
  tenantId: BigInt
}

"""A connection to a list of `CohortGroup` values."""
type CohortGroupsConnection {
  """
  A list of edges which contains the `CohortGroup` and cursor to aid in pagination.
  """
  edges: [CohortGroupsEdge!]!

  """A list of `CohortGroup` objects."""
  nodes: [CohortGroup!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CohortGroup` you could get from the connection."""
  totalCount: Int!
}

"""A `CohortGroup` edge in the connection."""
type CohortGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CohortGroup` at the end of the edge."""
  node: CohortGroup!
}

"""Methods to use when ordering `CohortGroup`."""
enum CohortGroupsOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORDERING_ASC
  ORDERING_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SKUPINIES_BY_COHORT_GROUP__COUNT_ASC
  SKUPINIES_BY_COHORT_GROUP__COUNT_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
}

type CohortMembership {
  active: Boolean

  """Reads a single `Skupiny` that is related to this `CohortMembership`."""
  cohort: Skupiny
  cohortId: BigInt!
  createdAt: Datetime!
  id: BigInt!

  """Reads a single `Person` that is related to this `CohortMembership`."""
  person: Person
  personId: BigInt!
  since: Datetime!

  """Reads a single `Tenant` that is related to this `CohortMembership`."""
  tenant: Tenant
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime!
}

"""
A condition to be used against `CohortMembership` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CohortMembershipCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `cohortId` field."""
  cohortId: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `CohortMembership`"""
input CohortMembershipInput {
  cohortId: BigInt!
  createdAt: Datetime
  personId: BigInt!
  since: Datetime
  tenantId: BigInt
  until: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `CohortMembership`. Fields that are set will be updated.
"""
input CohortMembershipPatch {
  cohortId: BigInt
  createdAt: Datetime
  personId: BigInt
  since: Datetime
  tenantId: BigInt
  until: Datetime
  updatedAt: Datetime
}

"""Methods to use when ordering `CohortMembership`."""
enum CohortMembershipsOrderBy {
  COHORT_ID_ASC
  COHORT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_BY_PERSON_ID__BIO_ASC
  PERSON_BY_PERSON_ID__BIO_DESC
  PERSON_BY_PERSON_ID__BIRTH_DATE_ASC
  PERSON_BY_PERSON_ID__BIRTH_DATE_DESC
  PERSON_BY_PERSON_ID__CREATED_AT_ASC
  PERSON_BY_PERSON_ID__CREATED_AT_DESC
  PERSON_BY_PERSON_ID__CSTS_ID_ASC
  PERSON_BY_PERSON_ID__CSTS_ID_DESC
  PERSON_BY_PERSON_ID__EMAIL_ASC
  PERSON_BY_PERSON_ID__EMAIL_DESC
  PERSON_BY_PERSON_ID__FIRST_NAME_ASC
  PERSON_BY_PERSON_ID__FIRST_NAME_DESC
  PERSON_BY_PERSON_ID__GENDER_ASC
  PERSON_BY_PERSON_ID__GENDER_DESC
  PERSON_BY_PERSON_ID__ID_ASC
  PERSON_BY_PERSON_ID__ID_DESC
  PERSON_BY_PERSON_ID__LAST_NAME_ASC
  PERSON_BY_PERSON_ID__LAST_NAME_DESC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_ASC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_DESC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_ASC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_DESC
  PERSON_BY_PERSON_ID__NATIONALITY_ASC
  PERSON_BY_PERSON_ID__NATIONALITY_DESC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_PERSON_ID__PHONE_ASC
  PERSON_BY_PERSON_ID__PHONE_DESC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_PERSON_ID__UPDATED_AT_ASC
  PERSON_BY_PERSON_ID__UPDATED_AT_DESC
  PERSON_BY_PERSON_ID__WDSF_ID_ASC
  PERSON_BY_PERSON_ID__WDSF_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  SKUPINY_BY_COHORT_ID__COHORT_GROUP_ASC
  SKUPINY_BY_COHORT_ID__COHORT_GROUP_DESC
  SKUPINY_BY_COHORT_ID__ID_ASC
  SKUPINY_BY_COHORT_ID__ID_DESC
  SKUPINY_BY_COHORT_ID__ORDERING_ASC
  SKUPINY_BY_COHORT_ID__ORDERING_DESC
  SKUPINY_BY_COHORT_ID__S_COLOR_RGB_ASC
  SKUPINY_BY_COHORT_ID__S_COLOR_RGB_DESC
  SKUPINY_BY_COHORT_ID__S_DESCRIPTION_ASC
  SKUPINY_BY_COHORT_ID__S_DESCRIPTION_DESC
  SKUPINY_BY_COHORT_ID__S_ID_ASC
  SKUPINY_BY_COHORT_ID__S_ID_DESC
  SKUPINY_BY_COHORT_ID__S_LOCATION_ASC
  SKUPINY_BY_COHORT_ID__S_LOCATION_DESC
  SKUPINY_BY_COHORT_ID__S_NAME_ASC
  SKUPINY_BY_COHORT_ID__S_NAME_DESC
  SKUPINY_BY_COHORT_ID__S_VISIBLE_ASC
  SKUPINY_BY_COHORT_ID__S_VISIBLE_DESC
  SKUPINY_BY_COHORT_ID__TENANT_ID_ASC
  SKUPINY_BY_COHORT_ID__TENANT_ID_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type Couple {
  active: Boolean

  """Reads and enables pagination through a set of `EventAttendance`."""
  attendancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventAttendanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventAttendance`."""
    orderBy: [EventAttendancesOrderBy!]
  ): [EventAttendance!]
  createdAt: Datetime!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]!
  id: BigInt!
  legacyParyId: BigInt

  """Reads a single `Person` that is related to this `Couple`."""
  man: Person
  manId: BigInt!
  since: Datetime!
  until: Datetime
  updatedAt: Datetime!

  """Reads a single `Person` that is related to this `Couple`."""
  woman: Person
  womanId: BigInt!
}

"""
A condition to be used against `Couple` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CoupleCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `legacyParyId` field."""
  legacyParyId: BigInt

  """Checks for equality with the object’s `manId` field."""
  manId: BigInt

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `womanId` field."""
  womanId: BigInt
}

"""An input for mutations affecting `Couple`"""
input CoupleInput {
  createdAt: Datetime
  legacyParyId: BigInt
  manId: BigInt!
  since: Datetime
  until: Datetime
  updatedAt: Datetime
  womanId: BigInt!
}

"""
Represents an update to a `Couple`. Fields that are set will be updated.
"""
input CouplePatch {
  createdAt: Datetime
  legacyParyId: BigInt
  manId: BigInt
  since: Datetime
  until: Datetime
  updatedAt: Datetime
  womanId: BigInt
}

"""A connection to a list of `Couple` values."""
type CouplesConnection {
  """
  A list of edges which contains the `Couple` and cursor to aid in pagination.
  """
  edges: [CouplesEdge!]!

  """A list of `Couple` objects."""
  nodes: [Couple!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Couple` you could get from the connection."""
  totalCount: Int!
}

"""A `Couple` edge in the connection."""
type CouplesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Couple` at the end of the edge."""
  node: Couple!
}

"""Methods to use when ordering `Couple`."""
enum CouplesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_REGISTRATIONS_BY_COUPLE_ID__COUNT_ASC
  EVENT_REGISTRATIONS_BY_COUPLE_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  LEGACY_PARY_ID_ASC
  LEGACY_PARY_ID_DESC
  MAN_ID_ASC
  MAN_ID_DESC
  NATURAL
  PERSON_BY_MAN_ID__BIO_ASC
  PERSON_BY_MAN_ID__BIO_DESC
  PERSON_BY_MAN_ID__BIRTH_DATE_ASC
  PERSON_BY_MAN_ID__BIRTH_DATE_DESC
  PERSON_BY_MAN_ID__CREATED_AT_ASC
  PERSON_BY_MAN_ID__CREATED_AT_DESC
  PERSON_BY_MAN_ID__CSTS_ID_ASC
  PERSON_BY_MAN_ID__CSTS_ID_DESC
  PERSON_BY_MAN_ID__EMAIL_ASC
  PERSON_BY_MAN_ID__EMAIL_DESC
  PERSON_BY_MAN_ID__FIRST_NAME_ASC
  PERSON_BY_MAN_ID__FIRST_NAME_DESC
  PERSON_BY_MAN_ID__GENDER_ASC
  PERSON_BY_MAN_ID__GENDER_DESC
  PERSON_BY_MAN_ID__ID_ASC
  PERSON_BY_MAN_ID__ID_DESC
  PERSON_BY_MAN_ID__LAST_NAME_ASC
  PERSON_BY_MAN_ID__LAST_NAME_DESC
  PERSON_BY_MAN_ID__LEGACY_USER_ID_ASC
  PERSON_BY_MAN_ID__LEGACY_USER_ID_DESC
  PERSON_BY_MAN_ID__MIDDLE_NAME_ASC
  PERSON_BY_MAN_ID__MIDDLE_NAME_DESC
  PERSON_BY_MAN_ID__NATIONALITY_ASC
  PERSON_BY_MAN_ID__NATIONALITY_DESC
  PERSON_BY_MAN_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_MAN_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_MAN_ID__PHONE_ASC
  PERSON_BY_MAN_ID__PHONE_DESC
  PERSON_BY_MAN_ID__PREFIX_TITLE_ASC
  PERSON_BY_MAN_ID__PREFIX_TITLE_DESC
  PERSON_BY_MAN_ID__SUFFIX_TITLE_ASC
  PERSON_BY_MAN_ID__SUFFIX_TITLE_DESC
  PERSON_BY_MAN_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_MAN_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_MAN_ID__UPDATED_AT_ASC
  PERSON_BY_MAN_ID__UPDATED_AT_DESC
  PERSON_BY_MAN_ID__WDSF_ID_ASC
  PERSON_BY_MAN_ID__WDSF_ID_DESC
  PERSON_BY_WOMAN_ID__BIO_ASC
  PERSON_BY_WOMAN_ID__BIO_DESC
  PERSON_BY_WOMAN_ID__BIRTH_DATE_ASC
  PERSON_BY_WOMAN_ID__BIRTH_DATE_DESC
  PERSON_BY_WOMAN_ID__CREATED_AT_ASC
  PERSON_BY_WOMAN_ID__CREATED_AT_DESC
  PERSON_BY_WOMAN_ID__CSTS_ID_ASC
  PERSON_BY_WOMAN_ID__CSTS_ID_DESC
  PERSON_BY_WOMAN_ID__EMAIL_ASC
  PERSON_BY_WOMAN_ID__EMAIL_DESC
  PERSON_BY_WOMAN_ID__FIRST_NAME_ASC
  PERSON_BY_WOMAN_ID__FIRST_NAME_DESC
  PERSON_BY_WOMAN_ID__GENDER_ASC
  PERSON_BY_WOMAN_ID__GENDER_DESC
  PERSON_BY_WOMAN_ID__ID_ASC
  PERSON_BY_WOMAN_ID__ID_DESC
  PERSON_BY_WOMAN_ID__LAST_NAME_ASC
  PERSON_BY_WOMAN_ID__LAST_NAME_DESC
  PERSON_BY_WOMAN_ID__LEGACY_USER_ID_ASC
  PERSON_BY_WOMAN_ID__LEGACY_USER_ID_DESC
  PERSON_BY_WOMAN_ID__MIDDLE_NAME_ASC
  PERSON_BY_WOMAN_ID__MIDDLE_NAME_DESC
  PERSON_BY_WOMAN_ID__NATIONALITY_ASC
  PERSON_BY_WOMAN_ID__NATIONALITY_DESC
  PERSON_BY_WOMAN_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_WOMAN_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_WOMAN_ID__PHONE_ASC
  PERSON_BY_WOMAN_ID__PHONE_DESC
  PERSON_BY_WOMAN_ID__PREFIX_TITLE_ASC
  PERSON_BY_WOMAN_ID__PREFIX_TITLE_DESC
  PERSON_BY_WOMAN_ID__SUFFIX_TITLE_ASC
  PERSON_BY_WOMAN_ID__SUFFIX_TITLE_DESC
  PERSON_BY_WOMAN_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_WOMAN_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_WOMAN_ID__UPDATED_AT_ASC
  PERSON_BY_WOMAN_ID__UPDATED_AT_DESC
  PERSON_BY_WOMAN_ID__WDSF_ID_ASC
  PERSON_BY_WOMAN_ID__WDSF_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  WOMAN_ID_ASC
  WOMAN_ID_DESC
}

"""All input for the create `Aktuality` mutation."""
input CreateAktualityInput {
  """The `Aktuality` to be created by this mutation."""
  aktuality: AktualityInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Aktuality` mutation."""
type CreateAktualityPayload {
  """The `Aktuality` that was created by this mutation."""
  aktuality: Aktuality

  """An edge for our `Aktuality`. May be used by Relay 1."""
  aktualityEdge(
    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `GalerieFoto` that is related to this `Aktuality`."""
  galerieFotoByAtFotoMain: GalerieFoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Aktuality`."""
  tenant: Tenant

  """Reads a single `User` that is related to this `Aktuality`."""
  userByAtKdo: User
}

"""All input for the create `Attachment` mutation."""
input CreateAttachmentInput {
  """The `Attachment` to be created by this mutation."""
  attachment: AttachmentInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Attachment` mutation."""
type CreateAttachmentPayload {
  """The `Attachment` that was created by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Attachment`."""
  userByUploadedBy: User
}

"""All input for the create `CohortGroup` mutation."""
input CreateCohortGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CohortGroup` to be created by this mutation."""
  cohortGroup: CohortGroupInput!
}

"""The output of our create `CohortGroup` mutation."""
type CreateCohortGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CohortGroup` that was created by this mutation."""
  cohortGroup: CohortGroup

  """An edge for our `CohortGroup`. May be used by Relay 1."""
  cohortGroupEdge(
    """The method to use when ordering `CohortGroup`."""
    orderBy: [CohortGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CohortGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `CohortGroup`."""
  tenant: Tenant
}

"""All input for the create `CohortMembership` mutation."""
input CreateCohortMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CohortMembership` to be created by this mutation."""
  cohortMembership: CohortMembershipInput!
}

"""The output of our create `CohortMembership` mutation."""
type CreateCohortMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Skupiny` that is related to this `CohortMembership`."""
  cohort: Skupiny

  """The `CohortMembership` that was created by this mutation."""
  cohortMembership: CohortMembership

  """Reads a single `Person` that is related to this `CohortMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `CohortMembership`."""
  tenant: Tenant
}

"""All input for the create `Couple` mutation."""
input CreateCoupleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Couple` to be created by this mutation."""
  couple: CoupleInput!
}

"""The output of our create `Couple` mutation."""
type CreateCouplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Couple` that was created by this mutation."""
  couple: Couple

  """An edge for our `Couple`. May be used by Relay 1."""
  coupleEdge(
    """The method to use when ordering `Couple`."""
    orderBy: [CouplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CouplesEdge

  """Reads a single `Person` that is related to this `Couple`."""
  man: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Person` that is related to this `Couple`."""
  woman: Person
}

"""All input for the create `Dokumenty` mutation."""
input CreateDokumentyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Dokumenty` to be created by this mutation."""
  dokumenty: DokumentyInput!
}

"""The output of our create `Dokumenty` mutation."""
type CreateDokumentyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dokumenty` that was created by this mutation."""
  dokumenty: Dokumenty

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Dokumenty`."""
  tenant: Tenant

  """Reads a single `User` that is related to this `Dokumenty`."""
  userByDKdo: User
}

"""All input for the create `Event` mutation."""
input CreateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Event` to be created by this mutation."""
  event: EventInput!
}

"""The output of our create `Event` mutation."""
type CreateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was created by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Event`."""
  tenant: Tenant
}

"""All input for the create `FormResponse` mutation."""
input CreateFormResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormResponse` to be created by this mutation."""
  formResponse: FormResponseInput!
}

"""The output of our create `FormResponse` mutation."""
type CreateFormResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResponse` that was created by this mutation."""
  formResponse: FormResponse

  """An edge for our `FormResponse`. May be used by Relay 1."""
  formResponseEdge(
    """The method to use when ordering `FormResponse`."""
    orderBy: [FormResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResponsesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `FormResponse`."""
  tenant: Tenant
}

"""All input for the create `Location` mutation."""
input CreateLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Location` to be created by this mutation."""
  location: LocationInput!
}

"""The output of our create `Location` mutation."""
type CreateLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Location` that was created by this mutation."""
  location: Location

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createPerson` mutation."""
input CreatePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  isAdmin: Boolean
  isMember: Boolean
  isTrainer: Boolean
  joinDate: Datetime
  p: PersonInput
  sendInvitation: Boolean
}

"""The output of our `createPerson` mutation."""
type CreatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  p: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Room` mutation."""
input CreateRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Room` to be created by this mutation."""
  room: RoomInput!
}

"""The output of our create `Room` mutation."""
type CreateRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Location` that is related to this `Room`."""
  locationByLocation: Location

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Room` that was created by this mutation."""
  room: Room

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomsEdge
}

"""All input for the create `Skupiny` mutation."""
input CreateSkupinyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Skupiny` to be created by this mutation."""
  skupiny: SkupinyInput!
}

"""The output of our create `Skupiny` mutation."""
type CreateSkupinyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `CohortGroup` that is related to this `Skupiny`."""
  cohortGroupByCohortGroup: CohortGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Skupiny` that was created by this mutation."""
  skupiny: Skupiny

  """An edge for our `Skupiny`. May be used by Relay 1."""
  skupinyEdge(
    """The method to use when ordering `Skupiny`."""
    orderBy: [SkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SkupiniesEdge

  """Reads a single `Tenant` that is related to this `Skupiny`."""
  tenant: Tenant
}

"""All input for the create `TenantAdministrator` mutation."""
input CreateTenantAdministratorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TenantAdministrator` to be created by this mutation."""
  tenantAdministrator: TenantAdministratorInput!
}

"""The output of our create `TenantAdministrator` mutation."""
type CreateTenantAdministratorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantAdministrator`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantAdministrator`."""
  tenant: Tenant

  """The `TenantAdministrator` that was created by this mutation."""
  tenantAdministrator: TenantAdministrator
}

"""All input for the create `TenantMembership` mutation."""
input CreateTenantMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TenantMembership` to be created by this mutation."""
  tenantMembership: TenantMembershipInput!
}

"""The output of our create `TenantMembership` mutation."""
type CreateTenantMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantMembership`."""
  tenant: Tenant

  """The `TenantMembership` that was created by this mutation."""
  tenantMembership: TenantMembership
}

"""All input for the create `TenantTrainer` mutation."""
input CreateTenantTrainerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TenantTrainer` to be created by this mutation."""
  tenantTrainer: TenantTrainerInput!
}

"""The output of our create `TenantTrainer` mutation."""
type CreateTenantTrainerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantTrainer`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantTrainer`."""
  tenant: Tenant

  """The `TenantTrainer` that was created by this mutation."""
  tenantTrainer: TenantTrainer
}

"""All input for the create `Upozorneni` mutation."""
input CreateUpozorneniInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Upozorneni` to be created by this mutation."""
  upozorneni: UpozorneniInput!
}

"""The output of our create `Upozorneni` mutation."""
type CreateUpozorneniPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Upozorneni`."""
  tenant: Tenant

  """The `Upozorneni` that was created by this mutation."""
  upozorneni: Upozorneni

  """An edge for our `Upozorneni`. May be used by Relay 1."""
  upozorneniEdge(
    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisEdge

  """Reads a single `User` that is related to this `Upozorneni`."""
  userByUpKdo: User
}

"""All input for the `currentPersonIds` mutation."""
input CurrentPersonIdsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `currentPersonIds` mutation."""
type CurrentPersonIdsPayload {
  bigInts: [BigInt]

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A range of `Datetime`."""
type DatetimeRange {
  """The ending bound of our range."""
  end: DatetimeRangeBound

  """The starting bound of our range."""
  start: DatetimeRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type DatetimeRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Datetime!
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
input DatetimeRangeBoundInput {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Datetime!
}

"""A range of `Datetime`."""
input DatetimeRangeInput {
  """The ending bound of our range."""
  end: DatetimeRangeBoundInput

  """The starting bound of our range."""
  start: DatetimeRangeBoundInput
}

"""All input for the `deleteAktuality` mutation."""
input DeleteAktualityInput {
  atId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our delete `Aktuality` mutation."""
type DeleteAktualityPayload {
  """The `Aktuality` that was deleted by this mutation."""
  aktuality: Aktuality

  """An edge for our `Aktuality`. May be used by Relay 1."""
  aktualityEdge(
    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAktualityNodeId: ID

  """Reads a single `GalerieFoto` that is related to this `Aktuality`."""
  galerieFotoByAtFotoMain: GalerieFoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Aktuality`."""
  tenant: Tenant

  """Reads a single `User` that is related to this `Aktuality`."""
  userByAtKdo: User
}

"""All input for the `deleteAttachment` mutation."""
input DeleteAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  objectName: String!
}

"""The output of our delete `Attachment` mutation."""
type DeleteAttachmentPayload {
  """The `Attachment` that was deleted by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAttachmentNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Attachment`."""
  userByUploadedBy: User
}

"""All input for the `deleteCohortGroup` mutation."""
input DeleteCohortGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `CohortGroup` mutation."""
type DeleteCohortGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CohortGroup` that was deleted by this mutation."""
  cohortGroup: CohortGroup

  """An edge for our `CohortGroup`. May be used by Relay 1."""
  cohortGroupEdge(
    """The method to use when ordering `CohortGroup`."""
    orderBy: [CohortGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CohortGroupsEdge
  deletedCohortGroupNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `CohortGroup`."""
  tenant: Tenant
}

"""All input for the `deleteDokumenty` mutation."""
input DeleteDokumentyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dId: BigInt!
}

"""The output of our delete `Dokumenty` mutation."""
type DeleteDokumentyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedDokumentyNodeId: ID

  """The `Dokumenty` that was deleted by this mutation."""
  dokumenty: Dokumenty

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Dokumenty`."""
  tenant: Tenant

  """Reads a single `User` that is related to this `Dokumenty`."""
  userByDKdo: User
}

"""All input for the `deleteEvent` mutation."""
input DeleteEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Event` mutation."""
type DeleteEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEventNodeId: ID

  """The `Event` that was deleted by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Event`."""
  tenant: Tenant
}

"""All input for the `deleteLocation` mutation."""
input DeleteLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Location` mutation."""
type DeleteLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedLocationNodeId: ID

  """The `Location` that was deleted by this mutation."""
  location: Location

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteRoom` mutation."""
input DeleteRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Room` mutation."""
type DeleteRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoomNodeId: ID

  """Reads a single `Location` that is related to this `Room`."""
  locationByLocation: Location

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Room` that was deleted by this mutation."""
  room: Room

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomsEdge
}

"""All input for the `deleteSkupiny` mutation."""
input DeleteSkupinyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sId: BigInt!
}

"""The output of our delete `Skupiny` mutation."""
type DeleteSkupinyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `CohortGroup` that is related to this `Skupiny`."""
  cohortGroupByCohortGroup: CohortGroup
  deletedSkupinyNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Skupiny` that was deleted by this mutation."""
  skupiny: Skupiny

  """An edge for our `Skupiny`. May be used by Relay 1."""
  skupinyEdge(
    """The method to use when ordering `Skupiny`."""
    orderBy: [SkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SkupiniesEdge

  """Reads a single `Tenant` that is related to this `Skupiny`."""
  tenant: Tenant
}

"""All input for the `deleteUpozorneni` mutation."""
input DeleteUpozorneniInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  upId: BigInt!
}

"""The output of our delete `Upozorneni` mutation."""
type DeleteUpozorneniPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUpozorneniNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Upozorneni`."""
  tenant: Tenant

  """The `Upozorneni` that was deleted by this mutation."""
  upozorneni: Upozorneni

  """An edge for our `Upozorneni`. May be used by Relay 1."""
  upozorneniEdge(
    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisEdge

  """Reads a single `User` that is related to this `Upozorneni`."""
  userByUpKdo: User
}

"""Methods to use when ordering `Dokumenty`."""
enum DokumentiesOrderBy {
  D_FILENAME_ASC
  D_FILENAME_DESC
  D_ID_ASC
  D_ID_DESC
  D_KATEGORIE_ASC
  D_KATEGORIE_DESC
  D_KDO_ASC
  D_KDO_DESC
  D_NAME_ASC
  D_NAME_DESC
  D_PATH_ASC
  D_PATH_DESC
  D_TIMESTAMP_ASC
  D_TIMESTAMP_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  USER_BY_D_KDO__ID_ASC
  USER_BY_D_KDO__ID_DESC
  USER_BY_D_KDO__TENANT_ID_ASC
  USER_BY_D_KDO__TENANT_ID_DESC
  USER_BY_D_KDO__U_CREATED_AT_ASC
  USER_BY_D_KDO__U_CREATED_AT_DESC
  USER_BY_D_KDO__U_EMAIL_ASC
  USER_BY_D_KDO__U_EMAIL_DESC
  USER_BY_D_KDO__U_ID_ASC
  USER_BY_D_KDO__U_ID_DESC
  USER_BY_D_KDO__U_JMENO_ASC
  USER_BY_D_KDO__U_JMENO_DESC
  USER_BY_D_KDO__U_LOGIN_ASC
  USER_BY_D_KDO__U_LOGIN_DESC
  USER_BY_D_KDO__U_NATIONALITY_ASC
  USER_BY_D_KDO__U_NATIONALITY_DESC
  USER_BY_D_KDO__U_PRIJMENI_ASC
  USER_BY_D_KDO__U_PRIJMENI_DESC
  USER_BY_D_KDO__U_TIMESTAMP_ASC
  USER_BY_D_KDO__U_TIMESTAMP_DESC
}

type Dokumenty {
  dFilename: String!
  dId: BigInt!
  dKategorie: Int!
  dKdo: BigInt!
  dName: String!
  dPath: String!
  dTimestamp: Datetime
  id: BigInt

  """Reads a single `Tenant` that is related to this `Dokumenty`."""
  tenant: Tenant
  tenantId: BigInt!

  """Reads a single `User` that is related to this `Dokumenty`."""
  userByDKdo: User
}

"""
A condition to be used against `Dokumenty` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DokumentyCondition {
  """Checks for equality with the object’s `dFilename` field."""
  dFilename: String

  """Checks for equality with the object’s `dId` field."""
  dId: BigInt

  """Checks for equality with the object’s `dKategorie` field."""
  dKategorie: Int

  """Checks for equality with the object’s `dKdo` field."""
  dKdo: BigInt

  """Checks for equality with the object’s `dName` field."""
  dName: String

  """Checks for equality with the object’s `dPath` field."""
  dPath: String

  """Checks for equality with the object’s `dTimestamp` field."""
  dTimestamp: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

"""An input for mutations affecting `Dokumenty`"""
input DokumentyInput {
  dFilename: String!
  dId: BigInt
  dKategorie: Int!
  dKdo: BigInt!
  dName: String!
  dPath: String!
  dTimestamp: Datetime
  id: BigInt
  tenantId: BigInt
}

"""
Represents an update to a `Dokumenty`. Fields that are set will be updated.
"""
input DokumentyPatch {
  dFilename: String
  dId: BigInt
  dKategorie: Int
  dKdo: BigInt
  dName: String
  dPath: String
  dTimestamp: Datetime
  id: BigInt
  tenantId: BigInt
}

"""All input for the `editRegistration` mutation."""
input EditRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  note: String!
  registrationId: BigInt!
}

"""The output of our `editRegistration` mutation."""
type EditRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Couple` that is related to this `EventRegistration`."""
  couple: Couple

  """Reads a single `Event` that is related to this `EventRegistration`."""
  event: Event
  eventRegistration: EventRegistration

  """
  Reads a single `PlatbyItem` that is related to this `EventRegistration`.
  """
  payment: PlatbyItem

  """Reads a single `Person` that is related to this `EventRegistration`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EventTargetCohort` that is related to this `EventRegistration`.
  """
  targetCohort: EventTargetCohort

  """Reads a single `Tenant` that is related to this `EventRegistration`."""
  tenant: Tenant
}

type Event {
  capacity: BigInt!
  description: String!
  descriptionMember: String!
  enableNotes: Boolean!

  """Reads and enables pagination through a set of `EventInstance`."""
  eventInstances(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventInstancesConnection!

  """Reads and enables pagination through a set of `EventInstance`."""
  eventInstancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!]
  ): [EventInstance!]!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]!

  """Reads and enables pagination through a set of `EventTargetCohort`."""
  eventTargetCohortsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTargetCohortCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTargetCohort`."""
    orderBy: [EventTargetCohortsOrderBy!]
  ): [EventTargetCohort!]!

  """Reads and enables pagination through a set of `EventTrainer`."""
  eventTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTrainer`."""
    orderBy: [EventTrainersOrderBy!]
  ): [EventTrainer!]!
  filesLegacy: String!
  id: BigInt!
  isLocked: Boolean!
  isPublic: Boolean!
  isVisible: Boolean!
  locationText: String!
  name: String!

  """Reads and enables pagination through a set of `Person`."""
  registrantsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Person!]
  registrationPrice: Price
  remainingLessons: Int
  remainingPersonSpots: Int
  since: Date
  summary: String!

  """Reads a single `Tenant` that is related to this `Event`."""
  tenant: Tenant
  tenantId: BigInt!
  titleImageLegacy: String
  type: EventType!
  until: Date
  updatedAt: Datetime
}

type EventAttendance {
  createdAt: Datetime!
  id: BigInt!

  """
  Reads a single `EventInstance` that is related to this `EventAttendance`.
  """
  instance: EventInstance
  instanceId: BigInt!
  note: String

  """Reads a single `Person` that is related to this `EventAttendance`."""
  person: Person
  personId: BigInt!

  """
  Reads a single `EventRegistration` that is related to this `EventAttendance`.
  """
  registration: EventRegistration
  registrationId: BigInt!
  status: AttendanceType!

  """Reads a single `Tenant` that is related to this `EventAttendance`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventAttendance` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventAttendanceCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `instanceId` field."""
  instanceId: BigInt

  """Checks for equality with the object’s `note` field."""
  note: String

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `registrationId` field."""
  registrationId: BigInt

  """Checks for equality with the object’s `status` field."""
  status: AttendanceType

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""Methods to use when ordering `EventAttendance`."""
enum EventAttendancesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__CREATED_AT_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__CREATED_AT_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__EVENT_ID_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__EVENT_ID_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__ID_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__ID_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__LOCATION_ID_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__LOCATION_ID_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__RANGE_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__RANGE_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__SINCE_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__SINCE_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__TENANT_ID_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__TENANT_ID_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__UNTIL_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__UNTIL_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__UPDATED_AT_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__UPDATED_AT_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__CONFIRMED_AT_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__CONFIRMED_AT_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__COUPLE_ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__COUPLE_ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__CREATED_AT_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__CREATED_AT_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__EVENT_ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__EVENT_ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__IS_CONFIRMED_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__IS_CONFIRMED_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__NOTE_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__NOTE_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__PAYMENT_ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__PAYMENT_ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__PERSON_ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__PERSON_ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__STATUS_TIME_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__STATUS_TIME_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__TARGET_COHORT_ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__TARGET_COHORT_ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__TENANT_ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__TENANT_ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__UPDATED_AT_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  INSTANCE_ID_ASC
  INSTANCE_ID_DESC
  NATURAL
  NOTE_ASC
  NOTE_DESC
  PERSON_BY_PERSON_ID__BIO_ASC
  PERSON_BY_PERSON_ID__BIO_DESC
  PERSON_BY_PERSON_ID__BIRTH_DATE_ASC
  PERSON_BY_PERSON_ID__BIRTH_DATE_DESC
  PERSON_BY_PERSON_ID__CREATED_AT_ASC
  PERSON_BY_PERSON_ID__CREATED_AT_DESC
  PERSON_BY_PERSON_ID__CSTS_ID_ASC
  PERSON_BY_PERSON_ID__CSTS_ID_DESC
  PERSON_BY_PERSON_ID__EMAIL_ASC
  PERSON_BY_PERSON_ID__EMAIL_DESC
  PERSON_BY_PERSON_ID__FIRST_NAME_ASC
  PERSON_BY_PERSON_ID__FIRST_NAME_DESC
  PERSON_BY_PERSON_ID__GENDER_ASC
  PERSON_BY_PERSON_ID__GENDER_DESC
  PERSON_BY_PERSON_ID__ID_ASC
  PERSON_BY_PERSON_ID__ID_DESC
  PERSON_BY_PERSON_ID__LAST_NAME_ASC
  PERSON_BY_PERSON_ID__LAST_NAME_DESC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_ASC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_DESC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_ASC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_DESC
  PERSON_BY_PERSON_ID__NATIONALITY_ASC
  PERSON_BY_PERSON_ID__NATIONALITY_DESC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_PERSON_ID__PHONE_ASC
  PERSON_BY_PERSON_ID__PHONE_DESC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_PERSON_ID__UPDATED_AT_ASC
  PERSON_BY_PERSON_ID__UPDATED_AT_DESC
  PERSON_BY_PERSON_ID__WDSF_ID_ASC
  PERSON_BY_PERSON_ID__WDSF_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REGISTRATION_ID_ASC
  REGISTRATION_ID_DESC
  STATUS_ASC
  STATUS_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventCondition {
  """Checks for equality with the object’s `capacity` field."""
  capacity: BigInt

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `descriptionMember` field."""
  descriptionMember: String

  """Checks for equality with the object’s `enableNotes` field."""
  enableNotes: Boolean

  """Checks for equality with the object’s `filesLegacy` field."""
  filesLegacy: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isLocked` field."""
  isLocked: Boolean

  """Checks for equality with the object’s `isPublic` field."""
  isPublic: Boolean

  """Checks for equality with the object’s `isVisible` field."""
  isVisible: Boolean

  """Checks for equality with the object’s `locationText` field."""
  locationText: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `registrationPrice` field."""
  registrationPrice: PriceInput

  """Checks for equality with the object’s `since` field."""
  since: Date

  """Checks for equality with the object’s `summary` field."""
  summary: String

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `titleImageLegacy` field."""
  titleImageLegacy: String

  """Checks for equality with the object’s `type` field."""
  type: EventType

  """Checks for equality with the object’s `until` field."""
  until: Date

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Event`"""
input EventInput {
  capacity: BigInt
  description: String!
  descriptionMember: String
  enableNotes: Boolean
  filesLegacy: String
  id: BigInt
  isLocked: Boolean
  isPublic: Boolean
  isVisible: Boolean
  locationText: String!
  name: String!
  registrationPrice: PriceInput
  since: Date
  summary: String
  tenantId: BigInt
  titleImageLegacy: String
  type: EventType
  until: Date
  updatedAt: Datetime
}

type EventInstance {
  createdAt: Datetime!

  """Reads a single `Event` that is related to this `EventInstance`."""
  event: Event

  """Reads and enables pagination through a set of `EventAttendance`."""
  eventAttendancesByInstanceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventAttendanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventAttendance`."""
    orderBy: [EventAttendancesOrderBy!]
  ): [EventAttendance!]!
  eventId: BigInt!

  """Reads and enables pagination through a set of `EventInstanceTrainer`."""
  eventInstanceTrainersByInstanceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstanceTrainer`."""
    orderBy: [EventInstanceTrainersOrderBy!]
  ): [EventInstanceTrainer!]!
  id: BigInt!

  """Reads a single `Location` that is related to this `EventInstance`."""
  location: Location
  locationId: BigInt
  range: DatetimeRange!
  since: Datetime!

  """Reads a single `Tenant` that is related to this `EventInstance`."""
  tenant: Tenant
  tenantId: BigInt!
  until: Datetime!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventInstance` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventInstanceCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `locationId` field."""
  locationId: BigInt

  """Checks for equality with the object’s `range` field."""
  range: DatetimeRangeInput

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

type EventInstanceTrainer {
  createdAt: Datetime!
  id: BigInt!

  """
  Reads a single `EventInstance` that is related to this `EventInstanceTrainer`.
  """
  instance: EventInstance
  instanceId: BigInt!

  """
  Reads a single `Person` that is related to this `EventInstanceTrainer`.
  """
  person: Person
  personId: BigInt!

  """
  Reads a single `Tenant` that is related to this `EventInstanceTrainer`.
  """
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventInstanceTrainer` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EventInstanceTrainerCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `instanceId` field."""
  instanceId: BigInt

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""Methods to use when ordering `EventInstanceTrainer`."""
enum EventInstanceTrainersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__CREATED_AT_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__CREATED_AT_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__EVENT_ID_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__EVENT_ID_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__ID_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__ID_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__LOCATION_ID_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__LOCATION_ID_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__RANGE_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__RANGE_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__SINCE_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__SINCE_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__TENANT_ID_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__TENANT_ID_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__UNTIL_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__UNTIL_DESC
  EVENT_INSTANCE_BY_INSTANCE_ID__UPDATED_AT_ASC
  EVENT_INSTANCE_BY_INSTANCE_ID__UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  INSTANCE_ID_ASC
  INSTANCE_ID_DESC
  NATURAL
  PERSON_BY_PERSON_ID__BIO_ASC
  PERSON_BY_PERSON_ID__BIO_DESC
  PERSON_BY_PERSON_ID__BIRTH_DATE_ASC
  PERSON_BY_PERSON_ID__BIRTH_DATE_DESC
  PERSON_BY_PERSON_ID__CREATED_AT_ASC
  PERSON_BY_PERSON_ID__CREATED_AT_DESC
  PERSON_BY_PERSON_ID__CSTS_ID_ASC
  PERSON_BY_PERSON_ID__CSTS_ID_DESC
  PERSON_BY_PERSON_ID__EMAIL_ASC
  PERSON_BY_PERSON_ID__EMAIL_DESC
  PERSON_BY_PERSON_ID__FIRST_NAME_ASC
  PERSON_BY_PERSON_ID__FIRST_NAME_DESC
  PERSON_BY_PERSON_ID__GENDER_ASC
  PERSON_BY_PERSON_ID__GENDER_DESC
  PERSON_BY_PERSON_ID__ID_ASC
  PERSON_BY_PERSON_ID__ID_DESC
  PERSON_BY_PERSON_ID__LAST_NAME_ASC
  PERSON_BY_PERSON_ID__LAST_NAME_DESC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_ASC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_DESC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_ASC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_DESC
  PERSON_BY_PERSON_ID__NATIONALITY_ASC
  PERSON_BY_PERSON_ID__NATIONALITY_DESC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_PERSON_ID__PHONE_ASC
  PERSON_BY_PERSON_ID__PHONE_DESC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_PERSON_ID__UPDATED_AT_ASC
  PERSON_BY_PERSON_ID__UPDATED_AT_DESC
  PERSON_BY_PERSON_ID__WDSF_ID_ASC
  PERSON_BY_PERSON_ID__WDSF_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A connection to a list of `EventInstance` values."""
type EventInstancesConnection {
  """
  A list of edges which contains the `EventInstance` and cursor to aid in pagination.
  """
  edges: [EventInstancesEdge!]!

  """A list of `EventInstance` objects."""
  nodes: [EventInstance!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventInstance` you could get from the connection."""
  totalCount: Int!
}

"""A `EventInstance` edge in the connection."""
type EventInstancesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventInstance` at the end of the edge."""
  node: EventInstance!
}

"""Methods to use when ordering `EventInstance`."""
enum EventInstancesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_ATTENDANCES_BY_INSTANCE_ID__COUNT_ASC
  EVENT_ATTENDANCES_BY_INSTANCE_ID__COUNT_DESC
  EVENT_BY_EVENT_ID__CAPACITY_ASC
  EVENT_BY_EVENT_ID__CAPACITY_DESC
  EVENT_BY_EVENT_ID__DESCRIPTION_ASC
  EVENT_BY_EVENT_ID__DESCRIPTION_DESC
  EVENT_BY_EVENT_ID__DESCRIPTION_MEMBER_ASC
  EVENT_BY_EVENT_ID__DESCRIPTION_MEMBER_DESC
  EVENT_BY_EVENT_ID__ENABLE_NOTES_ASC
  EVENT_BY_EVENT_ID__ENABLE_NOTES_DESC
  EVENT_BY_EVENT_ID__FILES_LEGACY_ASC
  EVENT_BY_EVENT_ID__FILES_LEGACY_DESC
  EVENT_BY_EVENT_ID__ID_ASC
  EVENT_BY_EVENT_ID__ID_DESC
  EVENT_BY_EVENT_ID__IS_LOCKED_ASC
  EVENT_BY_EVENT_ID__IS_LOCKED_DESC
  EVENT_BY_EVENT_ID__IS_PUBLIC_ASC
  EVENT_BY_EVENT_ID__IS_PUBLIC_DESC
  EVENT_BY_EVENT_ID__IS_VISIBLE_ASC
  EVENT_BY_EVENT_ID__IS_VISIBLE_DESC
  EVENT_BY_EVENT_ID__LOCATION_TEXT_ASC
  EVENT_BY_EVENT_ID__LOCATION_TEXT_DESC
  EVENT_BY_EVENT_ID__NAME_ASC
  EVENT_BY_EVENT_ID__NAME_DESC
  EVENT_BY_EVENT_ID__REGISTRATION_PRICE_ASC
  EVENT_BY_EVENT_ID__REGISTRATION_PRICE_DESC
  EVENT_BY_EVENT_ID__SINCE_ASC
  EVENT_BY_EVENT_ID__SINCE_DESC
  EVENT_BY_EVENT_ID__SUMMARY_ASC
  EVENT_BY_EVENT_ID__SUMMARY_DESC
  EVENT_BY_EVENT_ID__TENANT_ID_ASC
  EVENT_BY_EVENT_ID__TENANT_ID_DESC
  EVENT_BY_EVENT_ID__TITLE_IMAGE_LEGACY_ASC
  EVENT_BY_EVENT_ID__TITLE_IMAGE_LEGACY_DESC
  EVENT_BY_EVENT_ID__TYPE_ASC
  EVENT_BY_EVENT_ID__TYPE_DESC
  EVENT_BY_EVENT_ID__UNTIL_ASC
  EVENT_BY_EVENT_ID__UNTIL_DESC
  EVENT_BY_EVENT_ID__UPDATED_AT_ASC
  EVENT_BY_EVENT_ID__UPDATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  EVENT_INSTANCE_TRAINERS_BY_INSTANCE_ID__COUNT_ASC
  EVENT_INSTANCE_TRAINERS_BY_INSTANCE_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  LOCATION_BY_LOCATION_ID__ADDRESS_ASC
  LOCATION_BY_LOCATION_ID__ADDRESS_DESC
  LOCATION_BY_LOCATION_ID__DESCRIPTION_ASC
  LOCATION_BY_LOCATION_ID__DESCRIPTION_DESC
  LOCATION_BY_LOCATION_ID__ID_ASC
  LOCATION_BY_LOCATION_ID__ID_DESC
  LOCATION_BY_LOCATION_ID__NAME_ASC
  LOCATION_BY_LOCATION_ID__NAME_DESC
  LOCATION_ID_ASC
  LOCATION_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RANGE_ASC
  RANGE_DESC
  SINCE_ASC
  SINCE_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type EventLessonDemand {
  createdAt: Datetime!
  id: BigInt!
  lessonCount: Int!

  """
  Reads a single `EventRegistration` that is related to this `EventLessonDemand`.
  """
  registration: EventRegistration
  registrationId: BigInt!

  """Reads a single `Tenant` that is related to this `EventLessonDemand`."""
  tenant: Tenant
  tenantId: BigInt!

  """
  Reads a single `EventTrainer` that is related to this `EventLessonDemand`.
  """
  trainer: EventTrainer
  trainerId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventLessonDemand` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventLessonDemandCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `lessonCount` field."""
  lessonCount: Int

  """Checks for equality with the object’s `registrationId` field."""
  registrationId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `trainerId` field."""
  trainerId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
Represents an update to a `EventLessonDemand`. Fields that are set will be updated.
"""
input EventLessonDemandPatch {
  createdAt: Datetime
  lessonCount: Int
  registrationId: BigInt
  tenantId: BigInt
  trainerId: BigInt
  updatedAt: Datetime
}

"""Methods to use when ordering `EventLessonDemand`."""
enum EventLessonDemandsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__CONFIRMED_AT_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__CONFIRMED_AT_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__COUPLE_ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__COUPLE_ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__CREATED_AT_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__CREATED_AT_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__EVENT_ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__EVENT_ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__IS_CONFIRMED_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__IS_CONFIRMED_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__NOTE_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__NOTE_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__PAYMENT_ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__PAYMENT_ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__PERSON_ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__PERSON_ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__STATUS_TIME_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__STATUS_TIME_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__TARGET_COHORT_ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__TARGET_COHORT_ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__TENANT_ID_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__TENANT_ID_DESC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__UPDATED_AT_ASC
  EVENT_REGISTRATION_BY_REGISTRATION_ID__UPDATED_AT_DESC
  EVENT_TRAINER_BY_TRAINER_ID__CREATED_AT_ASC
  EVENT_TRAINER_BY_TRAINER_ID__CREATED_AT_DESC
  EVENT_TRAINER_BY_TRAINER_ID__EVENT_ID_ASC
  EVENT_TRAINER_BY_TRAINER_ID__EVENT_ID_DESC
  EVENT_TRAINER_BY_TRAINER_ID__ID_ASC
  EVENT_TRAINER_BY_TRAINER_ID__ID_DESC
  EVENT_TRAINER_BY_TRAINER_ID__LESSONS_OFFERED_ASC
  EVENT_TRAINER_BY_TRAINER_ID__LESSONS_OFFERED_DESC
  EVENT_TRAINER_BY_TRAINER_ID__LESSON_PRICE_ASC
  EVENT_TRAINER_BY_TRAINER_ID__LESSON_PRICE_DESC
  EVENT_TRAINER_BY_TRAINER_ID__PERSON_ID_ASC
  EVENT_TRAINER_BY_TRAINER_ID__PERSON_ID_DESC
  EVENT_TRAINER_BY_TRAINER_ID__TENANT_ID_ASC
  EVENT_TRAINER_BY_TRAINER_ID__TENANT_ID_DESC
  EVENT_TRAINER_BY_TRAINER_ID__UPDATED_AT_ASC
  EVENT_TRAINER_BY_TRAINER_ID__UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  LESSON_COUNT_ASC
  LESSON_COUNT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REGISTRATION_ID_ASC
  REGISTRATION_ID_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  TRAINER_ID_ASC
  TRAINER_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Event`. Fields that are set will be updated.
"""
input EventPatch {
  capacity: BigInt
  description: String
  descriptionMember: String
  enableNotes: Boolean
  filesLegacy: String
  id: BigInt
  isLocked: Boolean
  isPublic: Boolean
  isVisible: Boolean
  locationText: String
  name: String
  registrationPrice: PriceInput
  since: Date
  summary: String
  tenantId: BigInt
  titleImageLegacy: String
  type: EventType
  until: Date
  updatedAt: Datetime
}

type EventRegistration {
  confirmedAt: Datetime

  """Reads a single `Couple` that is related to this `EventRegistration`."""
  couple: Couple
  coupleId: BigInt
  createdAt: Datetime!

  """Reads a single `Event` that is related to this `EventRegistration`."""
  event: Event

  """Reads and enables pagination through a set of `EventAttendance`."""
  eventAttendancesByRegistrationIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventAttendanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventAttendance`."""
    orderBy: [EventAttendancesOrderBy!]
  ): [EventAttendance!]!
  eventId: BigInt!

  """Reads and enables pagination through a set of `EventLessonDemand`."""
  eventLessonDemandsByRegistrationIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventLessonDemandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventLessonDemand`."""
    orderBy: [EventLessonDemandsOrderBy!]
  ): [EventLessonDemand!]!
  id: BigInt!
  isConfirmed: Boolean
  note: String

  """
  Reads a single `PlatbyItem` that is related to this `EventRegistration`.
  """
  payment: PlatbyItem
  paymentId: BigInt

  """Reads a single `Person` that is related to this `EventRegistration`."""
  person: Person
  personId: BigInt
  statusTime: RegistrationTime!

  """
  Reads a single `EventTargetCohort` that is related to this `EventRegistration`.
  """
  targetCohort: EventTargetCohort
  targetCohortId: BigInt

  """Reads a single `Tenant` that is related to this `EventRegistration`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventRegistration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventRegistrationCondition {
  """Checks for equality with the object’s `confirmedAt` field."""
  confirmedAt: Datetime

  """Checks for equality with the object’s `coupleId` field."""
  coupleId: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isConfirmed` field."""
  isConfirmed: Boolean

  """Checks for equality with the object’s `note` field."""
  note: String

  """Checks for equality with the object’s `paymentId` field."""
  paymentId: BigInt

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `statusTime` field."""
  statusTime: RegistrationTime

  """Checks for equality with the object’s `targetCohortId` field."""
  targetCohortId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `EventRegistration`"""
input EventRegistrationInput {
  confirmedAt: Datetime
  coupleId: BigInt
  createdAt: Datetime
  eventId: BigInt!
  isConfirmed: Boolean
  note: String
  paymentId: BigInt
  personId: BigInt
  statusTime: RegistrationTime
  targetCohortId: BigInt
  tenantId: BigInt
  updatedAt: Datetime
}

"""Methods to use when ordering `EventRegistration`."""
enum EventRegistrationsOrderBy {
  CONFIRMED_AT_ASC
  CONFIRMED_AT_DESC
  COUPLE_BY_COUPLE_ID__CREATED_AT_ASC
  COUPLE_BY_COUPLE_ID__CREATED_AT_DESC
  COUPLE_BY_COUPLE_ID__ID_ASC
  COUPLE_BY_COUPLE_ID__ID_DESC
  COUPLE_BY_COUPLE_ID__LEGACY_PARY_ID_ASC
  COUPLE_BY_COUPLE_ID__LEGACY_PARY_ID_DESC
  COUPLE_BY_COUPLE_ID__MAN_ID_ASC
  COUPLE_BY_COUPLE_ID__MAN_ID_DESC
  COUPLE_BY_COUPLE_ID__SINCE_ASC
  COUPLE_BY_COUPLE_ID__SINCE_DESC
  COUPLE_BY_COUPLE_ID__UNTIL_ASC
  COUPLE_BY_COUPLE_ID__UNTIL_DESC
  COUPLE_BY_COUPLE_ID__UPDATED_AT_ASC
  COUPLE_BY_COUPLE_ID__UPDATED_AT_DESC
  COUPLE_BY_COUPLE_ID__WOMAN_ID_ASC
  COUPLE_BY_COUPLE_ID__WOMAN_ID_DESC
  COUPLE_ID_ASC
  COUPLE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_ATTENDANCES_BY_REGISTRATION_ID__COUNT_ASC
  EVENT_ATTENDANCES_BY_REGISTRATION_ID__COUNT_DESC
  EVENT_BY_EVENT_ID__CAPACITY_ASC
  EVENT_BY_EVENT_ID__CAPACITY_DESC
  EVENT_BY_EVENT_ID__DESCRIPTION_ASC
  EVENT_BY_EVENT_ID__DESCRIPTION_DESC
  EVENT_BY_EVENT_ID__DESCRIPTION_MEMBER_ASC
  EVENT_BY_EVENT_ID__DESCRIPTION_MEMBER_DESC
  EVENT_BY_EVENT_ID__ENABLE_NOTES_ASC
  EVENT_BY_EVENT_ID__ENABLE_NOTES_DESC
  EVENT_BY_EVENT_ID__FILES_LEGACY_ASC
  EVENT_BY_EVENT_ID__FILES_LEGACY_DESC
  EVENT_BY_EVENT_ID__ID_ASC
  EVENT_BY_EVENT_ID__ID_DESC
  EVENT_BY_EVENT_ID__IS_LOCKED_ASC
  EVENT_BY_EVENT_ID__IS_LOCKED_DESC
  EVENT_BY_EVENT_ID__IS_PUBLIC_ASC
  EVENT_BY_EVENT_ID__IS_PUBLIC_DESC
  EVENT_BY_EVENT_ID__IS_VISIBLE_ASC
  EVENT_BY_EVENT_ID__IS_VISIBLE_DESC
  EVENT_BY_EVENT_ID__LOCATION_TEXT_ASC
  EVENT_BY_EVENT_ID__LOCATION_TEXT_DESC
  EVENT_BY_EVENT_ID__NAME_ASC
  EVENT_BY_EVENT_ID__NAME_DESC
  EVENT_BY_EVENT_ID__REGISTRATION_PRICE_ASC
  EVENT_BY_EVENT_ID__REGISTRATION_PRICE_DESC
  EVENT_BY_EVENT_ID__SINCE_ASC
  EVENT_BY_EVENT_ID__SINCE_DESC
  EVENT_BY_EVENT_ID__SUMMARY_ASC
  EVENT_BY_EVENT_ID__SUMMARY_DESC
  EVENT_BY_EVENT_ID__TENANT_ID_ASC
  EVENT_BY_EVENT_ID__TENANT_ID_DESC
  EVENT_BY_EVENT_ID__TITLE_IMAGE_LEGACY_ASC
  EVENT_BY_EVENT_ID__TITLE_IMAGE_LEGACY_DESC
  EVENT_BY_EVENT_ID__TYPE_ASC
  EVENT_BY_EVENT_ID__TYPE_DESC
  EVENT_BY_EVENT_ID__UNTIL_ASC
  EVENT_BY_EVENT_ID__UNTIL_DESC
  EVENT_BY_EVENT_ID__UPDATED_AT_ASC
  EVENT_BY_EVENT_ID__UPDATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  EVENT_LESSON_DEMANDS_BY_REGISTRATION_ID__COUNT_ASC
  EVENT_LESSON_DEMANDS_BY_REGISTRATION_ID__COUNT_DESC
  EVENT_TARGET_COHORT_BY_TARGET_COHORT_ID__COHORT_ID_ASC
  EVENT_TARGET_COHORT_BY_TARGET_COHORT_ID__COHORT_ID_DESC
  EVENT_TARGET_COHORT_BY_TARGET_COHORT_ID__CREATED_AT_ASC
  EVENT_TARGET_COHORT_BY_TARGET_COHORT_ID__CREATED_AT_DESC
  EVENT_TARGET_COHORT_BY_TARGET_COHORT_ID__EVENT_ID_ASC
  EVENT_TARGET_COHORT_BY_TARGET_COHORT_ID__EVENT_ID_DESC
  EVENT_TARGET_COHORT_BY_TARGET_COHORT_ID__ID_ASC
  EVENT_TARGET_COHORT_BY_TARGET_COHORT_ID__ID_DESC
  EVENT_TARGET_COHORT_BY_TARGET_COHORT_ID__TENANT_ID_ASC
  EVENT_TARGET_COHORT_BY_TARGET_COHORT_ID__TENANT_ID_DESC
  EVENT_TARGET_COHORT_BY_TARGET_COHORT_ID__UPDATED_AT_ASC
  EVENT_TARGET_COHORT_BY_TARGET_COHORT_ID__UPDATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_CONFIRMED_ASC
  IS_CONFIRMED_DESC
  NATURAL
  NOTE_ASC
  NOTE_DESC
  PAYMENT_ID_ASC
  PAYMENT_ID_DESC
  PERSON_BY_PERSON_ID__BIO_ASC
  PERSON_BY_PERSON_ID__BIO_DESC
  PERSON_BY_PERSON_ID__BIRTH_DATE_ASC
  PERSON_BY_PERSON_ID__BIRTH_DATE_DESC
  PERSON_BY_PERSON_ID__CREATED_AT_ASC
  PERSON_BY_PERSON_ID__CREATED_AT_DESC
  PERSON_BY_PERSON_ID__CSTS_ID_ASC
  PERSON_BY_PERSON_ID__CSTS_ID_DESC
  PERSON_BY_PERSON_ID__EMAIL_ASC
  PERSON_BY_PERSON_ID__EMAIL_DESC
  PERSON_BY_PERSON_ID__FIRST_NAME_ASC
  PERSON_BY_PERSON_ID__FIRST_NAME_DESC
  PERSON_BY_PERSON_ID__GENDER_ASC
  PERSON_BY_PERSON_ID__GENDER_DESC
  PERSON_BY_PERSON_ID__ID_ASC
  PERSON_BY_PERSON_ID__ID_DESC
  PERSON_BY_PERSON_ID__LAST_NAME_ASC
  PERSON_BY_PERSON_ID__LAST_NAME_DESC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_ASC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_DESC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_ASC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_DESC
  PERSON_BY_PERSON_ID__NATIONALITY_ASC
  PERSON_BY_PERSON_ID__NATIONALITY_DESC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_PERSON_ID__PHONE_ASC
  PERSON_BY_PERSON_ID__PHONE_DESC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_PERSON_ID__UPDATED_AT_ASC
  PERSON_BY_PERSON_ID__UPDATED_AT_DESC
  PERSON_BY_PERSON_ID__WDSF_ID_ASC
  PERSON_BY_PERSON_ID__WDSF_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PLATBY_ITEM_BY_PAYMENT_ID__ID_ASC
  PLATBY_ITEM_BY_PAYMENT_ID__ID_DESC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_AMOUNT_ASC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_AMOUNT_DESC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_DATE_ASC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_DATE_DESC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_ID_ASC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_ID_CATEGORY_ASC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_ID_CATEGORY_DESC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_ID_DESC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_ID_RAW_ASC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_ID_RAW_DESC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_ID_USER_ASC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_ID_USER_DESC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_PREFIX_ASC
  PLATBY_ITEM_BY_PAYMENT_ID__PI_PREFIX_DESC
  PLATBY_ITEM_BY_PAYMENT_ID__STATUS_ASC
  PLATBY_ITEM_BY_PAYMENT_ID__STATUS_DESC
  PLATBY_ITEM_BY_PAYMENT_ID__TENANT_ID_ASC
  PLATBY_ITEM_BY_PAYMENT_ID__TENANT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_TIME_ASC
  STATUS_TIME_DESC
  TARGET_COHORT_ID_ASC
  TARGET_COHORT_ID_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type EventTargetCohort {
  """Reads a single `Skupiny` that is related to this `EventTargetCohort`."""
  cohort: Skupiny
  cohortId: BigInt!
  createdAt: Datetime!

  """Reads a single `Event` that is related to this `EventTargetCohort`."""
  event: Event
  eventId: BigInt!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrationsByTargetCohortIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]!
  id: BigInt!

  """Reads a single `Tenant` that is related to this `EventTargetCohort`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventTargetCohort` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventTargetCohortCondition {
  """Checks for equality with the object’s `cohortId` field."""
  cohortId: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""Methods to use when ordering `EventTargetCohort`."""
enum EventTargetCohortsOrderBy {
  COHORT_ID_ASC
  COHORT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_BY_EVENT_ID__CAPACITY_ASC
  EVENT_BY_EVENT_ID__CAPACITY_DESC
  EVENT_BY_EVENT_ID__DESCRIPTION_ASC
  EVENT_BY_EVENT_ID__DESCRIPTION_DESC
  EVENT_BY_EVENT_ID__DESCRIPTION_MEMBER_ASC
  EVENT_BY_EVENT_ID__DESCRIPTION_MEMBER_DESC
  EVENT_BY_EVENT_ID__ENABLE_NOTES_ASC
  EVENT_BY_EVENT_ID__ENABLE_NOTES_DESC
  EVENT_BY_EVENT_ID__FILES_LEGACY_ASC
  EVENT_BY_EVENT_ID__FILES_LEGACY_DESC
  EVENT_BY_EVENT_ID__ID_ASC
  EVENT_BY_EVENT_ID__ID_DESC
  EVENT_BY_EVENT_ID__IS_LOCKED_ASC
  EVENT_BY_EVENT_ID__IS_LOCKED_DESC
  EVENT_BY_EVENT_ID__IS_PUBLIC_ASC
  EVENT_BY_EVENT_ID__IS_PUBLIC_DESC
  EVENT_BY_EVENT_ID__IS_VISIBLE_ASC
  EVENT_BY_EVENT_ID__IS_VISIBLE_DESC
  EVENT_BY_EVENT_ID__LOCATION_TEXT_ASC
  EVENT_BY_EVENT_ID__LOCATION_TEXT_DESC
  EVENT_BY_EVENT_ID__NAME_ASC
  EVENT_BY_EVENT_ID__NAME_DESC
  EVENT_BY_EVENT_ID__REGISTRATION_PRICE_ASC
  EVENT_BY_EVENT_ID__REGISTRATION_PRICE_DESC
  EVENT_BY_EVENT_ID__SINCE_ASC
  EVENT_BY_EVENT_ID__SINCE_DESC
  EVENT_BY_EVENT_ID__SUMMARY_ASC
  EVENT_BY_EVENT_ID__SUMMARY_DESC
  EVENT_BY_EVENT_ID__TENANT_ID_ASC
  EVENT_BY_EVENT_ID__TENANT_ID_DESC
  EVENT_BY_EVENT_ID__TITLE_IMAGE_LEGACY_ASC
  EVENT_BY_EVENT_ID__TITLE_IMAGE_LEGACY_DESC
  EVENT_BY_EVENT_ID__TYPE_ASC
  EVENT_BY_EVENT_ID__TYPE_DESC
  EVENT_BY_EVENT_ID__UNTIL_ASC
  EVENT_BY_EVENT_ID__UNTIL_DESC
  EVENT_BY_EVENT_ID__UPDATED_AT_ASC
  EVENT_BY_EVENT_ID__UPDATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  EVENT_REGISTRATIONS_BY_TARGET_COHORT_ID__COUNT_ASC
  EVENT_REGISTRATIONS_BY_TARGET_COHORT_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SKUPINY_BY_COHORT_ID__COHORT_GROUP_ASC
  SKUPINY_BY_COHORT_ID__COHORT_GROUP_DESC
  SKUPINY_BY_COHORT_ID__ID_ASC
  SKUPINY_BY_COHORT_ID__ID_DESC
  SKUPINY_BY_COHORT_ID__ORDERING_ASC
  SKUPINY_BY_COHORT_ID__ORDERING_DESC
  SKUPINY_BY_COHORT_ID__S_COLOR_RGB_ASC
  SKUPINY_BY_COHORT_ID__S_COLOR_RGB_DESC
  SKUPINY_BY_COHORT_ID__S_DESCRIPTION_ASC
  SKUPINY_BY_COHORT_ID__S_DESCRIPTION_DESC
  SKUPINY_BY_COHORT_ID__S_ID_ASC
  SKUPINY_BY_COHORT_ID__S_ID_DESC
  SKUPINY_BY_COHORT_ID__S_LOCATION_ASC
  SKUPINY_BY_COHORT_ID__S_LOCATION_DESC
  SKUPINY_BY_COHORT_ID__S_NAME_ASC
  SKUPINY_BY_COHORT_ID__S_NAME_DESC
  SKUPINY_BY_COHORT_ID__S_VISIBLE_ASC
  SKUPINY_BY_COHORT_ID__S_VISIBLE_DESC
  SKUPINY_BY_COHORT_ID__TENANT_ID_ASC
  SKUPINY_BY_COHORT_ID__TENANT_ID_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type EventTrainer {
  createdAt: Datetime!

  """Reads a single `Event` that is related to this `EventTrainer`."""
  event: Event
  eventId: BigInt!

  """Reads and enables pagination through a set of `EventLessonDemand`."""
  eventLessonDemandsByTrainerIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventLessonDemandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventLessonDemand`."""
    orderBy: [EventLessonDemandsOrderBy!]
  ): [EventLessonDemand!]!
  id: BigInt!
  lessonPrice: Price
  lessonsOffered: Int!
  lessonsRemaining: Int

  """Reads a single `Person` that is related to this `EventTrainer`."""
  person: Person
  personId: BigInt!

  """Reads a single `Tenant` that is related to this `EventTrainer`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventTrainer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventTrainerCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `lessonPrice` field."""
  lessonPrice: PriceInput

  """Checks for equality with the object’s `lessonsOffered` field."""
  lessonsOffered: Int

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""Methods to use when ordering `EventTrainer`."""
enum EventTrainersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_BY_EVENT_ID__CAPACITY_ASC
  EVENT_BY_EVENT_ID__CAPACITY_DESC
  EVENT_BY_EVENT_ID__DESCRIPTION_ASC
  EVENT_BY_EVENT_ID__DESCRIPTION_DESC
  EVENT_BY_EVENT_ID__DESCRIPTION_MEMBER_ASC
  EVENT_BY_EVENT_ID__DESCRIPTION_MEMBER_DESC
  EVENT_BY_EVENT_ID__ENABLE_NOTES_ASC
  EVENT_BY_EVENT_ID__ENABLE_NOTES_DESC
  EVENT_BY_EVENT_ID__FILES_LEGACY_ASC
  EVENT_BY_EVENT_ID__FILES_LEGACY_DESC
  EVENT_BY_EVENT_ID__ID_ASC
  EVENT_BY_EVENT_ID__ID_DESC
  EVENT_BY_EVENT_ID__IS_LOCKED_ASC
  EVENT_BY_EVENT_ID__IS_LOCKED_DESC
  EVENT_BY_EVENT_ID__IS_PUBLIC_ASC
  EVENT_BY_EVENT_ID__IS_PUBLIC_DESC
  EVENT_BY_EVENT_ID__IS_VISIBLE_ASC
  EVENT_BY_EVENT_ID__IS_VISIBLE_DESC
  EVENT_BY_EVENT_ID__LOCATION_TEXT_ASC
  EVENT_BY_EVENT_ID__LOCATION_TEXT_DESC
  EVENT_BY_EVENT_ID__NAME_ASC
  EVENT_BY_EVENT_ID__NAME_DESC
  EVENT_BY_EVENT_ID__REGISTRATION_PRICE_ASC
  EVENT_BY_EVENT_ID__REGISTRATION_PRICE_DESC
  EVENT_BY_EVENT_ID__SINCE_ASC
  EVENT_BY_EVENT_ID__SINCE_DESC
  EVENT_BY_EVENT_ID__SUMMARY_ASC
  EVENT_BY_EVENT_ID__SUMMARY_DESC
  EVENT_BY_EVENT_ID__TENANT_ID_ASC
  EVENT_BY_EVENT_ID__TENANT_ID_DESC
  EVENT_BY_EVENT_ID__TITLE_IMAGE_LEGACY_ASC
  EVENT_BY_EVENT_ID__TITLE_IMAGE_LEGACY_DESC
  EVENT_BY_EVENT_ID__TYPE_ASC
  EVENT_BY_EVENT_ID__TYPE_DESC
  EVENT_BY_EVENT_ID__UNTIL_ASC
  EVENT_BY_EVENT_ID__UNTIL_DESC
  EVENT_BY_EVENT_ID__UPDATED_AT_ASC
  EVENT_BY_EVENT_ID__UPDATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  EVENT_LESSON_DEMANDS_BY_TRAINER_ID__COUNT_ASC
  EVENT_LESSON_DEMANDS_BY_TRAINER_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  LESSONS_OFFERED_ASC
  LESSONS_OFFERED_DESC
  LESSON_PRICE_ASC
  LESSON_PRICE_DESC
  NATURAL
  PERSON_BY_PERSON_ID__BIO_ASC
  PERSON_BY_PERSON_ID__BIO_DESC
  PERSON_BY_PERSON_ID__BIRTH_DATE_ASC
  PERSON_BY_PERSON_ID__BIRTH_DATE_DESC
  PERSON_BY_PERSON_ID__CREATED_AT_ASC
  PERSON_BY_PERSON_ID__CREATED_AT_DESC
  PERSON_BY_PERSON_ID__CSTS_ID_ASC
  PERSON_BY_PERSON_ID__CSTS_ID_DESC
  PERSON_BY_PERSON_ID__EMAIL_ASC
  PERSON_BY_PERSON_ID__EMAIL_DESC
  PERSON_BY_PERSON_ID__FIRST_NAME_ASC
  PERSON_BY_PERSON_ID__FIRST_NAME_DESC
  PERSON_BY_PERSON_ID__GENDER_ASC
  PERSON_BY_PERSON_ID__GENDER_DESC
  PERSON_BY_PERSON_ID__ID_ASC
  PERSON_BY_PERSON_ID__ID_DESC
  PERSON_BY_PERSON_ID__LAST_NAME_ASC
  PERSON_BY_PERSON_ID__LAST_NAME_DESC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_ASC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_DESC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_ASC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_DESC
  PERSON_BY_PERSON_ID__NATIONALITY_ASC
  PERSON_BY_PERSON_ID__NATIONALITY_DESC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_PERSON_ID__PHONE_ASC
  PERSON_BY_PERSON_ID__PHONE_DESC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_PERSON_ID__UPDATED_AT_ASC
  PERSON_BY_PERSON_ID__UPDATED_AT_DESC
  PERSON_BY_PERSON_ID__WDSF_ID_ASC
  PERSON_BY_PERSON_ID__WDSF_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum EventType {
  CAMP
  HOLIDAY
  LESSON
  RESERVATION
}

"""A connection to a list of `Event` values."""
type EventsConnection {
  """
  A list of edges which contains the `Event` and cursor to aid in pagination.
  """
  edges: [EventsEdge!]!

  """A list of `Event` objects."""
  nodes: [Event!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Event` you could get from the connection."""
  totalCount: Int!
}

"""A `Event` edge in the connection."""
type EventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Event` at the end of the edge."""
  node: Event!
}

"""Methods to use when ordering `Event`."""
enum EventsOrderBy {
  CAPACITY_ASC
  CAPACITY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  DESCRIPTION_MEMBER_ASC
  DESCRIPTION_MEMBER_DESC
  ENABLE_NOTES_ASC
  ENABLE_NOTES_DESC
  EVENT_INSTANCES_BY_EVENT_ID__COUNT_ASC
  EVENT_INSTANCES_BY_EVENT_ID__COUNT_DESC
  EVENT_REGISTRATIONS_BY_EVENT_ID__COUNT_ASC
  EVENT_REGISTRATIONS_BY_EVENT_ID__COUNT_DESC
  EVENT_TARGET_COHORTS_BY_EVENT_ID__COUNT_ASC
  EVENT_TARGET_COHORTS_BY_EVENT_ID__COUNT_DESC
  EVENT_TRAINERS_BY_EVENT_ID__COUNT_ASC
  EVENT_TRAINERS_BY_EVENT_ID__COUNT_DESC
  FILES_LEGACY_ASC
  FILES_LEGACY_DESC
  ID_ASC
  ID_DESC
  IS_LOCKED_ASC
  IS_LOCKED_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  IS_VISIBLE_ASC
  IS_VISIBLE_DESC
  LOCATION_TEXT_ASC
  LOCATION_TEXT_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REGISTRATION_PRICE_ASC
  REGISTRATION_PRICE_DESC
  SINCE_ASC
  SINCE_DESC
  SUMMARY_ASC
  SUMMARY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  TITLE_IMAGE_LEGACY_ASC
  TITLE_IMAGE_LEGACY_DESC
  TYPE_ASC
  TYPE_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type FormResponse {
  createdAt: Datetime!
  data: JSON!
  id: BigInt!

  """Reads a single `Tenant` that is related to this `FormResponse`."""
  tenant: Tenant
  tenantId: BigInt!
  type: String!
  updatedAt: Datetime!
  url: String!
}

"""
A condition to be used against `FormResponse` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FormResponseCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `data` field."""
  data: JSON

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `url` field."""
  url: String
}

"""An input for mutations affecting `FormResponse`"""
input FormResponseInput {
  createdAt: Datetime
  data: JSON!
  id: BigInt
  tenantId: BigInt
  type: String!
  updatedAt: Datetime
  url: String!
}

"""A connection to a list of `FormResponse` values."""
type FormResponsesConnection {
  """
  A list of edges which contains the `FormResponse` and cursor to aid in pagination.
  """
  edges: [FormResponsesEdge!]!

  """A list of `FormResponse` objects."""
  nodes: [FormResponse!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormResponse` you could get from the connection."""
  totalCount: Int!
}

"""A `FormResponse` edge in the connection."""
type FormResponsesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormResponse` at the end of the edge."""
  node: FormResponse!
}

"""Methods to use when ordering `FormResponse`."""
enum FormResponsesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DATA_ASC
  DATA_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  URL_ASC
  URL_DESC
}

type GalerieDir {
  """Reads and enables pagination through a set of `GalerieFoto`."""
  galerieFotosByGfIdRodic(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieFotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosConnection!
  gdHidden: Boolean!
  gdId: BigInt!
  gdIdRodic: BigInt!
  gdLevel: Int!
  gdName: String!
  gdPath: String!
  id: BigInt

  """Reads a single `Tenant` that is related to this `GalerieDir`."""
  tenant: Tenant
  tenantId: BigInt!
}

"""
A condition to be used against `GalerieDir` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GalerieDirCondition {
  """Checks for equality with the object’s `gdHidden` field."""
  gdHidden: Boolean

  """Checks for equality with the object’s `gdId` field."""
  gdId: BigInt

  """Checks for equality with the object’s `gdIdRodic` field."""
  gdIdRodic: BigInt

  """Checks for equality with the object’s `gdLevel` field."""
  gdLevel: Int

  """Checks for equality with the object’s `gdName` field."""
  gdName: String

  """Checks for equality with the object’s `gdPath` field."""
  gdPath: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

"""A connection to a list of `GalerieDir` values."""
type GalerieDirsConnection {
  """
  A list of edges which contains the `GalerieDir` and cursor to aid in pagination.
  """
  edges: [GalerieDirsEdge!]!

  """A list of `GalerieDir` objects."""
  nodes: [GalerieDir!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GalerieDir` you could get from the connection."""
  totalCount: Int!
}

"""A `GalerieDir` edge in the connection."""
type GalerieDirsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GalerieDir` at the end of the edge."""
  node: GalerieDir!
}

"""Methods to use when ordering `GalerieDir`."""
enum GalerieDirsOrderBy {
  GALERIE_FOTOS_BY_GF_ID_RODIC__COUNT_ASC
  GALERIE_FOTOS_BY_GF_ID_RODIC__COUNT_DESC
  GD_HIDDEN_ASC
  GD_HIDDEN_DESC
  GD_ID_ASC
  GD_ID_DESC
  GD_ID_RODIC_ASC
  GD_ID_RODIC_DESC
  GD_LEVEL_ASC
  GD_LEVEL_DESC
  GD_NAME_ASC
  GD_NAME_DESC
  GD_PATH_ASC
  GD_PATH_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
}

type GalerieFoto {
  """Reads and enables pagination through a set of `Aktuality`."""
  aktualitiesByAtFotoMain(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AktualityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesConnection!

  """Reads a single `GalerieDir` that is related to this `GalerieFoto`."""
  galerieDirByGfIdRodic: GalerieDir
  gfId: BigInt!
  gfIdRodic: BigInt!
  gfKdo: BigInt!
  gfName: String!
  gfPath: String!
  gfTimestamp: Datetime
  id: BigInt

  """Reads a single `Tenant` that is related to this `GalerieFoto`."""
  tenant: Tenant
  tenantId: BigInt!

  """Reads a single `User` that is related to this `GalerieFoto`."""
  userByGfKdo: User
}

"""
A condition to be used against `GalerieFoto` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GalerieFotoCondition {
  """Checks for equality with the object’s `gfId` field."""
  gfId: BigInt

  """Checks for equality with the object’s `gfIdRodic` field."""
  gfIdRodic: BigInt

  """Checks for equality with the object’s `gfKdo` field."""
  gfKdo: BigInt

  """Checks for equality with the object’s `gfName` field."""
  gfName: String

  """Checks for equality with the object’s `gfPath` field."""
  gfPath: String

  """Checks for equality with the object’s `gfTimestamp` field."""
  gfTimestamp: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

"""A connection to a list of `GalerieFoto` values."""
type GalerieFotosConnection {
  """
  A list of edges which contains the `GalerieFoto` and cursor to aid in pagination.
  """
  edges: [GalerieFotosEdge!]!

  """A list of `GalerieFoto` objects."""
  nodes: [GalerieFoto!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GalerieFoto` you could get from the connection."""
  totalCount: Int!
}

"""A `GalerieFoto` edge in the connection."""
type GalerieFotosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GalerieFoto` at the end of the edge."""
  node: GalerieFoto!
}

"""Methods to use when ordering `GalerieFoto`."""
enum GalerieFotosOrderBy {
  AKTUALITIES_BY_AT_FOTO_MAIN__COUNT_ASC
  AKTUALITIES_BY_AT_FOTO_MAIN__COUNT_DESC
  GALERIE_DIR_BY_GF_ID_RODIC__GD_HIDDEN_ASC
  GALERIE_DIR_BY_GF_ID_RODIC__GD_HIDDEN_DESC
  GALERIE_DIR_BY_GF_ID_RODIC__GD_ID_ASC
  GALERIE_DIR_BY_GF_ID_RODIC__GD_ID_DESC
  GALERIE_DIR_BY_GF_ID_RODIC__GD_ID_RODIC_ASC
  GALERIE_DIR_BY_GF_ID_RODIC__GD_ID_RODIC_DESC
  GALERIE_DIR_BY_GF_ID_RODIC__GD_LEVEL_ASC
  GALERIE_DIR_BY_GF_ID_RODIC__GD_LEVEL_DESC
  GALERIE_DIR_BY_GF_ID_RODIC__GD_NAME_ASC
  GALERIE_DIR_BY_GF_ID_RODIC__GD_NAME_DESC
  GALERIE_DIR_BY_GF_ID_RODIC__GD_PATH_ASC
  GALERIE_DIR_BY_GF_ID_RODIC__GD_PATH_DESC
  GALERIE_DIR_BY_GF_ID_RODIC__ID_ASC
  GALERIE_DIR_BY_GF_ID_RODIC__ID_DESC
  GALERIE_DIR_BY_GF_ID_RODIC__TENANT_ID_ASC
  GALERIE_DIR_BY_GF_ID_RODIC__TENANT_ID_DESC
  GF_ID_ASC
  GF_ID_DESC
  GF_ID_RODIC_ASC
  GF_ID_RODIC_DESC
  GF_KDO_ASC
  GF_KDO_DESC
  GF_NAME_ASC
  GF_NAME_DESC
  GF_PATH_ASC
  GF_PATH_DESC
  GF_TIMESTAMP_ASC
  GF_TIMESTAMP_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  USER_BY_GF_KDO__ID_ASC
  USER_BY_GF_KDO__ID_DESC
  USER_BY_GF_KDO__TENANT_ID_ASC
  USER_BY_GF_KDO__TENANT_ID_DESC
  USER_BY_GF_KDO__U_CREATED_AT_ASC
  USER_BY_GF_KDO__U_CREATED_AT_DESC
  USER_BY_GF_KDO__U_EMAIL_ASC
  USER_BY_GF_KDO__U_EMAIL_DESC
  USER_BY_GF_KDO__U_ID_ASC
  USER_BY_GF_KDO__U_ID_DESC
  USER_BY_GF_KDO__U_JMENO_ASC
  USER_BY_GF_KDO__U_JMENO_DESC
  USER_BY_GF_KDO__U_LOGIN_ASC
  USER_BY_GF_KDO__U_LOGIN_DESC
  USER_BY_GF_KDO__U_NATIONALITY_ASC
  USER_BY_GF_KDO__U_NATIONALITY_DESC
  USER_BY_GF_KDO__U_PRIJMENI_ASC
  USER_BY_GF_KDO__U_PRIJMENI_DESC
  USER_BY_GF_KDO__U_TIMESTAMP_ASC
  USER_BY_GF_KDO__U_TIMESTAMP_DESC
}

enum GenderType {
  MAN
  UNSPECIFIED
  WOMAN
}

"""All input for the `isCurrentTenantMember` mutation."""
input IsCurrentTenantMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `isCurrentTenantMember` mutation."""
type IsCurrentTenantMemberPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

type Location {
  address: AddressDomain
  description: JSON!

  """Reads and enables pagination through a set of `EventInstance`."""
  eventInstances(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventInstancesConnection!

  """Reads and enables pagination through a set of `EventInstance`."""
  eventInstancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!]
  ): [EventInstance!]!
  id: BigInt!

  """Reads and enables pagination through a set of `LocationAttachment`."""
  locationAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LocationAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LocationAttachment`."""
    orderBy: [LocationAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationAttachmentsConnection!
  name: String!

  """Reads and enables pagination through a set of `Room`."""
  roomsByLocation(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomsConnection!

  """Reads and enables pagination through a set of `TenantLocation`."""
  tenantLocationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantLocationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantLocation`."""
    orderBy: [TenantLocationsOrderBy!]
  ): [TenantLocation!]!
}

type LocationAttachment {
  """
  Reads a single `Attachment` that is related to this `LocationAttachment`.
  """
  attachmentByObjectName: Attachment

  """
  Reads a single `Location` that is related to this `LocationAttachment`.
  """
  location: Location
  locationId: BigInt!
  objectName: String!
}

"""
A condition to be used against `LocationAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LocationAttachmentCondition {
  """Checks for equality with the object’s `locationId` field."""
  locationId: BigInt

  """Checks for equality with the object’s `objectName` field."""
  objectName: String
}

"""A connection to a list of `LocationAttachment` values."""
type LocationAttachmentsConnection {
  """
  A list of edges which contains the `LocationAttachment` and cursor to aid in pagination.
  """
  edges: [LocationAttachmentsEdge!]!

  """A list of `LocationAttachment` objects."""
  nodes: [LocationAttachment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LocationAttachment` you could get from the connection.
  """
  totalCount: Int!
}

"""A `LocationAttachment` edge in the connection."""
type LocationAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LocationAttachment` at the end of the edge."""
  node: LocationAttachment!
}

"""Methods to use when ordering `LocationAttachment`."""
enum LocationAttachmentsOrderBy {
  ATTACHMENT_BY_OBJECT_NAME__HEIGHT_ASC
  ATTACHMENT_BY_OBJECT_NAME__HEIGHT_DESC
  ATTACHMENT_BY_OBJECT_NAME__OBJECT_NAME_ASC
  ATTACHMENT_BY_OBJECT_NAME__OBJECT_NAME_DESC
  ATTACHMENT_BY_OBJECT_NAME__PREVIEW_OBJECT_NAME_ASC
  ATTACHMENT_BY_OBJECT_NAME__PREVIEW_OBJECT_NAME_DESC
  ATTACHMENT_BY_OBJECT_NAME__THUMBHASH_ASC
  ATTACHMENT_BY_OBJECT_NAME__THUMBHASH_DESC
  ATTACHMENT_BY_OBJECT_NAME__UPLOADED_AT_ASC
  ATTACHMENT_BY_OBJECT_NAME__UPLOADED_AT_DESC
  ATTACHMENT_BY_OBJECT_NAME__UPLOADED_BY_ASC
  ATTACHMENT_BY_OBJECT_NAME__UPLOADED_BY_DESC
  ATTACHMENT_BY_OBJECT_NAME__WIDTH_ASC
  ATTACHMENT_BY_OBJECT_NAME__WIDTH_DESC
  LOCATION_BY_LOCATION_ID__ADDRESS_ASC
  LOCATION_BY_LOCATION_ID__ADDRESS_DESC
  LOCATION_BY_LOCATION_ID__DESCRIPTION_ASC
  LOCATION_BY_LOCATION_ID__DESCRIPTION_DESC
  LOCATION_BY_LOCATION_ID__ID_ASC
  LOCATION_BY_LOCATION_ID__ID_DESC
  LOCATION_BY_LOCATION_ID__NAME_ASC
  LOCATION_BY_LOCATION_ID__NAME_DESC
  LOCATION_ID_ASC
  LOCATION_ID_DESC
  NATURAL
  OBJECT_NAME_ASC
  OBJECT_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Location` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LocationCondition {
  """Checks for equality with the object’s `address` field."""
  address: AddressDomainInput

  """Checks for equality with the object’s `description` field."""
  description: JSON

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Location`"""
input LocationInput {
  address: AddressDomainInput
  description: JSON!
  id: BigInt
  name: String!
}

"""
Represents an update to a `Location`. Fields that are set will be updated.
"""
input LocationPatch {
  address: AddressDomainInput
  description: JSON
  id: BigInt
  name: String
}

"""A connection to a list of `Location` values."""
type LocationsConnection {
  """
  A list of edges which contains the `Location` and cursor to aid in pagination.
  """
  edges: [LocationsEdge!]!

  """A list of `Location` objects."""
  nodes: [Location!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Location` you could get from the connection."""
  totalCount: Int!
}

"""A `Location` edge in the connection."""
type LocationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Location` at the end of the edge."""
  node: Location!
}

"""Methods to use when ordering `Location`."""
enum LocationsOrderBy {
  ADDRESS_ASC
  ADDRESS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EVENT_INSTANCES_BY_LOCATION_ID__COUNT_ASC
  EVENT_INSTANCES_BY_LOCATION_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  LOCATION_ATTACHMENTS_BY_LOCATION_ID__COUNT_ASC
  LOCATION_ATTACHMENTS_BY_LOCATION_ID__COUNT_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOMS_BY_LOCATION__COUNT_ASC
  ROOMS_BY_LOCATION__COUNT_DESC
  TENANT_LOCATIONS_BY_LOCATION_ID__COUNT_ASC
  TENANT_LOCATIONS_BY_LOCATION_ID__COUNT_DESC
}

"""All input for the `login` mutation."""
input LoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  login: String!
  passwd: String!
}

"""The output of our `login` mutation."""
type LoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: LoginRecord
}

"""The return type of our `login` mutation."""
type LoginRecord {
  jwt: JwtToken
  sess: Session
  usr: User
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  cancelRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CancelRegistrationInput!
  ): CancelRegistrationPayload
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """Creates a single `Aktuality`."""
  createAktuality(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAktualityInput!
  ): CreateAktualityPayload

  """Creates a single `Attachment`."""
  createAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttachmentInput!
  ): CreateAttachmentPayload

  """Creates a single `CohortGroup`."""
  createCohortGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCohortGroupInput!
  ): CreateCohortGroupPayload

  """Creates a single `CohortMembership`."""
  createCohortMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCohortMembershipInput!
  ): CreateCohortMembershipPayload

  """Creates a single `Couple`."""
  createCouple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCoupleInput!
  ): CreateCouplePayload

  """Creates a single `Dokumenty`."""
  createDokumenty(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDokumentyInput!
  ): CreateDokumentyPayload

  """Creates a single `Event`."""
  createEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventInput!
  ): CreateEventPayload

  """Creates a single `FormResponse`."""
  createFormResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormResponseInput!
  ): CreateFormResponsePayload

  """Creates a single `Location`."""
  createLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLocationInput!
  ): CreateLocationPayload
  createPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePersonInput!
  ): CreatePersonPayload

  """Creates a single `Room`."""
  createRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomInput!
  ): CreateRoomPayload

  """Creates a single `Skupiny`."""
  createSkupiny(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSkupinyInput!
  ): CreateSkupinyPayload

  """Creates a single `TenantAdministrator`."""
  createTenantAdministrator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTenantAdministratorInput!
  ): CreateTenantAdministratorPayload

  """Creates a single `TenantMembership`."""
  createTenantMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTenantMembershipInput!
  ): CreateTenantMembershipPayload

  """Creates a single `TenantTrainer`."""
  createTenantTrainer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTenantTrainerInput!
  ): CreateTenantTrainerPayload

  """Creates a single `Upozorneni`."""
  createUpozorneni(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUpozorneniInput!
  ): CreateUpozorneniPayload
  currentPersonIds(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CurrentPersonIdsInput!
  ): CurrentPersonIdsPayload

  """Deletes a single `Aktuality` using a unique key."""
  deleteAktuality(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAktualityInput!
  ): DeleteAktualityPayload

  """Deletes a single `Attachment` using a unique key."""
  deleteAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentInput!
  ): DeleteAttachmentPayload

  """Deletes a single `CohortGroup` using a unique key."""
  deleteCohortGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCohortGroupInput!
  ): DeleteCohortGroupPayload

  """Deletes a single `Dokumenty` using a unique key."""
  deleteDokumenty(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDokumentyInput!
  ): DeleteDokumentyPayload

  """Deletes a single `Event` using a unique key."""
  deleteEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventInput!
  ): DeleteEventPayload

  """Deletes a single `Location` using a unique key."""
  deleteLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLocationInput!
  ): DeleteLocationPayload

  """Deletes a single `Room` using a unique key."""
  deleteRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomInput!
  ): DeleteRoomPayload

  """Deletes a single `Skupiny` using a unique key."""
  deleteSkupiny(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSkupinyInput!
  ): DeleteSkupinyPayload

  """Deletes a single `Upozorneni` using a unique key."""
  deleteUpozorneni(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUpozorneniInput!
  ): DeleteUpozorneniPayload
  editRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: EditRegistrationInput!
  ): EditRegistrationPayload
  isCurrentTenantMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: IsCurrentTenantMemberInput!
  ): IsCurrentTenantMemberPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
  registerToEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterToEventInput!
  ): RegisterToEventPayload
  registerUsingInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterUsingInvitationInput!
  ): RegisterUsingInvitationPayload
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload
  setLessonDemand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetLessonDemandInput!
  ): SetLessonDemandPayload
  submitForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SubmitFormInput!
  ): SubmitFormPayload

  """Updates a single `Aktuality` using a unique key and a patch."""
  updateAktuality(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAktualityInput!
  ): UpdateAktualityPayload

  """Updates a single `CohortGroup` using a unique key and a patch."""
  updateCohortGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCohortGroupInput!
  ): UpdateCohortGroupPayload

  """Updates a single `CohortMembership` using a unique key and a patch."""
  updateCohortMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCohortMembershipInput!
  ): UpdateCohortMembershipPayload

  """Updates a single `Couple` using a unique key and a patch."""
  updateCouple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCoupleInput!
  ): UpdateCouplePayload

  """Updates a single `Dokumenty` using a unique key and a patch."""
  updateDokumenty(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDokumentyInput!
  ): UpdateDokumentyPayload

  """Updates a single `Event` using a unique key and a patch."""
  updateEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventInput!
  ): UpdateEventPayload

  """Updates a single `Location` using a unique key and a patch."""
  updateLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLocationInput!
  ): UpdateLocationPayload

  """Updates a single `Person` using a unique key and a patch."""
  updatePerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonInput!
  ): UpdatePersonPayload

  """Updates a single `Room` using a unique key and a patch."""
  updateRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomInput!
  ): UpdateRoomPayload

  """Updates a single `Skupiny` using a unique key and a patch."""
  updateSkupiny(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSkupinyInput!
  ): UpdateSkupinyPayload

  """Updates a single `Tenant` using a unique key and a patch."""
  updateTenant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTenantInput!
  ): UpdateTenantPayload

  """Updates a single `TenantAdministrator` using a unique key and a patch."""
  updateTenantAdministrator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTenantAdministratorInput!
  ): UpdateTenantAdministratorPayload

  """Updates a single `TenantMembership` using a unique key and a patch."""
  updateTenantMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTenantMembershipInput!
  ): UpdateTenantMembershipPayload

  """Updates a single `TenantTrainer` using a unique key and a patch."""
  updateTenantTrainer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTenantTrainerInput!
  ): UpdateTenantTrainerPayload

  """Updates a single `Upozorneni` using a unique key and a patch."""
  updateUpozorneni(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUpozorneniInput!
  ): UpdateUpozorneniPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

enum PaymentStatus {
  PAID
  TENTATIVE
  UNPAID
}

"""A connection to a list of `Person` values."""
type PeopleConnection {
  """
  A list of edges which contains the `Person` and cursor to aid in pagination.
  """
  edges: [PeopleEdge!]!

  """A list of `Person` objects."""
  nodes: [Person!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Person` you could get from the connection."""
  totalCount: Int!
}

"""A `Person` edge in the connection."""
type PeopleEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Person` at the end of the edge."""
  node: Person!
}

"""Methods to use when ordering `Person`."""
enum PeopleOrderBy {
  BIO_ASC
  BIO_DESC
  BIRTH_DATE_ASC
  BIRTH_DATE_DESC
  COHORT_MEMBERSHIPS_BY_PERSON_ID__COUNT_ASC
  COHORT_MEMBERSHIPS_BY_PERSON_ID__COUNT_DESC
  COUPLES_BY_MAN_ID__COUNT_ASC
  COUPLES_BY_MAN_ID__COUNT_DESC
  COUPLES_BY_WOMAN_ID__COUNT_ASC
  COUPLES_BY_WOMAN_ID__COUNT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CSTS_ID_ASC
  CSTS_ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  EVENT_ATTENDANCES_BY_PERSON_ID__COUNT_ASC
  EVENT_ATTENDANCES_BY_PERSON_ID__COUNT_DESC
  EVENT_INSTANCE_TRAINERS_BY_PERSON_ID__COUNT_ASC
  EVENT_INSTANCE_TRAINERS_BY_PERSON_ID__COUNT_DESC
  EVENT_REGISTRATIONS_BY_PERSON_ID__COUNT_ASC
  EVENT_REGISTRATIONS_BY_PERSON_ID__COUNT_DESC
  EVENT_TRAINERS_BY_PERSON_ID__COUNT_ASC
  EVENT_TRAINERS_BY_PERSON_ID__COUNT_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  GENDER_ASC
  GENDER_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  LEGACY_USER_ID_ASC
  LEGACY_USER_ID_DESC
  MIDDLE_NAME_ASC
  MIDDLE_NAME_DESC
  NATIONALITY_ASC
  NATIONALITY_DESC
  NATIONAL_ID_NUMBER_ASC
  NATIONAL_ID_NUMBER_DESC
  NATURAL
  PERSON_ADDRESSES_BY_PERSON_ID__COUNT_ASC
  PERSON_ADDRESSES_BY_PERSON_ID__COUNT_DESC
  PHONE_ASC
  PHONE_DESC
  PREFIX_TITLE_ASC
  PREFIX_TITLE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SCOREBOARDS_BY_PERSON_ID__COUNT_ASC
  SCOREBOARDS_BY_PERSON_ID__COUNT_DESC
  SUFFIX_TITLE_ASC
  SUFFIX_TITLE_DESC
  TAX_IDENTIFICATION_NUMBER_ASC
  TAX_IDENTIFICATION_NUMBER_DESC
  TENANT_ADMINISTRATORS_BY_PERSON_ID__COUNT_ASC
  TENANT_ADMINISTRATORS_BY_PERSON_ID__COUNT_DESC
  TENANT_MEMBERSHIPS_BY_PERSON_ID__COUNT_ASC
  TENANT_MEMBERSHIPS_BY_PERSON_ID__COUNT_DESC
  TENANT_TRAINERS_BY_PERSON_ID__COUNT_ASC
  TENANT_TRAINERS_BY_PERSON_ID__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_PROXIES_BY_PERSON_ID__COUNT_ASC
  USER_PROXIES_BY_PERSON_ID__COUNT_DESC
  WDSF_ID_ASC
  WDSF_ID_DESC
}

type Person {
  """Reads and enables pagination through a set of `Couple`."""
  activeCouplesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Couple!]
  bio: String!
  birthDate: Date
  cohortIds: [BigInt]

  """Reads and enables pagination through a set of `CohortMembership`."""
  cohortMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CohortMembership`."""
    orderBy: [CohortMembershipsOrderBy!]
  ): [CohortMembership!]!
  coupleIds: [BigInt]

  """Reads and enables pagination through a set of `Couple`."""
  couplesByManId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CoupleCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Couple`."""
    orderBy: [CouplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CouplesConnection!

  """Reads and enables pagination through a set of `Couple`."""
  couplesByWomanId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CoupleCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Couple`."""
    orderBy: [CouplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CouplesConnection!

  """Reads and enables pagination through a set of `Couple`."""
  couplesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Couple!]
  createdAt: Datetime!
  cstsId: String
  email: String

  """Reads and enables pagination through a set of `EventAttendance`."""
  eventAttendancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventAttendanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventAttendance`."""
    orderBy: [EventAttendancesOrderBy!]
  ): [EventAttendance!]!

  """Reads and enables pagination through a set of `EventInstanceTrainer`."""
  eventInstanceTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstanceTrainer`."""
    orderBy: [EventInstanceTrainersOrderBy!]
  ): [EventInstanceTrainer!]!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]!

  """Reads and enables pagination through a set of `EventTrainer`."""
  eventTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTrainer`."""
    orderBy: [EventTrainersOrderBy!]
  ): [EventTrainer!]!
  firstName: String!
  gender: GenderType!
  hasUser: Boolean
  id: BigInt!
  isAdmin: Boolean
  isTrainer: Boolean
  lastName: String!
  legacyUserId: BigInt
  middleName: String
  name: String
  nationalIdNumber: String
  nationality: String!

  """Reads and enables pagination through a set of `PersonAddress`."""
  personAddressesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonAddressCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PersonAddress`."""
    orderBy: [PersonAddressesOrderBy!]
  ): [PersonAddress!]!
  phone: String
  prefixTitle: String!
  primaryAddress: PersonAddress

  """Reads and enables pagination through a set of `Scoreboard`."""
  scoreboardsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreboardCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Scoreboard`."""
    orderBy: [ScoreboardsOrderBy!]
  ): [Scoreboard!]!
  suffixTitle: String!
  taxIdentificationNumber: String

  """Reads and enables pagination through a set of `TenantAdministrator`."""
  tenantAdministratorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantAdministratorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantAdministrator`."""
    orderBy: [TenantAdministratorsOrderBy!]
  ): [TenantAdministrator!]!
  tenantIds: [BigInt]

  """Reads and enables pagination through a set of `TenantMembership`."""
  tenantMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantMembership`."""
    orderBy: [TenantMembershipsOrderBy!]
  ): [TenantMembership!]!

  """Reads and enables pagination through a set of `TenantTrainer`."""
  tenantTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantTrainer`."""
    orderBy: [TenantTrainersOrderBy!]
  ): [TenantTrainer!]!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserProxy`."""
  userProxiesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserProxyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserProxy`."""
    orderBy: [UserProxiesOrderBy!]
  ): [UserProxy!]!
  wdsfId: String
}

type PersonAddress {
  address: AddressDomain
  createdAt: Datetime!
  isPrimary: Boolean

  """Reads a single `Person` that is related to this `PersonAddress`."""
  person: Person
  personId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `PersonAddress` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PersonAddressCondition {
  """Checks for equality with the object’s `address` field."""
  address: AddressDomainInput

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""Methods to use when ordering `PersonAddress`."""
enum PersonAddressesOrderBy {
  ADDRESS_ASC
  ADDRESS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  NATURAL
  PERSON_BY_PERSON_ID__BIO_ASC
  PERSON_BY_PERSON_ID__BIO_DESC
  PERSON_BY_PERSON_ID__BIRTH_DATE_ASC
  PERSON_BY_PERSON_ID__BIRTH_DATE_DESC
  PERSON_BY_PERSON_ID__CREATED_AT_ASC
  PERSON_BY_PERSON_ID__CREATED_AT_DESC
  PERSON_BY_PERSON_ID__CSTS_ID_ASC
  PERSON_BY_PERSON_ID__CSTS_ID_DESC
  PERSON_BY_PERSON_ID__EMAIL_ASC
  PERSON_BY_PERSON_ID__EMAIL_DESC
  PERSON_BY_PERSON_ID__FIRST_NAME_ASC
  PERSON_BY_PERSON_ID__FIRST_NAME_DESC
  PERSON_BY_PERSON_ID__GENDER_ASC
  PERSON_BY_PERSON_ID__GENDER_DESC
  PERSON_BY_PERSON_ID__ID_ASC
  PERSON_BY_PERSON_ID__ID_DESC
  PERSON_BY_PERSON_ID__LAST_NAME_ASC
  PERSON_BY_PERSON_ID__LAST_NAME_DESC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_ASC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_DESC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_ASC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_DESC
  PERSON_BY_PERSON_ID__NATIONALITY_ASC
  PERSON_BY_PERSON_ID__NATIONALITY_DESC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_PERSON_ID__PHONE_ASC
  PERSON_BY_PERSON_ID__PHONE_DESC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_PERSON_ID__UPDATED_AT_ASC
  PERSON_BY_PERSON_ID__UPDATED_AT_DESC
  PERSON_BY_PERSON_ID__WDSF_ID_ASC
  PERSON_BY_PERSON_ID__WDSF_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `Person` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PersonCondition {
  """Checks for equality with the object’s `bio` field."""
  bio: String

  """Checks for equality with the object’s `birthDate` field."""
  birthDate: Date

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `cstsId` field."""
  cstsId: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `gender` field."""
  gender: GenderType

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `legacyUserId` field."""
  legacyUserId: BigInt

  """Checks for equality with the object’s `middleName` field."""
  middleName: String

  """Checks for equality with the object’s `nationalIdNumber` field."""
  nationalIdNumber: String

  """Checks for equality with the object’s `nationality` field."""
  nationality: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `prefixTitle` field."""
  prefixTitle: String

  """Checks for equality with the object’s `suffixTitle` field."""
  suffixTitle: String

  """Checks for equality with the object’s `taxIdentificationNumber` field."""
  taxIdentificationNumber: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `wdsfId` field."""
  wdsfId: String
}

"""An input for mutations affecting `Person`"""
input PersonInput {
  bio: String
  birthDate: Date
  createdAt: Datetime
  cstsId: String
  email: String
  firstName: String!
  gender: GenderType!
  lastName: String!
  legacyUserId: BigInt
  middleName: String
  nationalIdNumber: String
  nationality: String!
  phone: String
  prefixTitle: String
  suffixTitle: String
  taxIdentificationNumber: String
  updatedAt: Datetime
  wdsfId: String
}

"""
Represents an update to a `Person`. Fields that are set will be updated.
"""
input PersonPatch {
  bio: String
  birthDate: Date
  createdAt: Datetime
  cstsId: String
  email: String
  firstName: String
  gender: GenderType
  lastName: String
  legacyUserId: BigInt
  middleName: String
  nationalIdNumber: String
  nationality: String
  phone: String
  prefixTitle: String
  suffixTitle: String
  taxIdentificationNumber: String
  updatedAt: Datetime
  wdsfId: String
}

"""A connection to a list of `PlatbyCategory` values."""
type PlatbyCategoriesConnection {
  """
  A list of edges which contains the `PlatbyCategory` and cursor to aid in pagination.
  """
  edges: [PlatbyCategoriesEdge!]!

  """A list of `PlatbyCategory` objects."""
  nodes: [PlatbyCategory!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PlatbyCategory` you could get from the connection."""
  totalCount: Int!
}

"""A `PlatbyCategory` edge in the connection."""
type PlatbyCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlatbyCategory` at the end of the edge."""
  node: PlatbyCategory!
}

"""Methods to use when ordering `PlatbyCategory`."""
enum PlatbyCategoriesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PC_AMOUNT_ASC
  PC_AMOUNT_DESC
  PC_ARCHIVE_ASC
  PC_ARCHIVE_DESC
  PC_DATE_DUE_ASC
  PC_DATE_DUE_DESC
  PC_ID_ASC
  PC_ID_DESC
  PC_NAME_ASC
  PC_NAME_DESC
  PC_SYMBOL_ASC
  PC_SYMBOL_DESC
  PC_USE_BASE_ASC
  PC_USE_BASE_DESC
  PC_USE_PREFIX_ASC
  PC_USE_PREFIX_DESC
  PC_VALID_FROM_ASC
  PC_VALID_FROM_DESC
  PC_VALID_TO_ASC
  PC_VALID_TO_DESC
  PC_VISIBLE_ASC
  PC_VISIBLE_DESC
  PLATBY_ITEMS_BY_PI_ID_CATEGORY__COUNT_ASC
  PLATBY_ITEMS_BY_PI_ID_CATEGORY__COUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
}

type PlatbyCategory {
  id: BigInt
  pcAmount: BigFloat!
  pcArchive: Boolean!
  pcDateDue: Date!
  pcId: BigInt!
  pcName: String!
  pcSymbol: BigInt!
  pcUseBase: Boolean!
  pcUsePrefix: Boolean!
  pcValidFrom: Date!
  pcValidTo: Date!
  pcVisible: Boolean!

  """Reads and enables pagination through a set of `PlatbyItem`."""
  platbyItemsByPiIdCategory(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsConnection!

  """Reads a single `Tenant` that is related to this `PlatbyCategory`."""
  tenant: Tenant
  tenantId: BigInt!
}

"""
A condition to be used against `PlatbyCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PlatbyCategoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `pcAmount` field."""
  pcAmount: BigFloat

  """Checks for equality with the object’s `pcArchive` field."""
  pcArchive: Boolean

  """Checks for equality with the object’s `pcDateDue` field."""
  pcDateDue: Date

  """Checks for equality with the object’s `pcId` field."""
  pcId: BigInt

  """Checks for equality with the object’s `pcName` field."""
  pcName: String

  """Checks for equality with the object’s `pcSymbol` field."""
  pcSymbol: BigInt

  """Checks for equality with the object’s `pcUseBase` field."""
  pcUseBase: Boolean

  """Checks for equality with the object’s `pcUsePrefix` field."""
  pcUsePrefix: Boolean

  """Checks for equality with the object’s `pcValidFrom` field."""
  pcValidFrom: Date

  """Checks for equality with the object’s `pcValidTo` field."""
  pcValidTo: Date

  """Checks for equality with the object’s `pcVisible` field."""
  pcVisible: Boolean

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

type PlatbyItem {
  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrationsByPaymentIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]!
  id: BigInt
  piAmount: BigFloat!
  piDate: Date!
  piId: BigInt!
  piIdCategory: BigInt!
  piIdRaw: BigInt
  piIdUser: BigInt
  piPrefix: Int!

  """Reads a single `PlatbyCategory` that is related to this `PlatbyItem`."""
  platbyCategoryByPiIdCategory: PlatbyCategory
  status: PaymentStatus!

  """Reads a single `Tenant` that is related to this `PlatbyItem`."""
  tenant: Tenant
  tenantId: BigInt!

  """Reads a single `User` that is related to this `PlatbyItem`."""
  userByPiIdUser: User
}

"""
A condition to be used against `PlatbyItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PlatbyItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `piAmount` field."""
  piAmount: BigFloat

  """Checks for equality with the object’s `piDate` field."""
  piDate: Date

  """Checks for equality with the object’s `piId` field."""
  piId: BigInt

  """Checks for equality with the object’s `piIdCategory` field."""
  piIdCategory: BigInt

  """Checks for equality with the object’s `piIdRaw` field."""
  piIdRaw: BigInt

  """Checks for equality with the object’s `piIdUser` field."""
  piIdUser: BigInt

  """Checks for equality with the object’s `piPrefix` field."""
  piPrefix: Int

  """Checks for equality with the object’s `status` field."""
  status: PaymentStatus

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

"""A connection to a list of `PlatbyItem` values."""
type PlatbyItemsConnection {
  """
  A list of edges which contains the `PlatbyItem` and cursor to aid in pagination.
  """
  edges: [PlatbyItemsEdge!]!

  """A list of `PlatbyItem` objects."""
  nodes: [PlatbyItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PlatbyItem` you could get from the connection."""
  totalCount: Int!
}

"""A `PlatbyItem` edge in the connection."""
type PlatbyItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlatbyItem` at the end of the edge."""
  node: PlatbyItem!
}

"""Methods to use when ordering `PlatbyItem`."""
enum PlatbyItemsOrderBy {
  EVENT_REGISTRATIONS_BY_PAYMENT_ID__COUNT_ASC
  EVENT_REGISTRATIONS_BY_PAYMENT_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PI_AMOUNT_ASC
  PI_AMOUNT_DESC
  PI_DATE_ASC
  PI_DATE_DESC
  PI_ID_ASC
  PI_ID_CATEGORY_ASC
  PI_ID_CATEGORY_DESC
  PI_ID_DESC
  PI_ID_RAW_ASC
  PI_ID_RAW_DESC
  PI_ID_USER_ASC
  PI_ID_USER_DESC
  PI_PREFIX_ASC
  PI_PREFIX_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__ID_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__ID_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_AMOUNT_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_AMOUNT_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_ARCHIVE_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_ARCHIVE_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_DATE_DUE_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_DATE_DUE_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_ID_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_ID_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_NAME_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_NAME_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_SYMBOL_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_SYMBOL_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_USE_BASE_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_USE_BASE_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_USE_PREFIX_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_USE_PREFIX_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_VALID_FROM_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_VALID_FROM_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_VALID_TO_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_VALID_TO_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_VISIBLE_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__PC_VISIBLE_DESC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__TENANT_ID_ASC
  PLATBY_CATEGORY_BY_PI_ID_CATEGORY__TENANT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_ASC
  STATUS_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  USER_BY_PI_ID_USER__ID_ASC
  USER_BY_PI_ID_USER__ID_DESC
  USER_BY_PI_ID_USER__TENANT_ID_ASC
  USER_BY_PI_ID_USER__TENANT_ID_DESC
  USER_BY_PI_ID_USER__U_CREATED_AT_ASC
  USER_BY_PI_ID_USER__U_CREATED_AT_DESC
  USER_BY_PI_ID_USER__U_EMAIL_ASC
  USER_BY_PI_ID_USER__U_EMAIL_DESC
  USER_BY_PI_ID_USER__U_ID_ASC
  USER_BY_PI_ID_USER__U_ID_DESC
  USER_BY_PI_ID_USER__U_JMENO_ASC
  USER_BY_PI_ID_USER__U_JMENO_DESC
  USER_BY_PI_ID_USER__U_LOGIN_ASC
  USER_BY_PI_ID_USER__U_LOGIN_DESC
  USER_BY_PI_ID_USER__U_NATIONALITY_ASC
  USER_BY_PI_ID_USER__U_NATIONALITY_DESC
  USER_BY_PI_ID_USER__U_PRIJMENI_ASC
  USER_BY_PI_ID_USER__U_PRIJMENI_DESC
  USER_BY_PI_ID_USER__U_TIMESTAMP_ASC
  USER_BY_PI_ID_USER__U_TIMESTAMP_DESC
}

type Price {
  amount: BigFloat
  currency: String
}

input PriceInput {
  amount: BigFloat
  currency: String
}

"""The root query type which gives access points into the data universe."""
type Query {
  """Reads and enables pagination through a set of `Aktuality`."""
  aktualities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AktualityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesConnection
  aktuality(atId: BigInt!): Aktuality

  """Reads and enables pagination through a set of `Upozorneni`."""
  archivedAnnouncements(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UpozornenisConnection
  attachment(objectName: String!): Attachment
  attachmentDirectories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): AttachmentDirectoriesConnection

  """Reads and enables pagination through a set of `Attachment`."""
  attachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection
  cohortGroup(id: BigInt!): CohortGroup

  """Reads and enables pagination through a set of `CohortGroup`."""
  cohortGroups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CohortGroup`."""
    orderBy: [CohortGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CohortGroupsConnection
  cohortMembership(id: BigInt!): CohortMembership

  """Reads a set of `CohortMembership`."""
  cohortMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CohortMembership`."""
    orderBy: [CohortMembershipsOrderBy!]
  ): [CohortMembership!]
  couple(id: BigInt!): Couple

  """Reads and enables pagination through a set of `Couple`."""
  couples(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CoupleCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Couple`."""
    orderBy: [CouplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CouplesConnection
  currentCoupleIdsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [BigInt]
  currentTenantId: BigInt
  currentUserId: BigInt

  """Reads a set of `Dokumenty`."""
  dokumentiesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DokumentyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Dokumenty`."""
    orderBy: [DokumentiesOrderBy!]
  ): [Dokumenty!]
  dokumenty(dId: BigInt!): Dokumenty
  event(id: BigInt!): Event
  eventAttendance(id: BigInt!): EventAttendance
  eventAttendanceByRegistrationIdAndInstanceIdAndPersonId(instanceId: BigInt!, personId: BigInt!, registrationId: BigInt!): EventAttendance

  """Reads a set of `EventAttendance`."""
  eventAttendancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventAttendanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventAttendance`."""
    orderBy: [EventAttendancesOrderBy!]
  ): [EventAttendance!]
  eventInstance(id: BigInt!): EventInstance
  eventInstanceTrainer(id: BigInt!): EventInstanceTrainer

  """Reads a set of `EventInstanceTrainer`."""
  eventInstanceTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstanceTrainer`."""
    orderBy: [EventInstanceTrainersOrderBy!]
  ): [EventInstanceTrainer!]

  """Reads and enables pagination through a set of `EventInstance`."""
  eventInstances(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventInstancesConnection

  """Reads and enables pagination through a set of `EventInstance`."""
  eventInstancesForRangeList(
    endRange: Datetime

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    onlyMine: Boolean
    startRange: Datetime
    type: EventType
  ): [EventInstance!]

  """Reads a set of `EventInstance`."""
  eventInstancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!]
  ): [EventInstance!]
  eventLessonDemand(id: BigInt!): EventLessonDemand
  eventLessonDemandByRegistrationIdAndTrainerId(registrationId: BigInt!, trainerId: BigInt!): EventLessonDemand

  """Reads a set of `EventLessonDemand`."""
  eventLessonDemandsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventLessonDemandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventLessonDemand`."""
    orderBy: [EventLessonDemandsOrderBy!]
  ): [EventLessonDemand!]
  eventRegistration(id: BigInt!): EventRegistration
  eventRegistrationByEventIdAndPersonIdAndCoupleId(coupleId: BigInt!, eventId: BigInt!, personId: BigInt!): EventRegistration

  """Reads a set of `EventRegistration`."""
  eventRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]
  eventTargetCohort(id: BigInt!): EventTargetCohort

  """Reads a set of `EventTargetCohort`."""
  eventTargetCohortsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTargetCohortCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTargetCohort`."""
    orderBy: [EventTargetCohortsOrderBy!]
  ): [EventTargetCohort!]
  eventTrainer(id: BigInt!): EventTrainer

  """Reads a set of `EventTrainer`."""
  eventTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTrainer`."""
    orderBy: [EventTrainersOrderBy!]
  ): [EventTrainer!]

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection

  """Reads and enables pagination through a set of `Person`."""
  filteredPeopleList(
    """Only read the first `n` values of the set."""
    first: Int
    inCohort: BigInt
    inTenants: [BigInt]
    isAdmin: Boolean
    isTrainer: Boolean

    """Skip the first `n` values."""
    offset: Int
  ): [Person!]
  formResponse(id: BigInt!): FormResponse

  """Reads and enables pagination through a set of `FormResponse`."""
  formResponses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResponseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResponse`."""
    orderBy: [FormResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResponsesConnection
  galerieDir(gdId: BigInt!): GalerieDir

  """Reads and enables pagination through a set of `GalerieDir`."""
  galerieDirs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieDirCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieDir`."""
    orderBy: [GalerieDirsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieDirsConnection
  galerieFoto(gfId: BigInt!): GalerieFoto

  """Reads and enables pagination through a set of `GalerieFoto`."""
  galerieFotos(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieFotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosConnection
  getCurrentTenant: Tenant
  getCurrentUser: User
  invitationInfo(token: UUID): String
  location(id: BigInt!): Location
  locationAttachment(locationId: BigInt!, objectName: String!): LocationAttachment

  """Reads and enables pagination through a set of `LocationAttachment`."""
  locationAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LocationAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LocationAttachment`."""
    orderBy: [LocationAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationAttachmentsConnection

  """Reads and enables pagination through a set of `Location`."""
  locations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LocationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationsConnection

  """Reads and enables pagination through a set of `Upozorneni`."""
  myAnnouncements(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    archive: Boolean

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UpozornenisConnection

  """Reads and enables pagination through a set of `Person`."""
  people(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleConnection
  person(id: BigInt!): Person

  """Reads a set of `PersonAddress`."""
  personAddressesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonAddressCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PersonAddress`."""
    orderBy: [PersonAddressesOrderBy!]
  ): [PersonAddress!]

  """Reads and enables pagination through a set of `PlatbyCategory`."""
  platbyCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyCategoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyCategory`."""
    orderBy: [PlatbyCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoriesConnection
  platbyCategory(pcId: BigInt!): PlatbyCategory
  platbyItem(piId: BigInt!): PlatbyItem

  """Reads and enables pagination through a set of `PlatbyItem`."""
  platbyItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  room(id: BigInt!): Room
  roomAttachment(objectName: String!, roomId: BigInt!): RoomAttachment

  """Reads and enables pagination through a set of `RoomAttachment`."""
  roomAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomAttachment`."""
    orderBy: [RoomAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomAttachmentsConnection

  """Reads and enables pagination through a set of `Room`."""
  rooms(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomsConnection

  """Reads a set of `Scoreboard`."""
  scoreboardsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreboardCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Scoreboard`."""
    orderBy: [ScoreboardsOrderBy!]
  ): [Scoreboard!]

  """Reads and enables pagination through a set of `Skupiny`."""
  skupinies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Skupiny`."""
    orderBy: [SkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SkupiniesConnection
  skupiny(sId: BigInt!): Skupiny

  """Reads and enables pagination through a set of `Upozorneni`."""
  stickyAnnouncements(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UpozornenisConnection
  tenant(id: BigInt!): Tenant
  tenantAdministrator(id: BigInt!): TenantAdministrator

  """Reads a set of `TenantAdministrator`."""
  tenantAdministratorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantAdministratorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantAdministrator`."""
    orderBy: [TenantAdministratorsOrderBy!]
  ): [TenantAdministrator!]
  tenantAttachment(objectName: String!, tenantId: BigInt!): TenantAttachment

  """Reads and enables pagination through a set of `TenantAttachment`."""
  tenantAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TenantAttachment`."""
    orderBy: [TenantAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TenantAttachmentsConnection
  tenantLocation(id: BigInt!): TenantLocation

  """Reads a set of `TenantLocation`."""
  tenantLocationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantLocationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantLocation`."""
    orderBy: [TenantLocationsOrderBy!]
  ): [TenantLocation!]
  tenantMembership(id: BigInt!): TenantMembership

  """Reads a set of `TenantMembership`."""
  tenantMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantMembership`."""
    orderBy: [TenantMembershipsOrderBy!]
  ): [TenantMembership!]
  tenantTrainer(id: BigInt!): TenantTrainer

  """Reads a set of `TenantTrainer`."""
  tenantTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantTrainer`."""
    orderBy: [TenantTrainersOrderBy!]
  ): [TenantTrainer!]

  """Reads a set of `Tenant`."""
  tenantsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Tenant`."""
    orderBy: [TenantsOrderBy!]
  ): [Tenant!]
  upozorneni(upId: BigInt!): Upozorneni

  """Reads and enables pagination through a set of `UpozorneniSkupiny`."""
  upozorneniSkupinies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniSkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesConnection
  upozorneniSkupiny(upsId: BigInt!): UpozorneniSkupiny

  """Reads and enables pagination through a set of `Upozorneni`."""
  upozornenis(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisConnection
  user(uId: BigInt!): User

  """Reads a set of `UserProxy`."""
  userProxiesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserProxyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserProxy`."""
    orderBy: [UserProxiesOrderBy!]
  ): [UserProxy!]
  userProxy(id: BigInt!): UserProxy

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

"""All input for the `registerToEvent` mutation."""
input RegisterToEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lessons: [EventLessonDemandPatch]!
  registration: EventRegistrationInput!
}

"""The output of our `registerToEvent` mutation."""
type RegisterToEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Couple` that is related to this `EventRegistration`."""
  couple: Couple

  """Reads a single `Event` that is related to this `EventRegistration`."""
  event: Event

  """
  Reads a single `PlatbyItem` that is related to this `EventRegistration`.
  """
  payment: PlatbyItem

  """Reads a single `Person` that is related to this `EventRegistration`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  registration: EventRegistration

  """
  Reads a single `EventTargetCohort` that is related to this `EventRegistration`.
  """
  targetCohort: EventTargetCohort

  """Reads a single `Tenant` that is related to this `EventRegistration`."""
  tenant: Tenant
}

"""All input for the `registerUsingInvitation` mutation."""
input RegisterUsingInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  login: String!
  passwd: String!
  token: UUID!
}

"""The output of our `registerUsingInvitation` mutation."""
type RegisterUsingInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: RegisterUsingInvitationRecord
}

"""The return type of our `registerUsingInvitation` mutation."""
type RegisterUsingInvitationRecord {
  jwt: JwtToken
  sess: Session
  usr: User
}

enum RegistrationTime {
  POST
  PRE
  REGULAR
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  login: String!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Room {
  description: JSON!
  id: BigInt!
  location: BigInt

  """Reads a single `Location` that is related to this `Room`."""
  locationByLocation: Location
  name: String!

  """Reads and enables pagination through a set of `RoomAttachment`."""
  roomAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomAttachment`."""
    orderBy: [RoomAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomAttachmentsConnection!
}

type RoomAttachment {
  """Reads a single `Attachment` that is related to this `RoomAttachment`."""
  attachmentByObjectName: Attachment
  objectName: String!

  """Reads a single `Room` that is related to this `RoomAttachment`."""
  room: Room
  roomId: BigInt!
}

"""
A condition to be used against `RoomAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RoomAttachmentCondition {
  """Checks for equality with the object’s `objectName` field."""
  objectName: String

  """Checks for equality with the object’s `roomId` field."""
  roomId: BigInt
}

"""A connection to a list of `RoomAttachment` values."""
type RoomAttachmentsConnection {
  """
  A list of edges which contains the `RoomAttachment` and cursor to aid in pagination.
  """
  edges: [RoomAttachmentsEdge!]!

  """A list of `RoomAttachment` objects."""
  nodes: [RoomAttachment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RoomAttachment` you could get from the connection."""
  totalCount: Int!
}

"""A `RoomAttachment` edge in the connection."""
type RoomAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoomAttachment` at the end of the edge."""
  node: RoomAttachment!
}

"""Methods to use when ordering `RoomAttachment`."""
enum RoomAttachmentsOrderBy {
  ATTACHMENT_BY_OBJECT_NAME__HEIGHT_ASC
  ATTACHMENT_BY_OBJECT_NAME__HEIGHT_DESC
  ATTACHMENT_BY_OBJECT_NAME__OBJECT_NAME_ASC
  ATTACHMENT_BY_OBJECT_NAME__OBJECT_NAME_DESC
  ATTACHMENT_BY_OBJECT_NAME__PREVIEW_OBJECT_NAME_ASC
  ATTACHMENT_BY_OBJECT_NAME__PREVIEW_OBJECT_NAME_DESC
  ATTACHMENT_BY_OBJECT_NAME__THUMBHASH_ASC
  ATTACHMENT_BY_OBJECT_NAME__THUMBHASH_DESC
  ATTACHMENT_BY_OBJECT_NAME__UPLOADED_AT_ASC
  ATTACHMENT_BY_OBJECT_NAME__UPLOADED_AT_DESC
  ATTACHMENT_BY_OBJECT_NAME__UPLOADED_BY_ASC
  ATTACHMENT_BY_OBJECT_NAME__UPLOADED_BY_DESC
  ATTACHMENT_BY_OBJECT_NAME__WIDTH_ASC
  ATTACHMENT_BY_OBJECT_NAME__WIDTH_DESC
  NATURAL
  OBJECT_NAME_ASC
  OBJECT_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOM_BY_ROOM_ID__DESCRIPTION_ASC
  ROOM_BY_ROOM_ID__DESCRIPTION_DESC
  ROOM_BY_ROOM_ID__ID_ASC
  ROOM_BY_ROOM_ID__ID_DESC
  ROOM_BY_ROOM_ID__LOCATION_ASC
  ROOM_BY_ROOM_ID__LOCATION_DESC
  ROOM_BY_ROOM_ID__NAME_ASC
  ROOM_BY_ROOM_ID__NAME_DESC
  ROOM_ID_ASC
  ROOM_ID_DESC
}

"""
A condition to be used against `Room` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RoomCondition {
  """Checks for equality with the object’s `description` field."""
  description: JSON

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `location` field."""
  location: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Room`"""
input RoomInput {
  description: JSON!
  id: BigInt
  location: BigInt
  name: String!
}

"""Represents an update to a `Room`. Fields that are set will be updated."""
input RoomPatch {
  description: JSON
  id: BigInt
  location: BigInt
  name: String
}

"""A connection to a list of `Room` values."""
type RoomsConnection {
  """
  A list of edges which contains the `Room` and cursor to aid in pagination.
  """
  edges: [RoomsEdge!]!

  """A list of `Room` objects."""
  nodes: [Room!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Room` you could get from the connection."""
  totalCount: Int!
}

"""A `Room` edge in the connection."""
type RoomsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Room` at the end of the edge."""
  node: Room!
}

"""Methods to use when ordering `Room`."""
enum RoomsOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  LOCATION_ASC
  LOCATION_BY_LOCATION__ADDRESS_ASC
  LOCATION_BY_LOCATION__ADDRESS_DESC
  LOCATION_BY_LOCATION__DESCRIPTION_ASC
  LOCATION_BY_LOCATION__DESCRIPTION_DESC
  LOCATION_BY_LOCATION__ID_ASC
  LOCATION_BY_LOCATION__ID_DESC
  LOCATION_BY_LOCATION__NAME_ASC
  LOCATION_BY_LOCATION__NAME_DESC
  LOCATION_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOM_ATTACHMENTS_BY_ROOM_ID__COUNT_ASC
  ROOM_ATTACHMENTS_BY_ROOM_ID__COUNT_DESC
}

type Scoreboard {
  groupTotalScore: BigInt
  lessonTotalScore: BigInt

  """Reads a single `Person` that is related to this `Scoreboard`."""
  person: Person
  personId: BigInt
  ranking: BigInt
  totalScore: BigInt
}

"""
A condition to be used against `Scoreboard` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ScoreboardCondition {
  """Checks for equality with the object’s `groupTotalScore` field."""
  groupTotalScore: BigInt

  """Checks for equality with the object’s `lessonTotalScore` field."""
  lessonTotalScore: BigInt

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `ranking` field."""
  ranking: BigInt

  """Checks for equality with the object’s `totalScore` field."""
  totalScore: BigInt
}

"""Methods to use when ordering `Scoreboard`."""
enum ScoreboardsOrderBy {
  GROUP_TOTAL_SCORE_ASC
  GROUP_TOTAL_SCORE_DESC
  LESSON_TOTAL_SCORE_ASC
  LESSON_TOTAL_SCORE_DESC
  NATURAL
  PERSON_BY_PERSON_ID__BIO_ASC
  PERSON_BY_PERSON_ID__BIO_DESC
  PERSON_BY_PERSON_ID__BIRTH_DATE_ASC
  PERSON_BY_PERSON_ID__BIRTH_DATE_DESC
  PERSON_BY_PERSON_ID__CREATED_AT_ASC
  PERSON_BY_PERSON_ID__CREATED_AT_DESC
  PERSON_BY_PERSON_ID__CSTS_ID_ASC
  PERSON_BY_PERSON_ID__CSTS_ID_DESC
  PERSON_BY_PERSON_ID__EMAIL_ASC
  PERSON_BY_PERSON_ID__EMAIL_DESC
  PERSON_BY_PERSON_ID__FIRST_NAME_ASC
  PERSON_BY_PERSON_ID__FIRST_NAME_DESC
  PERSON_BY_PERSON_ID__GENDER_ASC
  PERSON_BY_PERSON_ID__GENDER_DESC
  PERSON_BY_PERSON_ID__ID_ASC
  PERSON_BY_PERSON_ID__ID_DESC
  PERSON_BY_PERSON_ID__LAST_NAME_ASC
  PERSON_BY_PERSON_ID__LAST_NAME_DESC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_ASC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_DESC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_ASC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_DESC
  PERSON_BY_PERSON_ID__NATIONALITY_ASC
  PERSON_BY_PERSON_ID__NATIONALITY_DESC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_PERSON_ID__PHONE_ASC
  PERSON_BY_PERSON_ID__PHONE_DESC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_PERSON_ID__UPDATED_AT_ASC
  PERSON_BY_PERSON_ID__UPDATED_AT_DESC
  PERSON_BY_PERSON_ID__WDSF_ID_ASC
  PERSON_BY_PERSON_ID__WDSF_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  RANKING_ASC
  RANKING_DESC
  TOTAL_SCORE_ASC
  TOTAL_SCORE_DESC
}

type Session {
  ssId: String!
  ssLifetime: BigInt!
  ssUpdatedAt: Datetime!
  ssUser: BigInt

  """Reads a single `User` that is related to this `Session`."""
  userBySsUser: User
}

"""All input for the `setLessonDemand` mutation."""
input SetLessonDemandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lessonCount: Int!
  registrationId: BigInt!
  trainerId: BigInt!
}

"""The output of our `setLessonDemand` mutation."""
type SetLessonDemandPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  eventLessonDemand: EventLessonDemand

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EventRegistration` that is related to this `EventLessonDemand`.
  """
  registration: EventRegistration

  """Reads a single `Tenant` that is related to this `EventLessonDemand`."""
  tenant: Tenant

  """
  Reads a single `EventTrainer` that is related to this `EventLessonDemand`.
  """
  trainer: EventTrainer
}

"""A connection to a list of `Skupiny` values."""
type SkupiniesConnection {
  """
  A list of edges which contains the `Skupiny` and cursor to aid in pagination.
  """
  edges: [SkupiniesEdge!]!

  """A list of `Skupiny` objects."""
  nodes: [Skupiny!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Skupiny` you could get from the connection."""
  totalCount: Int!
}

"""A `Skupiny` edge in the connection."""
type SkupiniesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Skupiny` at the end of the edge."""
  node: Skupiny!
}

"""Methods to use when ordering `Skupiny`."""
enum SkupiniesOrderBy {
  COHORT_GROUP_ASC
  COHORT_GROUP_BY_COHORT_GROUP__DESCRIPTION_ASC
  COHORT_GROUP_BY_COHORT_GROUP__DESCRIPTION_DESC
  COHORT_GROUP_BY_COHORT_GROUP__ID_ASC
  COHORT_GROUP_BY_COHORT_GROUP__ID_DESC
  COHORT_GROUP_BY_COHORT_GROUP__IS_PUBLIC_ASC
  COHORT_GROUP_BY_COHORT_GROUP__IS_PUBLIC_DESC
  COHORT_GROUP_BY_COHORT_GROUP__NAME_ASC
  COHORT_GROUP_BY_COHORT_GROUP__NAME_DESC
  COHORT_GROUP_BY_COHORT_GROUP__ORDERING_ASC
  COHORT_GROUP_BY_COHORT_GROUP__ORDERING_DESC
  COHORT_GROUP_BY_COHORT_GROUP__TENANT_ID_ASC
  COHORT_GROUP_BY_COHORT_GROUP__TENANT_ID_DESC
  COHORT_GROUP_DESC
  COHORT_MEMBERSHIPS_BY_COHORT_ID__COUNT_ASC
  COHORT_MEMBERSHIPS_BY_COHORT_ID__COUNT_DESC
  EVENT_TARGET_COHORTS_BY_COHORT_ID__COUNT_ASC
  EVENT_TARGET_COHORTS_BY_COHORT_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  ORDERING_ASC
  ORDERING_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  S_COLOR_RGB_ASC
  S_COLOR_RGB_DESC
  S_DESCRIPTION_ASC
  S_DESCRIPTION_DESC
  S_ID_ASC
  S_ID_DESC
  S_LOCATION_ASC
  S_LOCATION_DESC
  S_NAME_ASC
  S_NAME_DESC
  S_VISIBLE_ASC
  S_VISIBLE_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPOZORNENI_SKUPINIES_BY_UPS_ID_SKUPINA__COUNT_ASC
  UPOZORNENI_SKUPINIES_BY_UPS_ID_SKUPINA__COUNT_DESC
}

type Skupiny {
  cohortGroup: BigInt

  """Reads a single `CohortGroup` that is related to this `Skupiny`."""
  cohortGroupByCohortGroup: CohortGroup

  """Reads and enables pagination through a set of `CohortMembership`."""
  cohortMembershipsByCohortIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CohortMembership`."""
    orderBy: [CohortMembershipsOrderBy!]
  ): [CohortMembership!]!

  """Reads and enables pagination through a set of `EventTargetCohort`."""
  eventTargetCohortsByCohortIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTargetCohortCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTargetCohort`."""
    orderBy: [EventTargetCohortsOrderBy!]
  ): [EventTargetCohort!]!
  id: BigInt
  ordering: Int!
  sColorRgb: String!
  sDescription: String!
  sId: BigInt!
  sLocation: String!
  sName: String!
  sVisible: Boolean!

  """Reads a single `Tenant` that is related to this `Skupiny`."""
  tenant: Tenant
  tenantId: BigInt!

  """Reads and enables pagination through a set of `UpozorneniSkupiny`."""
  upozorneniSkupiniesByUpsIdSkupina(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniSkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesConnection!
}

"""
A condition to be used against `Skupiny` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SkupinyCondition {
  """Checks for equality with the object’s `cohortGroup` field."""
  cohortGroup: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `ordering` field."""
  ordering: Int

  """Checks for equality with the object’s `sColorRgb` field."""
  sColorRgb: String

  """Checks for equality with the object’s `sDescription` field."""
  sDescription: String

  """Checks for equality with the object’s `sId` field."""
  sId: BigInt

  """Checks for equality with the object’s `sLocation` field."""
  sLocation: String

  """Checks for equality with the object’s `sName` field."""
  sName: String

  """Checks for equality with the object’s `sVisible` field."""
  sVisible: Boolean

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

"""An input for mutations affecting `Skupiny`"""
input SkupinyInput {
  cohortGroup: BigInt
  id: BigInt
  ordering: Int
  sColorRgb: String!
  sDescription: String!
  sId: BigInt
  sLocation: String
  sName: String!
  sVisible: Boolean
  tenantId: BigInt
}

"""
Represents an update to a `Skupiny`. Fields that are set will be updated.
"""
input SkupinyPatch {
  cohortGroup: BigInt
  id: BigInt
  ordering: Int
  sColorRgb: String
  sDescription: String
  sId: BigInt
  sLocation: String
  sName: String
  sVisible: Boolean
  tenantId: BigInt
}

"""All input for the `submitForm` mutation."""
input SubmitFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  data: JSON!
  type: String!
  url: String!
}

"""The output of our `submitForm` mutation."""
type SubmitFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Tenant {
  address: AddressDomain

  """Reads and enables pagination through a set of `Aktuality`."""
  aktualities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AktualityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesConnection!

  """Reads and enables pagination through a set of `CohortGroup`."""
  cohortGroups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CohortGroup`."""
    orderBy: [CohortGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CohortGroupsConnection!

  """Reads and enables pagination through a set of `CohortMembership`."""
  cohortMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CohortMembership`."""
    orderBy: [CohortMembershipsOrderBy!]
  ): [CohortMembership!]!
  czDic: String!
  czIco: String!
  description: String!

  """Reads and enables pagination through a set of `Dokumenty`."""
  dokumentiesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DokumentyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Dokumenty`."""
    orderBy: [DokumentiesOrderBy!]
  ): [Dokumenty!]!

  """Reads and enables pagination through a set of `EventAttendance`."""
  eventAttendancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventAttendanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventAttendance`."""
    orderBy: [EventAttendancesOrderBy!]
  ): [EventAttendance!]!

  """Reads and enables pagination through a set of `EventInstanceTrainer`."""
  eventInstanceTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstanceTrainer`."""
    orderBy: [EventInstanceTrainersOrderBy!]
  ): [EventInstanceTrainer!]!

  """Reads and enables pagination through a set of `EventInstance`."""
  eventInstances(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventInstancesConnection!

  """Reads and enables pagination through a set of `EventInstance`."""
  eventInstancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!]
  ): [EventInstance!]!

  """Reads and enables pagination through a set of `EventLessonDemand`."""
  eventLessonDemandsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventLessonDemandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventLessonDemand`."""
    orderBy: [EventLessonDemandsOrderBy!]
  ): [EventLessonDemand!]!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]!

  """Reads and enables pagination through a set of `EventTargetCohort`."""
  eventTargetCohortsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTargetCohortCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTargetCohort`."""
    orderBy: [EventTargetCohortsOrderBy!]
  ): [EventTargetCohort!]!

  """Reads and enables pagination through a set of `EventTrainer`."""
  eventTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTrainer`."""
    orderBy: [EventTrainersOrderBy!]
  ): [EventTrainer!]!

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection!

  """Reads and enables pagination through a set of `FormResponse`."""
  formResponses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResponseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResponse`."""
    orderBy: [FormResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResponsesConnection!

  """Reads and enables pagination through a set of `GalerieDir`."""
  galerieDirs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieDirCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieDir`."""
    orderBy: [GalerieDirsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieDirsConnection!

  """Reads and enables pagination through a set of `GalerieFoto`."""
  galerieFotos(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieFotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosConnection!
  id: BigInt!
  name: String!
  origins: [String]!

  """Reads and enables pagination through a set of `PlatbyCategory`."""
  platbyCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyCategoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyCategory`."""
    orderBy: [PlatbyCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoriesConnection!

  """Reads and enables pagination through a set of `PlatbyItem`."""
  platbyItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsConnection!

  """Reads and enables pagination through a set of `Skupiny`."""
  skupinies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Skupiny`."""
    orderBy: [SkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SkupiniesConnection!

  """Reads and enables pagination through a set of `TenantAdministrator`."""
  tenantAdministratorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantAdministratorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantAdministrator`."""
    orderBy: [TenantAdministratorsOrderBy!]
  ): [TenantAdministrator!]!

  """Reads and enables pagination through a set of `TenantAttachment`."""
  tenantAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TenantAttachment`."""
    orderBy: [TenantAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TenantAttachmentsConnection!

  """Reads and enables pagination through a set of `TenantLocation`."""
  tenantLocationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantLocationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantLocation`."""
    orderBy: [TenantLocationsOrderBy!]
  ): [TenantLocation!]!

  """Reads and enables pagination through a set of `TenantMembership`."""
  tenantMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantMembership`."""
    orderBy: [TenantMembershipsOrderBy!]
  ): [TenantMembership!]!

  """Reads and enables pagination through a set of `TenantTrainer`."""
  tenantTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantTrainer`."""
    orderBy: [TenantTrainersOrderBy!]
  ): [TenantTrainer!]!

  """Reads and enables pagination through a set of `UpozorneniSkupiny`."""
  upozorneniSkupinies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniSkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesConnection!

  """Reads and enables pagination through a set of `Upozorneni`."""
  upozornenis(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisConnection!

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection!
}

type TenantAdministrator {
  active: Boolean
  createdAt: Datetime!
  description: String!
  id: BigInt!
  isVisible: Boolean!

  """Reads a single `Person` that is related to this `TenantAdministrator`."""
  person: Person
  personId: BigInt!
  since: Datetime!

  """Reads a single `Tenant` that is related to this `TenantAdministrator`."""
  tenant: Tenant
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime!
}

"""
A condition to be used against `TenantAdministrator` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TenantAdministratorCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isVisible` field."""
  isVisible: Boolean

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `TenantAdministrator`"""
input TenantAdministratorInput {
  createdAt: Datetime
  description: String
  isVisible: Boolean
  personId: BigInt!
  since: Datetime
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `TenantAdministrator`. Fields that are set will be updated.
"""
input TenantAdministratorPatch {
  createdAt: Datetime
  description: String
  isVisible: Boolean
  personId: BigInt
  since: Datetime
  tenantId: BigInt
  until: Datetime
  updatedAt: Datetime
}

"""Methods to use when ordering `TenantAdministrator`."""
enum TenantAdministratorsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  IS_VISIBLE_ASC
  IS_VISIBLE_DESC
  NATURAL
  PERSON_BY_PERSON_ID__BIO_ASC
  PERSON_BY_PERSON_ID__BIO_DESC
  PERSON_BY_PERSON_ID__BIRTH_DATE_ASC
  PERSON_BY_PERSON_ID__BIRTH_DATE_DESC
  PERSON_BY_PERSON_ID__CREATED_AT_ASC
  PERSON_BY_PERSON_ID__CREATED_AT_DESC
  PERSON_BY_PERSON_ID__CSTS_ID_ASC
  PERSON_BY_PERSON_ID__CSTS_ID_DESC
  PERSON_BY_PERSON_ID__EMAIL_ASC
  PERSON_BY_PERSON_ID__EMAIL_DESC
  PERSON_BY_PERSON_ID__FIRST_NAME_ASC
  PERSON_BY_PERSON_ID__FIRST_NAME_DESC
  PERSON_BY_PERSON_ID__GENDER_ASC
  PERSON_BY_PERSON_ID__GENDER_DESC
  PERSON_BY_PERSON_ID__ID_ASC
  PERSON_BY_PERSON_ID__ID_DESC
  PERSON_BY_PERSON_ID__LAST_NAME_ASC
  PERSON_BY_PERSON_ID__LAST_NAME_DESC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_ASC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_DESC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_ASC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_DESC
  PERSON_BY_PERSON_ID__NATIONALITY_ASC
  PERSON_BY_PERSON_ID__NATIONALITY_DESC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_PERSON_ID__PHONE_ASC
  PERSON_BY_PERSON_ID__PHONE_DESC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_PERSON_ID__UPDATED_AT_ASC
  PERSON_BY_PERSON_ID__UPDATED_AT_DESC
  PERSON_BY_PERSON_ID__WDSF_ID_ASC
  PERSON_BY_PERSON_ID__WDSF_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type TenantAttachment {
  """
  Reads a single `Attachment` that is related to this `TenantAttachment`.
  """
  attachmentByObjectName: Attachment
  objectName: String!

  """Reads a single `Tenant` that is related to this `TenantAttachment`."""
  tenant: Tenant
  tenantId: BigInt!
  type: TenantAttachmentType
}

"""
A condition to be used against `TenantAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TenantAttachmentCondition {
  """Checks for equality with the object’s `objectName` field."""
  objectName: String

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `type` field."""
  type: TenantAttachmentType
}

enum TenantAttachmentType {
  LOGO
  MAP
  PHOTO
}

"""A connection to a list of `TenantAttachment` values."""
type TenantAttachmentsConnection {
  """
  A list of edges which contains the `TenantAttachment` and cursor to aid in pagination.
  """
  edges: [TenantAttachmentsEdge!]!

  """A list of `TenantAttachment` objects."""
  nodes: [TenantAttachment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TenantAttachment` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TenantAttachment` edge in the connection."""
type TenantAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TenantAttachment` at the end of the edge."""
  node: TenantAttachment!
}

"""Methods to use when ordering `TenantAttachment`."""
enum TenantAttachmentsOrderBy {
  ATTACHMENT_BY_OBJECT_NAME__HEIGHT_ASC
  ATTACHMENT_BY_OBJECT_NAME__HEIGHT_DESC
  ATTACHMENT_BY_OBJECT_NAME__OBJECT_NAME_ASC
  ATTACHMENT_BY_OBJECT_NAME__OBJECT_NAME_DESC
  ATTACHMENT_BY_OBJECT_NAME__PREVIEW_OBJECT_NAME_ASC
  ATTACHMENT_BY_OBJECT_NAME__PREVIEW_OBJECT_NAME_DESC
  ATTACHMENT_BY_OBJECT_NAME__THUMBHASH_ASC
  ATTACHMENT_BY_OBJECT_NAME__THUMBHASH_DESC
  ATTACHMENT_BY_OBJECT_NAME__UPLOADED_AT_ASC
  ATTACHMENT_BY_OBJECT_NAME__UPLOADED_AT_DESC
  ATTACHMENT_BY_OBJECT_NAME__UPLOADED_BY_ASC
  ATTACHMENT_BY_OBJECT_NAME__UPLOADED_BY_DESC
  ATTACHMENT_BY_OBJECT_NAME__WIDTH_ASC
  ATTACHMENT_BY_OBJECT_NAME__WIDTH_DESC
  NATURAL
  OBJECT_NAME_ASC
  OBJECT_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  TYPE_ASC
  TYPE_DESC
}

"""
A condition to be used against `Tenant` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TenantCondition {
  """Checks for equality with the object’s `address` field."""
  address: AddressDomainInput

  """Checks for equality with the object’s `czDic` field."""
  czDic: String

  """Checks for equality with the object’s `czIco` field."""
  czIco: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `origins` field."""
  origins: [String]
}

type TenantLocation {
  id: BigInt!

  """Reads a single `Location` that is related to this `TenantLocation`."""
  location: Location
  locationId: BigInt!

  """Reads a single `Tenant` that is related to this `TenantLocation`."""
  tenant: Tenant
  tenantId: BigInt!
}

"""
A condition to be used against `TenantLocation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TenantLocationCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `locationId` field."""
  locationId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

"""Methods to use when ordering `TenantLocation`."""
enum TenantLocationsOrderBy {
  ID_ASC
  ID_DESC
  LOCATION_BY_LOCATION_ID__ADDRESS_ASC
  LOCATION_BY_LOCATION_ID__ADDRESS_DESC
  LOCATION_BY_LOCATION_ID__DESCRIPTION_ASC
  LOCATION_BY_LOCATION_ID__DESCRIPTION_DESC
  LOCATION_BY_LOCATION_ID__ID_ASC
  LOCATION_BY_LOCATION_ID__ID_DESC
  LOCATION_BY_LOCATION_ID__NAME_ASC
  LOCATION_BY_LOCATION_ID__NAME_DESC
  LOCATION_ID_ASC
  LOCATION_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
}

type TenantMembership {
  active: Boolean
  createdAt: Datetime!
  id: BigInt!

  """Reads a single `Person` that is related to this `TenantMembership`."""
  person: Person
  personId: BigInt!
  since: Datetime!

  """Reads a single `Tenant` that is related to this `TenantMembership`."""
  tenant: Tenant
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime!
}

"""
A condition to be used against `TenantMembership` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TenantMembershipCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `TenantMembership`"""
input TenantMembershipInput {
  createdAt: Datetime
  personId: BigInt!
  since: Datetime
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `TenantMembership`. Fields that are set will be updated.
"""
input TenantMembershipPatch {
  createdAt: Datetime
  personId: BigInt
  since: Datetime
  tenantId: BigInt
  until: Datetime
  updatedAt: Datetime
}

"""Methods to use when ordering `TenantMembership`."""
enum TenantMembershipsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_BY_PERSON_ID__BIO_ASC
  PERSON_BY_PERSON_ID__BIO_DESC
  PERSON_BY_PERSON_ID__BIRTH_DATE_ASC
  PERSON_BY_PERSON_ID__BIRTH_DATE_DESC
  PERSON_BY_PERSON_ID__CREATED_AT_ASC
  PERSON_BY_PERSON_ID__CREATED_AT_DESC
  PERSON_BY_PERSON_ID__CSTS_ID_ASC
  PERSON_BY_PERSON_ID__CSTS_ID_DESC
  PERSON_BY_PERSON_ID__EMAIL_ASC
  PERSON_BY_PERSON_ID__EMAIL_DESC
  PERSON_BY_PERSON_ID__FIRST_NAME_ASC
  PERSON_BY_PERSON_ID__FIRST_NAME_DESC
  PERSON_BY_PERSON_ID__GENDER_ASC
  PERSON_BY_PERSON_ID__GENDER_DESC
  PERSON_BY_PERSON_ID__ID_ASC
  PERSON_BY_PERSON_ID__ID_DESC
  PERSON_BY_PERSON_ID__LAST_NAME_ASC
  PERSON_BY_PERSON_ID__LAST_NAME_DESC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_ASC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_DESC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_ASC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_DESC
  PERSON_BY_PERSON_ID__NATIONALITY_ASC
  PERSON_BY_PERSON_ID__NATIONALITY_DESC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_PERSON_ID__PHONE_ASC
  PERSON_BY_PERSON_ID__PHONE_DESC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_PERSON_ID__UPDATED_AT_ASC
  PERSON_BY_PERSON_ID__UPDATED_AT_DESC
  PERSON_BY_PERSON_ID__WDSF_ID_ASC
  PERSON_BY_PERSON_ID__WDSF_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Tenant`. Fields that are set will be updated.
"""
input TenantPatch {
  address: AddressDomainInput
  czDic: String
  czIco: String
  description: String
  id: BigInt
  name: String
  origins: [String]
}

type TenantTrainer {
  active: Boolean
  createdAt: Datetime!
  defaultPrice: Price
  description: String!
  id: BigInt!
  isVisible: Boolean

  """Reads a single `Person` that is related to this `TenantTrainer`."""
  person: Person
  personId: BigInt!
  since: Datetime!

  """Reads a single `Tenant` that is related to this `TenantTrainer`."""
  tenant: Tenant
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime!
}

"""
A condition to be used against `TenantTrainer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TenantTrainerCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `defaultPrice` field."""
  defaultPrice: PriceInput

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isVisible` field."""
  isVisible: Boolean

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `TenantTrainer`"""
input TenantTrainerInput {
  createdAt: Datetime
  defaultPrice: PriceInput
  description: String
  isVisible: Boolean
  personId: BigInt!
  since: Datetime
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `TenantTrainer`. Fields that are set will be updated.
"""
input TenantTrainerPatch {
  createdAt: Datetime
  defaultPrice: PriceInput
  description: String
  isVisible: Boolean
  personId: BigInt
  since: Datetime
  tenantId: BigInt
  until: Datetime
  updatedAt: Datetime
}

"""Methods to use when ordering `TenantTrainer`."""
enum TenantTrainersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DEFAULT_PRICE_ASC
  DEFAULT_PRICE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  IS_VISIBLE_ASC
  IS_VISIBLE_DESC
  NATURAL
  PERSON_BY_PERSON_ID__BIO_ASC
  PERSON_BY_PERSON_ID__BIO_DESC
  PERSON_BY_PERSON_ID__BIRTH_DATE_ASC
  PERSON_BY_PERSON_ID__BIRTH_DATE_DESC
  PERSON_BY_PERSON_ID__CREATED_AT_ASC
  PERSON_BY_PERSON_ID__CREATED_AT_DESC
  PERSON_BY_PERSON_ID__CSTS_ID_ASC
  PERSON_BY_PERSON_ID__CSTS_ID_DESC
  PERSON_BY_PERSON_ID__EMAIL_ASC
  PERSON_BY_PERSON_ID__EMAIL_DESC
  PERSON_BY_PERSON_ID__FIRST_NAME_ASC
  PERSON_BY_PERSON_ID__FIRST_NAME_DESC
  PERSON_BY_PERSON_ID__GENDER_ASC
  PERSON_BY_PERSON_ID__GENDER_DESC
  PERSON_BY_PERSON_ID__ID_ASC
  PERSON_BY_PERSON_ID__ID_DESC
  PERSON_BY_PERSON_ID__LAST_NAME_ASC
  PERSON_BY_PERSON_ID__LAST_NAME_DESC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_ASC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_DESC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_ASC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_DESC
  PERSON_BY_PERSON_ID__NATIONALITY_ASC
  PERSON_BY_PERSON_ID__NATIONALITY_DESC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_PERSON_ID__PHONE_ASC
  PERSON_BY_PERSON_ID__PHONE_DESC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_PERSON_ID__UPDATED_AT_ASC
  PERSON_BY_PERSON_ID__UPDATED_AT_DESC
  PERSON_BY_PERSON_ID__WDSF_ID_ASC
  PERSON_BY_PERSON_ID__WDSF_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Methods to use when ordering `Tenant`."""
enum TenantsOrderBy {
  ADDRESS_ASC
  ADDRESS_DESC
  AKTUALITIES_BY_TENANT_ID__COUNT_ASC
  AKTUALITIES_BY_TENANT_ID__COUNT_DESC
  COHORT_GROUPS_BY_TENANT_ID__COUNT_ASC
  COHORT_GROUPS_BY_TENANT_ID__COUNT_DESC
  COHORT_MEMBERSHIPS_BY_TENANT_ID__COUNT_ASC
  COHORT_MEMBERSHIPS_BY_TENANT_ID__COUNT_DESC
  CZ_DIC_ASC
  CZ_DIC_DESC
  CZ_ICO_ASC
  CZ_ICO_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  DOKUMENTIES_BY_TENANT_ID__COUNT_ASC
  DOKUMENTIES_BY_TENANT_ID__COUNT_DESC
  EVENTS_BY_TENANT_ID__COUNT_ASC
  EVENTS_BY_TENANT_ID__COUNT_DESC
  EVENT_ATTENDANCES_BY_TENANT_ID__COUNT_ASC
  EVENT_ATTENDANCES_BY_TENANT_ID__COUNT_DESC
  EVENT_INSTANCES_BY_TENANT_ID__COUNT_ASC
  EVENT_INSTANCES_BY_TENANT_ID__COUNT_DESC
  EVENT_INSTANCE_TRAINERS_BY_TENANT_ID__COUNT_ASC
  EVENT_INSTANCE_TRAINERS_BY_TENANT_ID__COUNT_DESC
  EVENT_LESSON_DEMANDS_BY_TENANT_ID__COUNT_ASC
  EVENT_LESSON_DEMANDS_BY_TENANT_ID__COUNT_DESC
  EVENT_REGISTRATIONS_BY_TENANT_ID__COUNT_ASC
  EVENT_REGISTRATIONS_BY_TENANT_ID__COUNT_DESC
  EVENT_TARGET_COHORTS_BY_TENANT_ID__COUNT_ASC
  EVENT_TARGET_COHORTS_BY_TENANT_ID__COUNT_DESC
  EVENT_TRAINERS_BY_TENANT_ID__COUNT_ASC
  EVENT_TRAINERS_BY_TENANT_ID__COUNT_DESC
  FORM_RESPONSES_BY_TENANT_ID__COUNT_ASC
  FORM_RESPONSES_BY_TENANT_ID__COUNT_DESC
  GALERIE_DIRS_BY_TENANT_ID__COUNT_ASC
  GALERIE_DIRS_BY_TENANT_ID__COUNT_DESC
  GALERIE_FOTOS_BY_TENANT_ID__COUNT_ASC
  GALERIE_FOTOS_BY_TENANT_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORIGINS_ASC
  ORIGINS_DESC
  PLATBY_CATEGORIES_BY_TENANT_ID__COUNT_ASC
  PLATBY_CATEGORIES_BY_TENANT_ID__COUNT_DESC
  PLATBY_ITEMS_BY_TENANT_ID__COUNT_ASC
  PLATBY_ITEMS_BY_TENANT_ID__COUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SKUPINIES_BY_TENANT_ID__COUNT_ASC
  SKUPINIES_BY_TENANT_ID__COUNT_DESC
  TENANT_ADMINISTRATORS_BY_TENANT_ID__COUNT_ASC
  TENANT_ADMINISTRATORS_BY_TENANT_ID__COUNT_DESC
  TENANT_ATTACHMENTS_BY_TENANT_ID__COUNT_ASC
  TENANT_ATTACHMENTS_BY_TENANT_ID__COUNT_DESC
  TENANT_LOCATIONS_BY_TENANT_ID__COUNT_ASC
  TENANT_LOCATIONS_BY_TENANT_ID__COUNT_DESC
  TENANT_MEMBERSHIPS_BY_TENANT_ID__COUNT_ASC
  TENANT_MEMBERSHIPS_BY_TENANT_ID__COUNT_DESC
  TENANT_TRAINERS_BY_TENANT_ID__COUNT_ASC
  TENANT_TRAINERS_BY_TENANT_ID__COUNT_DESC
  UPOZORNENIS_BY_TENANT_ID__COUNT_ASC
  UPOZORNENIS_BY_TENANT_ID__COUNT_DESC
  UPOZORNENI_SKUPINIES_BY_TENANT_ID__COUNT_ASC
  UPOZORNENI_SKUPINIES_BY_TENANT_ID__COUNT_DESC
  USERS_BY_TENANT_ID__COUNT_ASC
  USERS_BY_TENANT_ID__COUNT_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateAktuality` mutation."""
input UpdateAktualityInput {
  atId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Aktuality` being updated.
  """
  patch: AktualityPatch!
}

"""The output of our update `Aktuality` mutation."""
type UpdateAktualityPayload {
  """The `Aktuality` that was updated by this mutation."""
  aktuality: Aktuality

  """An edge for our `Aktuality`. May be used by Relay 1."""
  aktualityEdge(
    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `GalerieFoto` that is related to this `Aktuality`."""
  galerieFotoByAtFotoMain: GalerieFoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Aktuality`."""
  tenant: Tenant

  """Reads a single `User` that is related to this `Aktuality`."""
  userByAtKdo: User
}

"""All input for the `updateCohortGroup` mutation."""
input UpdateCohortGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `CohortGroup` being updated.
  """
  patch: CohortGroupPatch!
}

"""The output of our update `CohortGroup` mutation."""
type UpdateCohortGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CohortGroup` that was updated by this mutation."""
  cohortGroup: CohortGroup

  """An edge for our `CohortGroup`. May be used by Relay 1."""
  cohortGroupEdge(
    """The method to use when ordering `CohortGroup`."""
    orderBy: [CohortGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CohortGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `CohortGroup`."""
  tenant: Tenant
}

"""All input for the `updateCohortMembership` mutation."""
input UpdateCohortMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `CohortMembership` being updated.
  """
  patch: CohortMembershipPatch!
}

"""The output of our update `CohortMembership` mutation."""
type UpdateCohortMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Skupiny` that is related to this `CohortMembership`."""
  cohort: Skupiny

  """The `CohortMembership` that was updated by this mutation."""
  cohortMembership: CohortMembership

  """Reads a single `Person` that is related to this `CohortMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `CohortMembership`."""
  tenant: Tenant
}

"""All input for the `updateCouple` mutation."""
input UpdateCoupleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Couple` being updated.
  """
  patch: CouplePatch!
}

"""The output of our update `Couple` mutation."""
type UpdateCouplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Couple` that was updated by this mutation."""
  couple: Couple

  """An edge for our `Couple`. May be used by Relay 1."""
  coupleEdge(
    """The method to use when ordering `Couple`."""
    orderBy: [CouplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CouplesEdge

  """Reads a single `Person` that is related to this `Couple`."""
  man: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Person` that is related to this `Couple`."""
  woman: Person
}

"""All input for the `updateDokumenty` mutation."""
input UpdateDokumentyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dId: BigInt!

  """
  An object where the defined keys will be set on the `Dokumenty` being updated.
  """
  patch: DokumentyPatch!
}

"""The output of our update `Dokumenty` mutation."""
type UpdateDokumentyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dokumenty` that was updated by this mutation."""
  dokumenty: Dokumenty

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Dokumenty`."""
  tenant: Tenant

  """Reads a single `User` that is related to this `Dokumenty`."""
  userByDKdo: User
}

"""All input for the `updateEvent` mutation."""
input UpdateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  patch: EventPatch!
}

"""The output of our update `Event` mutation."""
type UpdateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was updated by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Event`."""
  tenant: Tenant
}

"""All input for the `updateLocation` mutation."""
input UpdateLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Location` being updated.
  """
  patch: LocationPatch!
}

"""The output of our update `Location` mutation."""
type UpdateLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Location` that was updated by this mutation."""
  location: Location

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePerson` mutation."""
input UpdatePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  patch: PersonPatch!
}

"""The output of our update `Person` mutation."""
type UpdatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was updated by this mutation."""
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateRoom` mutation."""
input UpdateRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Room` being updated.
  """
  patch: RoomPatch!
}

"""The output of our update `Room` mutation."""
type UpdateRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Location` that is related to this `Room`."""
  locationByLocation: Location

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Room` that was updated by this mutation."""
  room: Room

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomsEdge
}

"""All input for the `updateSkupiny` mutation."""
input UpdateSkupinyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Skupiny` being updated.
  """
  patch: SkupinyPatch!
  sId: BigInt!
}

"""The output of our update `Skupiny` mutation."""
type UpdateSkupinyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `CohortGroup` that is related to this `Skupiny`."""
  cohortGroupByCohortGroup: CohortGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Skupiny` that was updated by this mutation."""
  skupiny: Skupiny

  """An edge for our `Skupiny`. May be used by Relay 1."""
  skupinyEdge(
    """The method to use when ordering `Skupiny`."""
    orderBy: [SkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SkupiniesEdge

  """Reads a single `Tenant` that is related to this `Skupiny`."""
  tenant: Tenant
}

"""All input for the `updateTenantAdministrator` mutation."""
input UpdateTenantAdministratorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `TenantAdministrator` being updated.
  """
  patch: TenantAdministratorPatch!
}

"""The output of our update `TenantAdministrator` mutation."""
type UpdateTenantAdministratorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantAdministrator`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantAdministrator`."""
  tenant: Tenant

  """The `TenantAdministrator` that was updated by this mutation."""
  tenantAdministrator: TenantAdministrator
}

"""All input for the `updateTenant` mutation."""
input UpdateTenantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Tenant` being updated.
  """
  patch: TenantPatch!
}

"""All input for the `updateTenantMembership` mutation."""
input UpdateTenantMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `TenantMembership` being updated.
  """
  patch: TenantMembershipPatch!
}

"""The output of our update `TenantMembership` mutation."""
type UpdateTenantMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantMembership`."""
  tenant: Tenant

  """The `TenantMembership` that was updated by this mutation."""
  tenantMembership: TenantMembership
}

"""The output of our update `Tenant` mutation."""
type UpdateTenantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tenant` that was updated by this mutation."""
  tenant: Tenant
}

"""All input for the `updateTenantTrainer` mutation."""
input UpdateTenantTrainerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `TenantTrainer` being updated.
  """
  patch: TenantTrainerPatch!
}

"""The output of our update `TenantTrainer` mutation."""
type UpdateTenantTrainerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantTrainer`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantTrainer`."""
  tenant: Tenant

  """The `TenantTrainer` that was updated by this mutation."""
  tenantTrainer: TenantTrainer
}

"""All input for the `updateUpozorneni` mutation."""
input UpdateUpozorneniInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Upozorneni` being updated.
  """
  patch: UpozorneniPatch!
  upId: BigInt!
}

"""The output of our update `Upozorneni` mutation."""
type UpdateUpozorneniPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Upozorneni`."""
  tenant: Tenant

  """The `Upozorneni` that was updated by this mutation."""
  upozorneni: Upozorneni

  """An edge for our `Upozorneni`. May be used by Relay 1."""
  upozorneniEdge(
    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisEdge

  """Reads a single `User` that is related to this `Upozorneni`."""
  userByUpKdo: User
}

type Upozorneni {
  id: BigInt
  isVisible: Boolean
  scheduledSince: Datetime
  scheduledUntil: Datetime
  sticky: Boolean!

  """Reads a single `Tenant` that is related to this `Upozorneni`."""
  tenant: Tenant
  tenantId: BigInt!
  upBarvy: BigInt!
  upId: BigInt!
  upKdo: BigInt
  upLock: Boolean!
  upNadpis: String!
  upText: String!
  upTimestamp: Datetime
  upTimestampAdd: Datetime!

  """Reads and enables pagination through a set of `UpozorneniSkupiny`."""
  upozorneniSkupiniesByUpsIdRodic(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniSkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesConnection!

  """Reads a single `User` that is related to this `Upozorneni`."""
  userByUpKdo: User
}

"""
A condition to be used against `Upozorneni` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UpozorneniCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isVisible` field."""
  isVisible: Boolean

  """Checks for equality with the object’s `scheduledSince` field."""
  scheduledSince: Datetime

  """Checks for equality with the object’s `scheduledUntil` field."""
  scheduledUntil: Datetime

  """Checks for equality with the object’s `sticky` field."""
  sticky: Boolean

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `upBarvy` field."""
  upBarvy: BigInt

  """Checks for equality with the object’s `upId` field."""
  upId: BigInt

  """Checks for equality with the object’s `upKdo` field."""
  upKdo: BigInt

  """Checks for equality with the object’s `upLock` field."""
  upLock: Boolean

  """Checks for equality with the object’s `upNadpis` field."""
  upNadpis: String

  """Checks for equality with the object’s `upText` field."""
  upText: String

  """Checks for equality with the object’s `upTimestamp` field."""
  upTimestamp: Datetime

  """Checks for equality with the object’s `upTimestampAdd` field."""
  upTimestampAdd: Datetime
}

"""An input for mutations affecting `Upozorneni`"""
input UpozorneniInput {
  id: BigInt
  isVisible: Boolean
  scheduledSince: Datetime
  scheduledUntil: Datetime
  sticky: Boolean
  tenantId: BigInt
  upBarvy: BigInt
  upId: BigInt
  upKdo: BigInt
  upLock: Boolean
  upNadpis: String!
  upText: String!
  upTimestamp: Datetime
  upTimestampAdd: Datetime
}

"""
Represents an update to a `Upozorneni`. Fields that are set will be updated.
"""
input UpozorneniPatch {
  id: BigInt
  isVisible: Boolean
  scheduledSince: Datetime
  scheduledUntil: Datetime
  sticky: Boolean
  tenantId: BigInt
  upBarvy: BigInt
  upId: BigInt
  upKdo: BigInt
  upLock: Boolean
  upNadpis: String
  upText: String
  upTimestamp: Datetime
  upTimestampAdd: Datetime
}

"""A connection to a list of `UpozorneniSkupiny` values."""
type UpozorneniSkupiniesConnection {
  """
  A list of edges which contains the `UpozorneniSkupiny` and cursor to aid in pagination.
  """
  edges: [UpozorneniSkupiniesEdge!]!

  """A list of `UpozorneniSkupiny` objects."""
  nodes: [UpozorneniSkupiny!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UpozorneniSkupiny` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UpozorneniSkupiny` edge in the connection."""
type UpozorneniSkupiniesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UpozorneniSkupiny` at the end of the edge."""
  node: UpozorneniSkupiny!
}

"""Methods to use when ordering `UpozorneniSkupiny`."""
enum UpozorneniSkupiniesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SKUPINY_BY_UPS_ID_SKUPINA__COHORT_GROUP_ASC
  SKUPINY_BY_UPS_ID_SKUPINA__COHORT_GROUP_DESC
  SKUPINY_BY_UPS_ID_SKUPINA__ID_ASC
  SKUPINY_BY_UPS_ID_SKUPINA__ID_DESC
  SKUPINY_BY_UPS_ID_SKUPINA__ORDERING_ASC
  SKUPINY_BY_UPS_ID_SKUPINA__ORDERING_DESC
  SKUPINY_BY_UPS_ID_SKUPINA__S_COLOR_RGB_ASC
  SKUPINY_BY_UPS_ID_SKUPINA__S_COLOR_RGB_DESC
  SKUPINY_BY_UPS_ID_SKUPINA__S_DESCRIPTION_ASC
  SKUPINY_BY_UPS_ID_SKUPINA__S_DESCRIPTION_DESC
  SKUPINY_BY_UPS_ID_SKUPINA__S_ID_ASC
  SKUPINY_BY_UPS_ID_SKUPINA__S_ID_DESC
  SKUPINY_BY_UPS_ID_SKUPINA__S_LOCATION_ASC
  SKUPINY_BY_UPS_ID_SKUPINA__S_LOCATION_DESC
  SKUPINY_BY_UPS_ID_SKUPINA__S_NAME_ASC
  SKUPINY_BY_UPS_ID_SKUPINA__S_NAME_DESC
  SKUPINY_BY_UPS_ID_SKUPINA__S_VISIBLE_ASC
  SKUPINY_BY_UPS_ID_SKUPINA__S_VISIBLE_DESC
  SKUPINY_BY_UPS_ID_SKUPINA__TENANT_ID_ASC
  SKUPINY_BY_UPS_ID_SKUPINA__TENANT_ID_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__ID_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__ID_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__IS_VISIBLE_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__IS_VISIBLE_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__SCHEDULED_SINCE_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__SCHEDULED_SINCE_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__SCHEDULED_UNTIL_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__SCHEDULED_UNTIL_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__STICKY_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__STICKY_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__TENANT_ID_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__TENANT_ID_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_BARVY_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_BARVY_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_ID_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_ID_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_KDO_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_KDO_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_LOCK_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_LOCK_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_NADPIS_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_NADPIS_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_TEXT_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_TEXT_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_TIMESTAMP_ADD_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_TIMESTAMP_ADD_DESC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_TIMESTAMP_ASC
  UPOZORNENI_BY_UPS_ID_RODIC__UP_TIMESTAMP_DESC
  UPS_COLOR_ASC
  UPS_COLOR_DESC
  UPS_ID_ASC
  UPS_ID_DESC
  UPS_ID_RODIC_ASC
  UPS_ID_RODIC_DESC
  UPS_ID_SKUPINA_ASC
  UPS_ID_SKUPINA_DESC
}

type UpozorneniSkupiny {
  id: BigInt

  """Reads a single `Skupiny` that is related to this `UpozorneniSkupiny`."""
  skupinyByUpsIdSkupina: Skupiny

  """Reads a single `Tenant` that is related to this `UpozorneniSkupiny`."""
  tenant: Tenant
  tenantId: BigInt!

  """
  Reads a single `Upozorneni` that is related to this `UpozorneniSkupiny`.
  """
  upozorneniByUpsIdRodic: Upozorneni
  upsColor: String!
  upsId: BigInt!
  upsIdRodic: BigInt!
  upsIdSkupina: BigInt!
}

"""
A condition to be used against `UpozorneniSkupiny` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UpozorneniSkupinyCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `upsColor` field."""
  upsColor: String

  """Checks for equality with the object’s `upsId` field."""
  upsId: BigInt

  """Checks for equality with the object’s `upsIdRodic` field."""
  upsIdRodic: BigInt

  """Checks for equality with the object’s `upsIdSkupina` field."""
  upsIdSkupina: BigInt
}

"""A connection to a list of `Upozorneni` values."""
type UpozornenisConnection {
  """
  A list of edges which contains the `Upozorneni` and cursor to aid in pagination.
  """
  edges: [UpozornenisEdge!]!

  """A list of `Upozorneni` objects."""
  nodes: [Upozorneni!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Upozorneni` you could get from the connection."""
  totalCount: Int!
}

"""A `Upozorneni` edge in the connection."""
type UpozornenisEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Upozorneni` at the end of the edge."""
  node: Upozorneni!
}

"""Methods to use when ordering `Upozorneni`."""
enum UpozornenisOrderBy {
  ID_ASC
  ID_DESC
  IS_VISIBLE_ASC
  IS_VISIBLE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SCHEDULED_SINCE_ASC
  SCHEDULED_SINCE_DESC
  SCHEDULED_UNTIL_ASC
  SCHEDULED_UNTIL_DESC
  STICKY_ASC
  STICKY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPOZORNENI_SKUPINIES_BY_UPS_ID_RODIC__COUNT_ASC
  UPOZORNENI_SKUPINIES_BY_UPS_ID_RODIC__COUNT_DESC
  UP_BARVY_ASC
  UP_BARVY_DESC
  UP_ID_ASC
  UP_ID_DESC
  UP_KDO_ASC
  UP_KDO_DESC
  UP_LOCK_ASC
  UP_LOCK_DESC
  UP_NADPIS_ASC
  UP_NADPIS_DESC
  UP_TEXT_ASC
  UP_TEXT_DESC
  UP_TIMESTAMP_ADD_ASC
  UP_TIMESTAMP_ADD_DESC
  UP_TIMESTAMP_ASC
  UP_TIMESTAMP_DESC
  USER_BY_UP_KDO__ID_ASC
  USER_BY_UP_KDO__ID_DESC
  USER_BY_UP_KDO__TENANT_ID_ASC
  USER_BY_UP_KDO__TENANT_ID_DESC
  USER_BY_UP_KDO__U_CREATED_AT_ASC
  USER_BY_UP_KDO__U_CREATED_AT_DESC
  USER_BY_UP_KDO__U_EMAIL_ASC
  USER_BY_UP_KDO__U_EMAIL_DESC
  USER_BY_UP_KDO__U_ID_ASC
  USER_BY_UP_KDO__U_ID_DESC
  USER_BY_UP_KDO__U_JMENO_ASC
  USER_BY_UP_KDO__U_JMENO_DESC
  USER_BY_UP_KDO__U_LOGIN_ASC
  USER_BY_UP_KDO__U_LOGIN_DESC
  USER_BY_UP_KDO__U_NATIONALITY_ASC
  USER_BY_UP_KDO__U_NATIONALITY_DESC
  USER_BY_UP_KDO__U_PRIJMENI_ASC
  USER_BY_UP_KDO__U_PRIJMENI_DESC
  USER_BY_UP_KDO__U_TIMESTAMP_ASC
  USER_BY_UP_KDO__U_TIMESTAMP_DESC
}

type User {
  """Reads and enables pagination through a set of `Aktuality`."""
  aktualitiesByAtKdo(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AktualityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUploadedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!
  dateOfNewestPayment: Date
  dateOfOldestPayment: Date

  """Reads and enables pagination through a set of `Dokumenty`."""
  dokumentiesByDKdoList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DokumentyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Dokumenty`."""
    orderBy: [DokumentiesOrderBy!]
  ): [Dokumenty!]!

  """Reads and enables pagination through a set of `GalerieFoto`."""
  galerieFotosByGfKdo(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieFotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosConnection!
  hasValidPayment: Boolean
  id: BigInt
  inPublicCohort: Boolean

  """Reads and enables pagination through a set of `PlatbyItem`."""
  platbyItemsByPiIdUser(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsConnection!

  """Reads a single `Tenant` that is related to this `User`."""
  tenant: Tenant
  tenantId: BigInt!
  uCreatedAt: Datetime!
  uEmail: String!
  uId: BigInt!
  uJmeno: String!
  uLogin: String!
  uNationality: String!
  uPrijmeni: String!
  uTimestamp: Datetime!

  """Reads and enables pagination through a set of `Upozorneni`."""
  upozornenisByUpKdo(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisConnection!

  """Reads and enables pagination through a set of `UserProxy`."""
  userProxiesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserProxyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserProxy`."""
    orderBy: [UserProxiesOrderBy!]
  ): [UserProxy!]!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `inPublicCohort` field."""
  inPublicCohort: Boolean

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `uCreatedAt` field."""
  uCreatedAt: Datetime

  """Checks for equality with the object’s `uEmail` field."""
  uEmail: String

  """Checks for equality with the object’s `uId` field."""
  uId: BigInt

  """Checks for equality with the object’s `uJmeno` field."""
  uJmeno: String

  """Checks for equality with the object’s `uLogin` field."""
  uLogin: String

  """Checks for equality with the object’s `uNationality` field."""
  uNationality: String

  """Checks for equality with the object’s `uPrijmeni` field."""
  uPrijmeni: String

  """Checks for equality with the object’s `uTimestamp` field."""
  uTimestamp: Datetime
}

"""Methods to use when ordering `UserProxy`."""
enum UserProxiesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_BY_PERSON_ID__BIO_ASC
  PERSON_BY_PERSON_ID__BIO_DESC
  PERSON_BY_PERSON_ID__BIRTH_DATE_ASC
  PERSON_BY_PERSON_ID__BIRTH_DATE_DESC
  PERSON_BY_PERSON_ID__CREATED_AT_ASC
  PERSON_BY_PERSON_ID__CREATED_AT_DESC
  PERSON_BY_PERSON_ID__CSTS_ID_ASC
  PERSON_BY_PERSON_ID__CSTS_ID_DESC
  PERSON_BY_PERSON_ID__EMAIL_ASC
  PERSON_BY_PERSON_ID__EMAIL_DESC
  PERSON_BY_PERSON_ID__FIRST_NAME_ASC
  PERSON_BY_PERSON_ID__FIRST_NAME_DESC
  PERSON_BY_PERSON_ID__GENDER_ASC
  PERSON_BY_PERSON_ID__GENDER_DESC
  PERSON_BY_PERSON_ID__ID_ASC
  PERSON_BY_PERSON_ID__ID_DESC
  PERSON_BY_PERSON_ID__LAST_NAME_ASC
  PERSON_BY_PERSON_ID__LAST_NAME_DESC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_ASC
  PERSON_BY_PERSON_ID__LEGACY_USER_ID_DESC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_ASC
  PERSON_BY_PERSON_ID__MIDDLE_NAME_DESC
  PERSON_BY_PERSON_ID__NATIONALITY_ASC
  PERSON_BY_PERSON_ID__NATIONALITY_DESC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_ASC
  PERSON_BY_PERSON_ID__NATIONAL_ID_NUMBER_DESC
  PERSON_BY_PERSON_ID__PHONE_ASC
  PERSON_BY_PERSON_ID__PHONE_DESC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__PREFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_ASC
  PERSON_BY_PERSON_ID__SUFFIX_TITLE_DESC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_ASC
  PERSON_BY_PERSON_ID__TAX_IDENTIFICATION_NUMBER_DESC
  PERSON_BY_PERSON_ID__UPDATED_AT_ASC
  PERSON_BY_PERSON_ID__UPDATED_AT_DESC
  PERSON_BY_PERSON_ID__WDSF_ID_ASC
  PERSON_BY_PERSON_ID__WDSF_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__TENANT_ID_ASC
  USER_BY_USER_ID__TENANT_ID_DESC
  USER_BY_USER_ID__U_CREATED_AT_ASC
  USER_BY_USER_ID__U_CREATED_AT_DESC
  USER_BY_USER_ID__U_EMAIL_ASC
  USER_BY_USER_ID__U_EMAIL_DESC
  USER_BY_USER_ID__U_ID_ASC
  USER_BY_USER_ID__U_ID_DESC
  USER_BY_USER_ID__U_JMENO_ASC
  USER_BY_USER_ID__U_JMENO_DESC
  USER_BY_USER_ID__U_LOGIN_ASC
  USER_BY_USER_ID__U_LOGIN_DESC
  USER_BY_USER_ID__U_NATIONALITY_ASC
  USER_BY_USER_ID__U_NATIONALITY_DESC
  USER_BY_USER_ID__U_PRIJMENI_ASC
  USER_BY_USER_ID__U_PRIJMENI_DESC
  USER_BY_USER_ID__U_TIMESTAMP_ASC
  USER_BY_USER_ID__U_TIMESTAMP_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type UserProxy {
  createdAt: Datetime!
  id: BigInt!

  """Reads a single `Person` that is related to this `UserProxy`."""
  person: Person
  personId: BigInt!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserProxy`."""
  user: User
  userId: BigInt!
}

"""
A condition to be used against `UserProxy` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserProxyCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  AKTUALITIES_BY_AT_KDO__COUNT_ASC
  AKTUALITIES_BY_AT_KDO__COUNT_DESC
  ATTACHMENTS_BY_UPLOADED_BY__COUNT_ASC
  ATTACHMENTS_BY_UPLOADED_BY__COUNT_DESC
  DOKUMENTIES_BY_D_KDO__COUNT_ASC
  DOKUMENTIES_BY_D_KDO__COUNT_DESC
  GALERIE_FOTOS_BY_GF_KDO__COUNT_ASC
  GALERIE_FOTOS_BY_GF_KDO__COUNT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PLATBY_ITEMS_BY_PI_ID_USER__COUNT_ASC
  PLATBY_ITEMS_BY_PI_ID_USER__COUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_BY_TENANT_ID__ADDRESS_ASC
  TENANT_BY_TENANT_ID__ADDRESS_DESC
  TENANT_BY_TENANT_ID__CZ_DIC_ASC
  TENANT_BY_TENANT_ID__CZ_DIC_DESC
  TENANT_BY_TENANT_ID__CZ_ICO_ASC
  TENANT_BY_TENANT_ID__CZ_ICO_DESC
  TENANT_BY_TENANT_ID__DESCRIPTION_ASC
  TENANT_BY_TENANT_ID__DESCRIPTION_DESC
  TENANT_BY_TENANT_ID__ID_ASC
  TENANT_BY_TENANT_ID__ID_DESC
  TENANT_BY_TENANT_ID__NAME_ASC
  TENANT_BY_TENANT_ID__NAME_DESC
  TENANT_BY_TENANT_ID__ORIGINS_ASC
  TENANT_BY_TENANT_ID__ORIGINS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPOZORNENIS_BY_UP_KDO__COUNT_ASC
  UPOZORNENIS_BY_UP_KDO__COUNT_DESC
  USER_PROXIES_BY_USER_ID__COUNT_ASC
  USER_PROXIES_BY_USER_ID__COUNT_DESC
  U_CREATED_AT_ASC
  U_CREATED_AT_DESC
  U_EMAIL_ASC
  U_EMAIL_DESC
  U_ID_ASC
  U_ID_DESC
  U_JMENO_ASC
  U_JMENO_DESC
  U_LOGIN_ASC
  U_LOGIN_DESC
  U_NATIONALITY_ASC
  U_NATIONALITY_DESC
  U_PRIJMENI_ASC
  U_PRIJMENI_DESC
  U_TIMESTAMP_ASC
  U_TIMESTAMP_DESC
}
