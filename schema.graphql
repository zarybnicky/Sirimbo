type Account {
  assets(since: Datetime, until: Datetime): BigFloat
  balance: BigFloat

  """Reads and enables pagination through a set of `CohortSubscription`."""
  cohortSubscriptionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortSubscriptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CohortSubscription`."""
    orderBy: [CohortSubscriptionsOrderBy!]
  ): [CohortSubscription!]!
  createdAt: Datetime!
  currency: String!

  """Reads and enables pagination through a set of `Event`."""
  eventsByPaymentRecipientId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection!
  id: BigInt!
  liabilities(since: Datetime, until: Datetime): BigFloat
  openingBalance: BigFloat!

  """Reads and enables pagination through a set of `PaymentRecipient`."""
  paymentRecipientsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentRecipientCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PaymentRecipient`."""
    orderBy: [PaymentRecipientsOrderBy!]
  ): [PaymentRecipient!]!

  """Reads a single `Person` that is related to this `Account`."""
  person: Person
  personId: BigInt

  """Reads and enables pagination through a set of `Posting`."""
  postingsByOriginalAccountIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Posting`."""
    orderBy: [PostingsOrderBy!]
  ): [Posting!]!

  """Reads and enables pagination through a set of `Posting`."""
  postingsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Posting`."""
    orderBy: [PostingsOrderBy!]
  ): [Posting!]!

  """Reads a single `Tenant` that is related to this `Account`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AccountCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `currency` field."""
  currency: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `openingBalance` field."""
  openingBalance: BigFloat

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A `Account` edge in the connection."""
type AccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Account` at the end of the edge."""
  node: Account!
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CURRENCY_ASC
  CURRENCY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OPENING_BALANCE_ASC
  OPENING_BALANCE_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type AddressDomain {
  city: String
  conscriptionNumber: String
  district: String
  orientationNumber: String
  postalCode: String
  region: String
  street: String
}

"""An input for mutations affecting `AddressDomain`"""
input AddressDomainInput {
  city: String
  conscriptionNumber: String
  district: String
  orientationNumber: String
  postalCode: String
  region: String
  street: String
}

"""A connection to a list of `Aktuality` values."""
type AktualitiesConnection {
  """
  A list of edges which contains the `Aktuality` and cursor to aid in pagination.
  """
  edges: [AktualitiesEdge!]!

  """A list of `Aktuality` objects."""
  nodes: [Aktuality!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Aktuality` you could get from the connection."""
  totalCount: Int!
}

"""A `Aktuality` edge in the connection."""
type AktualitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Aktuality` at the end of the edge."""
  node: Aktuality!
}

"""Methods to use when ordering `Aktuality`."""
enum AktualitiesOrderBy {
  AT_FOTO_ASC
  AT_FOTO_DESC
  AT_FOTO_MAIN_ASC
  AT_FOTO_MAIN_DESC
  AT_ID_ASC
  AT_ID_DESC
  AT_JMENO_ASC
  AT_JMENO_DESC
  AT_KAT_ASC
  AT_KAT_DESC
  AT_KDO_ASC
  AT_KDO_DESC
  AT_PREVIEW_ASC
  AT_PREVIEW_DESC
  AT_TEXT_ASC
  AT_TEXT_DESC
  AT_TIMESTAMP_ADD_ASC
  AT_TIMESTAMP_ADD_DESC
  AT_TIMESTAMP_ASC
  AT_TIMESTAMP_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  TITLE_PHOTO_URL_ASC
  TITLE_PHOTO_URL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type Aktuality {
  atFoto: BigInt
  atFotoMain: BigInt
  atId: BigInt!
  atJmeno: String!
  atKat: String! @deprecated(reason: "true")
  atKdo: BigInt
  atPreview: String!
  atText: String!
  atTimestamp: Datetime!
  atTimestampAdd: Datetime!
  createdAt: Datetime

  """Reads a single `GalerieFoto` that is related to this `Aktuality`."""
  galerieFotoByAtFotoMain: GalerieFoto
  id: BigInt!

  """Reads a single `Tenant` that is related to this `Aktuality`."""
  tenant: Tenant
  tenantId: BigInt!
  titlePhotoUrl: String
  updatedAt: Datetime

  """Reads a single `User` that is related to this `Aktuality`."""
  user: User
}

"""
A condition to be used against `Aktuality` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AktualityCondition {
  """Checks for equality with the object’s `atFoto` field."""
  atFoto: BigInt

  """Checks for equality with the object’s `atFotoMain` field."""
  atFotoMain: BigInt

  """Checks for equality with the object’s `atId` field."""
  atId: BigInt

  """Checks for equality with the object’s `atJmeno` field."""
  atJmeno: String

  """Checks for equality with the object’s `atKat` field."""
  atKat: String

  """Checks for equality with the object’s `atKdo` field."""
  atKdo: BigInt

  """Checks for equality with the object’s `atPreview` field."""
  atPreview: String

  """Checks for equality with the object’s `atText` field."""
  atText: String

  """Checks for equality with the object’s `atTimestamp` field."""
  atTimestamp: Datetime

  """Checks for equality with the object’s `atTimestampAdd` field."""
  atTimestampAdd: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `titlePhotoUrl` field."""
  titlePhotoUrl: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Aktuality`"""
input AktualityInput {
  atFoto: BigInt
  atFotoMain: BigInt
  atId: BigInt
  atJmeno: String!
  atKat: String
  atKdo: BigInt
  atPreview: String!
  atText: String!
  atTimestamp: Datetime
  atTimestampAdd: Datetime
  createdAt: Datetime
  id: BigInt
  tenantId: BigInt
  titlePhotoUrl: String
  updatedAt: Datetime
}

"""
Represents an update to a `Aktuality`. Fields that are set will be updated.
"""
input AktualityPatch {
  atFoto: BigInt
  atFotoMain: BigInt
  atId: BigInt
  atJmeno: String
  atKat: String
  atKdo: BigInt
  atPreview: String
  atText: String
  atTimestamp: Datetime
  atTimestampAdd: Datetime
  createdAt: Datetime
  id: BigInt
  tenantId: BigInt
  titlePhotoUrl: String
  updatedAt: Datetime
}

enum ApplicationFormStatus {
  APPROVED
  NEW
  REJECTED
  SENT
}

type Attachment {
  directory: String
  downloadUrl: String!
  height: Int

  """Reads and enables pagination through a set of `LocationAttachment`."""
  locationAttachmentsByObjectName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LocationAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LocationAttachment`."""
    orderBy: [LocationAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationAttachmentsConnection!
  objectName: String!
  previewObjectName: String
  publicUrl: String!

  """Reads and enables pagination through a set of `RoomAttachment`."""
  roomAttachmentsByObjectName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomAttachment`."""
    orderBy: [RoomAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomAttachmentsConnection!

  """Reads and enables pagination through a set of `TenantAttachment`."""
  tenantAttachmentsByObjectName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TenantAttachment`."""
    orderBy: [TenantAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TenantAttachmentsConnection!
  thumbhash: String
  uploadUrl: String!
  uploadedAt: Datetime!
  uploadedBy: BigInt

  """Reads a single `User` that is related to this `Attachment`."""
  user: User
  width: Int
}

"""
A condition to be used against `Attachment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttachmentCondition {
  """Checks for equality with the object’s `directory` field."""
  directory: String

  """Checks for equality with the object’s `height` field."""
  height: Int

  """Checks for equality with the object’s `objectName` field."""
  objectName: String

  """Checks for equality with the object’s `previewObjectName` field."""
  previewObjectName: String

  """Checks for equality with the object’s `thumbhash` field."""
  thumbhash: String

  """Checks for equality with the object’s `uploadedAt` field."""
  uploadedAt: Datetime

  """Checks for equality with the object’s `uploadedBy` field."""
  uploadedBy: BigInt

  """Checks for equality with the object’s `width` field."""
  width: Int
}

"""A connection to a list of `String` values."""
type AttachmentDirectoriesConnection {
  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [AttachmentDirectoriesEdge]!

  """A list of `String` objects."""
  nodes: [String]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type AttachmentDirectoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""An input for mutations affecting `Attachment`"""
input AttachmentInput {
  height: Int
  objectName: String!
  previewObjectName: String
  thumbhash: String
  uploadedAt: Datetime
  uploadedBy: BigInt
  width: Int
}

"""A connection to a list of `Attachment` values."""
type AttachmentsConnection {
  """
  A list of edges which contains the `Attachment` and cursor to aid in pagination.
  """
  edges: [AttachmentsEdge!]!

  """A list of `Attachment` objects."""
  nodes: [Attachment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Attachment` you could get from the connection."""
  totalCount: Int!
}

"""A `Attachment` edge in the connection."""
type AttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Attachment` at the end of the edge."""
  node: Attachment!
}

"""Methods to use when ordering `Attachment`."""
enum AttachmentsOrderBy {
  HEIGHT_ASC
  HEIGHT_DESC
  NATURAL
  OBJECT_NAME_ASC
  OBJECT_NAME_DESC
  PREVIEW_OBJECT_NAME_ASC
  PREVIEW_OBJECT_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  THUMBHASH_ASC
  THUMBHASH_DESC
  UPLOADED_AT_ASC
  UPLOADED_AT_DESC
  UPLOADED_BY_ASC
  UPLOADED_BY_DESC
  WIDTH_ASC
  WIDTH_DESC
}

enum AttendanceType {
  ATTENDED
  CANCELLED
  EXCUSED
  NOT_EXCUSED
  UNKNOWN
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""All input for the `cancelRegistration` mutation."""
input CancelRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  registrationId: BigInt
}

"""The output of our `cancelRegistration` mutation."""
type CancelRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPass: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Cohort {
  """Reads a single `CohortGroup` that is related to this `Cohort`."""
  cohortGroup: CohortGroup
  cohortGroupId: BigInt

  """Reads and enables pagination through a set of `CohortMembership`."""
  cohortMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CohortMembership`."""
    orderBy: [CohortMembershipsOrderBy!]
  ): [CohortMembership!]!

  """Reads and enables pagination through a set of `CohortSubscription`."""
  cohortSubscriptionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortSubscriptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CohortSubscription`."""
    orderBy: [CohortSubscriptionsOrderBy!]
  ): [CohortSubscription!]!
  colorRgb: String!
  description: String!

  """Reads and enables pagination through a set of `EventTargetCohort`."""
  eventTargetCohortsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTargetCohortCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTargetCohort`."""
    orderBy: [EventTargetCohortsOrderBy!]
  ): [EventTargetCohort!]!
  id: BigInt!
  isVisible: Boolean!
  location: String!
  name: String!
  ordering: Int!

  """Reads a single `Tenant` that is related to this `Cohort`."""
  tenant: Tenant
  tenantId: BigInt!

  """Reads and enables pagination through a set of `UpozorneniSkupiny`."""
  upozorneniSkupiniesByUpsIdSkupina(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniSkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesConnection!
}

"""
A condition to be used against `Cohort` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CohortCondition {
  """Checks for equality with the object’s `cohortGroupId` field."""
  cohortGroupId: BigInt

  """Checks for equality with the object’s `colorRgb` field."""
  colorRgb: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isVisible` field."""
  isVisible: Boolean

  """Checks for equality with the object’s `location` field."""
  location: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `ordering` field."""
  ordering: Int

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

type CohortGroup {
  """Reads and enables pagination through a set of `Cohort`."""
  cohortsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Cohort`."""
    orderBy: [CohortsOrderBy!]
  ): [Cohort!]!
  description: String!
  id: BigInt!
  isPublic: Boolean!
  name: String!
  ordering: Int!

  """Reads a single `Tenant` that is related to this `CohortGroup`."""
  tenant: Tenant
  tenantId: BigInt!
}

"""
A condition to be used against `CohortGroup` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CohortGroupCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isPublic` field."""
  isPublic: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `ordering` field."""
  ordering: Int

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

"""An input for mutations affecting `CohortGroup`"""
input CohortGroupInput {
  description: String
  id: BigInt
  isPublic: Boolean
  name: String!
  ordering: Int
  tenantId: BigInt
}

"""
Represents an update to a `CohortGroup`. Fields that are set will be updated.
"""
input CohortGroupPatch {
  description: String
  id: BigInt
  isPublic: Boolean
  name: String
  ordering: Int
  tenantId: BigInt
}

"""A connection to a list of `CohortGroup` values."""
type CohortGroupsConnection {
  """
  A list of edges which contains the `CohortGroup` and cursor to aid in pagination.
  """
  edges: [CohortGroupsEdge!]!

  """A list of `CohortGroup` objects."""
  nodes: [CohortGroup!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CohortGroup` you could get from the connection."""
  totalCount: Int!
}

"""A `CohortGroup` edge in the connection."""
type CohortGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CohortGroup` at the end of the edge."""
  node: CohortGroup!
}

"""Methods to use when ordering `CohortGroup`."""
enum CohortGroupsOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORDERING_ASC
  ORDERING_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
}

"""An input for mutations affecting `Cohort`"""
input CohortInput {
  cohortGroupId: BigInt
  colorRgb: String!
  description: String
  isVisible: Boolean
  location: String
  name: String!
  ordering: Int
  tenantId: BigInt
}

type CohortMembership {
  active: Boolean!

  """Reads a single `Cohort` that is related to this `CohortMembership`."""
  cohort: Cohort
  cohortId: BigInt!
  createdAt: Datetime!
  id: BigInt!

  """Reads a single `Person` that is related to this `CohortMembership`."""
  person: Person
  personId: BigInt!
  since: Datetime!
  status: RelationshipStatus!

  """Reads a single `Tenant` that is related to this `CohortMembership`."""
  tenant: Tenant
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime!
}

"""
A condition to be used against `CohortMembership` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CohortMembershipCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `cohortId` field."""
  cohortId: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `status` field."""
  status: RelationshipStatus

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `CohortMembership`"""
input CohortMembershipInput {
  active: Boolean
  cohortId: BigInt!
  createdAt: Datetime
  personId: BigInt!
  since: Datetime
  status: RelationshipStatus
  tenantId: BigInt
  until: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `CohortMembership`. Fields that are set will be updated.
"""
input CohortMembershipPatch {
  active: Boolean
  cohortId: BigInt
  createdAt: Datetime
  personId: BigInt
  since: Datetime
  status: RelationshipStatus
  tenantId: BigInt
  until: Datetime
  updatedAt: Datetime
}

"""Methods to use when ordering `CohortMembership`."""
enum CohortMembershipsOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  COHORT_ID_ASC
  COHORT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  STATUS_ASC
  STATUS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Cohort`. Fields that are set will be updated.
"""
input CohortPatch {
  cohortGroupId: BigInt
  colorRgb: String
  description: String
  isVisible: Boolean
  location: String
  name: String
  ordering: Int
  tenantId: BigInt
}

type CohortSubscription {
  """Reads a single `Account` that is related to this `CohortSubscription`."""
  account: Account
  accountId: BigInt!
  active: Boolean!

  """Reads a single `Cohort` that is related to this `CohortSubscription`."""
  cohort: Cohort
  cohortId: BigInt!
  createdAt: Datetime!
  id: BigInt!
  interval: Interval!

  """Reads and enables pagination through a set of `Payment`."""
  paymentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!]
  ): [Payment!]!
  price: Price!
  renewsOn: Datetime

  """Reads a single `Tenant` that is related to this `CohortSubscription`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `CohortSubscription` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CohortSubscriptionCondition {
  """Checks for equality with the object’s `accountId` field."""
  accountId: BigInt

  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `cohortId` field."""
  cohortId: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `interval` field."""
  interval: IntervalInput

  """Checks for equality with the object’s `price` field."""
  price: PriceInput

  """Checks for equality with the object’s `renewsOn` field."""
  renewsOn: Datetime

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `CohortSubscription`"""
input CohortSubscriptionInput {
  accountId: BigInt!
  active: Boolean
  cohortId: BigInt!
  createdAt: Datetime
  id: BigInt
  interval: IntervalInput
  price: PriceInput!
  renewsOn: Datetime
  tenantId: BigInt
  updatedAt: Datetime
}

"""Methods to use when ordering `CohortSubscription`."""
enum CohortSubscriptionsOrderBy {
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  COHORT_ID_ASC
  COHORT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  INTERVAL_ASC
  INTERVAL_DESC
  NATURAL
  PRICE_ASC
  PRICE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RENEWS_ON_ASC
  RENEWS_ON_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Methods to use when ordering `Cohort`."""
enum CohortsOrderBy {
  COHORT_GROUP_ID_ASC
  COHORT_GROUP_ID_DESC
  COLOR_RGB_ASC
  COLOR_RGB_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  IS_VISIBLE_ASC
  IS_VISIBLE_DESC
  LOCATION_ASC
  LOCATION_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORDERING_ASC
  ORDERING_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
}

"""All input for the `confirmMembershipApplication` mutation."""
input ConfirmMembershipApplicationInput {
  applicationId: BigInt

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `confirmMembershipApplication` mutation."""
type ConfirmMembershipApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Couple {
  active: Boolean!
  createdAt: Datetime!
  eventInstancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!]
  ): [EventInstance!]

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventRegistrationsConnection!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]!
  id: BigInt!

  """Reads a single `Person` that is related to this `Couple`."""
  man: Person
  manId: BigInt!
  since: Datetime!
  status: RelationshipStatus!
  until: Datetime
  updatedAt: Datetime!

  """Reads a single `Person` that is related to this `Couple`."""
  woman: Person
  womanId: BigInt!
}

"""
A condition to be used against `Couple` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CoupleCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `manId` field."""
  manId: BigInt

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `status` field."""
  status: RelationshipStatus

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `womanId` field."""
  womanId: BigInt
}

"""An input for mutations affecting `Couple`"""
input CoupleInput {
  active: Boolean
  createdAt: Datetime
  manId: BigInt!
  since: Datetime
  status: RelationshipStatus
  until: Datetime
  updatedAt: Datetime
  womanId: BigInt!
}

"""
Represents an update to a `Couple`. Fields that are set will be updated.
"""
input CouplePatch {
  active: Boolean
  createdAt: Datetime
  manId: BigInt
  since: Datetime
  status: RelationshipStatus
  until: Datetime
  updatedAt: Datetime
  womanId: BigInt
}

"""Methods to use when ordering `Couple`."""
enum CouplesOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  MAN_ID_ASC
  MAN_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  STATUS_ASC
  STATUS_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  WOMAN_ID_ASC
  WOMAN_ID_DESC
}

"""All input for the create `Aktuality` mutation."""
input CreateAktualityInput {
  """The `Aktuality` to be created by this mutation."""
  aktuality: AktualityInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Aktuality` mutation."""
type CreateAktualityPayload {
  """The `Aktuality` that was created by this mutation."""
  aktuality: Aktuality

  """An edge for our `Aktuality`. May be used by Relay 1."""
  aktualityEdge(
    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): AktualitiesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `GalerieFoto` that is related to this `Aktuality`."""
  galerieFotoByAtFotoMain: GalerieFoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Aktuality`."""
  tenant: Tenant

  """Reads a single `User` that is related to this `Aktuality`."""
  user: User
}

"""All input for the create `Attachment` mutation."""
input CreateAttachmentInput {
  """The `Attachment` to be created by this mutation."""
  attachment: AttachmentInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Attachment` mutation."""
type CreateAttachmentPayload {
  """The `Attachment` that was created by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Attachment`."""
  user: User
}

"""All input for the create `CohortGroup` mutation."""
input CreateCohortGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CohortGroup` to be created by this mutation."""
  cohortGroup: CohortGroupInput!
}

"""The output of our create `CohortGroup` mutation."""
type CreateCohortGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CohortGroup` that was created by this mutation."""
  cohortGroup: CohortGroup

  """An edge for our `CohortGroup`. May be used by Relay 1."""
  cohortGroupEdge(
    """The method to use when ordering `CohortGroup`."""
    orderBy: [CohortGroupsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CohortGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `CohortGroup`."""
  tenant: Tenant
}

"""All input for the create `Cohort` mutation."""
input CreateCohortInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Cohort` to be created by this mutation."""
  cohort: CohortInput!
}

"""All input for the create `CohortMembership` mutation."""
input CreateCohortMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CohortMembership` to be created by this mutation."""
  cohortMembership: CohortMembershipInput!
}

"""The output of our create `CohortMembership` mutation."""
type CreateCohortMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Cohort` that is related to this `CohortMembership`."""
  cohort: Cohort

  """The `CohortMembership` that was created by this mutation."""
  cohortMembership: CohortMembership

  """Reads a single `Person` that is related to this `CohortMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `CohortMembership`."""
  tenant: Tenant
}

"""The output of our create `Cohort` mutation."""
type CreateCohortPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Cohort` that was created by this mutation."""
  cohort: Cohort

  """Reads a single `CohortGroup` that is related to this `Cohort`."""
  cohortGroup: CohortGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Cohort`."""
  tenant: Tenant
}

"""All input for the create `Couple` mutation."""
input CreateCoupleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Couple` to be created by this mutation."""
  couple: CoupleInput!
}

"""The output of our create `Couple` mutation."""
type CreateCouplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Couple` that was created by this mutation."""
  couple: Couple

  """Reads a single `Person` that is related to this `Couple`."""
  man: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Person` that is related to this `Couple`."""
  woman: Person
}

"""All input for the `createCreditTransactionForPerson` mutation."""
input CreateCreditTransactionForPersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  vAmount: BigFloat
  vCurrency: String
  vDate: Datetime
  vDescription: String
  vPersonId: BigInt
}

"""The output of our `createCreditTransactionForPerson` mutation."""
type CreateCreditTransactionForPersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Payment` that is related to this `Transaction`."""
  payment: Payment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Transaction`."""
  tenant: Tenant
  transaction: Transaction

  """An edge for our `Transaction`. May be used by Relay 1."""
  transactionEdge(
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TransactionsEdge
}

"""All input for the create `Dokumenty` mutation."""
input CreateDokumentyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Dokumenty` to be created by this mutation."""
  dokumenty: DokumentyInput!
}

"""The output of our create `Dokumenty` mutation."""
type CreateDokumentyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dokumenty` that was created by this mutation."""
  dokumenty: Dokumenty

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Dokumenty`."""
  tenant: Tenant

  """Reads a single `User` that is related to this `Dokumenty`."""
  userByDKdo: User
}

"""All input for the create `EventExternalRegistration` mutation."""
input CreateEventExternalRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventExternalRegistration` to be created by this mutation."""
  eventExternalRegistration: EventExternalRegistrationInput!
}

"""The output of our create `EventExternalRegistration` mutation."""
type CreateEventExternalRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Event` that is related to this `EventExternalRegistration`.
  """
  event: Event

  """The `EventExternalRegistration` that was created by this mutation."""
  eventExternalRegistration: EventExternalRegistration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Tenant` that is related to this `EventExternalRegistration`.
  """
  tenant: Tenant

  """
  Reads a single `User` that is related to this `EventExternalRegistration`.
  """
  userByCreatedBy: User
}

"""All input for the `createEvent` mutation."""
input CreateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cohorts: [EventTargetCohortPatch]
  info: EventInput
  instances: [EventInstancePatch]
  registrations: [EventRegistrationPatch]
  trainers: [EventTrainerPatch]
}

"""The output of our `createEvent` mutation."""
type CreateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): EventsEdge
  info: Event

  """Reads a single `TenantLocation` that is related to this `Event`."""
  location: TenantLocation

  """Reads a single `Account` that is related to this `Event`."""
  paymentRecipient: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Event`."""
  tenant: Tenant
}

"""All input for the create `EventRegistration` mutation."""
input CreateEventRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventRegistration` to be created by this mutation."""
  eventRegistration: EventRegistrationInput!
}

"""The output of our create `EventRegistration` mutation."""
type CreateEventRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Couple` that is related to this `EventRegistration`."""
  couple: Couple

  """Reads a single `Event` that is related to this `EventRegistration`."""
  event: Event

  """The `EventRegistration` that was created by this mutation."""
  eventRegistration: EventRegistration

  """An edge for our `EventRegistration`. May be used by Relay 1."""
  eventRegistrationEdge(
    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): EventRegistrationsEdge

  """Reads a single `Person` that is related to this `EventRegistration`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EventTargetCohort` that is related to this `EventRegistration`.
  """
  targetCohort: EventTargetCohort

  """Reads a single `Tenant` that is related to this `EventRegistration`."""
  tenant: Tenant
}

"""All input for the create `FormResponse` mutation."""
input CreateFormResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormResponse` to be created by this mutation."""
  formResponse: FormResponseInput!
}

"""The output of our create `FormResponse` mutation."""
type CreateFormResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResponse` that was created by this mutation."""
  formResponse: FormResponse

  """An edge for our `FormResponse`. May be used by Relay 1."""
  formResponseEdge(
    """The method to use when ordering `FormResponse`."""
    orderBy: [FormResponsesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FormResponsesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `FormResponse`."""
  tenant: Tenant
}

"""All input for the create `Location` mutation."""
input CreateLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Location` to be created by this mutation."""
  location: LocationInput!
}

"""The output of our create `Location` mutation."""
type CreateLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Location` that was created by this mutation."""
  location: Location

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): LocationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `MembershipApplication` mutation."""
input CreateMembershipApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MembershipApplication` to be created by this mutation."""
  membershipApplication: MembershipApplicationInput!
}

"""The output of our create `MembershipApplication` mutation."""
type CreateMembershipApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MembershipApplication` that was created by this mutation."""
  membershipApplication: MembershipApplication

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Tenant` that is related to this `MembershipApplication`.
  """
  tenant: Tenant

  """Reads a single `User` that is related to this `MembershipApplication`."""
  user: User
}

"""All input for the `createMissingCohortSubscriptionPayments` mutation."""
input CreateMissingCohortSubscriptionPaymentsInput {
  c: CohortSubscriptionInput

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `createMissingCohortSubscriptionPayments` mutation."""
type CreateMissingCohortSubscriptionPaymentsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  payments: [Payment!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createNextCohortSubscriptionPayment` mutation."""
input CreateNextCohortSubscriptionPaymentInput {
  c: CohortSubscriptionInput

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `createNextCohortSubscriptionPayment` mutation."""
type CreateNextCohortSubscriptionPaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  payments: [Payment!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createPerson` mutation."""
input CreatePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  isAdmin: Boolean
  isMember: Boolean
  isTrainer: Boolean
  joinDate: Datetime
  p: PersonInput
  personId: BigInt
  sendInvitation: Boolean
}

"""All input for the create `PersonInvitation` mutation."""
input CreatePersonInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PersonInvitation` to be created by this mutation."""
  personInvitation: PersonInvitationInput!
}

"""The output of our create `PersonInvitation` mutation."""
type CreatePersonInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `PersonInvitation`."""
  person: Person

  """The `PersonInvitation` that was created by this mutation."""
  personInvitation: PersonInvitation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `PersonInvitation`."""
  tenant: Tenant
}

"""The output of our `createPerson` mutation."""
type CreatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  p: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Room` mutation."""
input CreateRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Room` to be created by this mutation."""
  room: RoomInput!
}

"""The output of our create `Room` mutation."""
type CreateRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Location` that is related to this `Room`."""
  location: Location

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Room` that was created by this mutation."""
  room: Room

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomsEdge
}

"""All input for the create `TenantAdministrator` mutation."""
input CreateTenantAdministratorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TenantAdministrator` to be created by this mutation."""
  tenantAdministrator: TenantAdministratorInput!
}

"""The output of our create `TenantAdministrator` mutation."""
type CreateTenantAdministratorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantAdministrator`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantAdministrator`."""
  tenant: Tenant

  """The `TenantAdministrator` that was created by this mutation."""
  tenantAdministrator: TenantAdministrator
}

"""All input for the create `TenantLocation` mutation."""
input CreateTenantLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TenantLocation` to be created by this mutation."""
  tenantLocation: TenantLocationInput!
}

"""The output of our create `TenantLocation` mutation."""
type CreateTenantLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantLocation`."""
  tenant: Tenant

  """The `TenantLocation` that was created by this mutation."""
  tenantLocation: TenantLocation
}

"""All input for the create `TenantMembership` mutation."""
input CreateTenantMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TenantMembership` to be created by this mutation."""
  tenantMembership: TenantMembershipInput!
}

"""The output of our create `TenantMembership` mutation."""
type CreateTenantMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantMembership`."""
  tenant: Tenant

  """The `TenantMembership` that was created by this mutation."""
  tenantMembership: TenantMembership
}

"""All input for the create `TenantTrainer` mutation."""
input CreateTenantTrainerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TenantTrainer` to be created by this mutation."""
  tenantTrainer: TenantTrainerInput!
}

"""The output of our create `TenantTrainer` mutation."""
type CreateTenantTrainerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantTrainer`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantTrainer`."""
  tenant: Tenant

  """The `TenantTrainer` that was created by this mutation."""
  tenantTrainer: TenantTrainer
}

"""All input for the create `Upozorneni` mutation."""
input CreateUpozorneniInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Upozorneni` to be created by this mutation."""
  upozorneni: UpozorneniInput!
}

"""The output of our create `Upozorneni` mutation."""
type CreateUpozorneniPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Upozorneni`."""
  tenant: Tenant

  """The `Upozorneni` that was created by this mutation."""
  upozorneni: Upozorneni

  """An edge for our `Upozorneni`. May be used by Relay 1."""
  upozorneniEdge(
    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UpozornenisEdge

  """Reads a single `User` that is related to this `Upozorneni`."""
  userByUpKdo: User
}

"""All input for the create `UserProxy` mutation."""
input CreateUserProxyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserProxy` to be created by this mutation."""
  userProxy: UserProxyInput!
}

"""The output of our create `UserProxy` mutation."""
type CreateUserProxyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `UserProxy`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserProxy`."""
  user: User

  """The `UserProxy` that was created by this mutation."""
  userProxy: UserProxy
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""A calendar date in YYYY-MM-DD format."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

"""A range of `Datetime`."""
type DatetimeRange {
  """The ending bound of our range."""
  end: DatetimeRangeBound

  """The starting bound of our range."""
  start: DatetimeRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type DatetimeRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Datetime!
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
input DatetimeRangeBoundInput {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Datetime!
}

"""A range of `Datetime`."""
input DatetimeRangeInput {
  """The ending bound of our range."""
  end: DatetimeRangeBoundInput

  """The starting bound of our range."""
  start: DatetimeRangeBoundInput
}

"""All input for the `deleteAktualityById` mutation."""
input DeleteAktualityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteAktuality` mutation."""
input DeleteAktualityInput {
  atId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our delete `Aktuality` mutation."""
type DeleteAktualityPayload {
  """The `Aktuality` that was deleted by this mutation."""
  aktuality: Aktuality

  """An edge for our `Aktuality`. May be used by Relay 1."""
  aktualityEdge(
    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): AktualitiesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `GalerieFoto` that is related to this `Aktuality`."""
  galerieFotoByAtFotoMain: GalerieFoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Aktuality`."""
  tenant: Tenant

  """Reads a single `User` that is related to this `Aktuality`."""
  user: User
}

"""All input for the `deleteAttachment` mutation."""
input DeleteAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  objectName: String!
}

"""The output of our delete `Attachment` mutation."""
type DeleteAttachmentPayload {
  """The `Attachment` that was deleted by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Attachment`."""
  user: User
}

"""All input for the `deleteCohortGroup` mutation."""
input DeleteCohortGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `CohortGroup` mutation."""
type DeleteCohortGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CohortGroup` that was deleted by this mutation."""
  cohortGroup: CohortGroup

  """An edge for our `CohortGroup`. May be used by Relay 1."""
  cohortGroupEdge(
    """The method to use when ordering `CohortGroup`."""
    orderBy: [CohortGroupsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CohortGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `CohortGroup`."""
  tenant: Tenant
}

"""All input for the `deleteCohort` mutation."""
input DeleteCohortInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteCohortMembership` mutation."""
input DeleteCohortMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `CohortMembership` mutation."""
type DeleteCohortMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Cohort` that is related to this `CohortMembership`."""
  cohort: Cohort

  """The `CohortMembership` that was deleted by this mutation."""
  cohortMembership: CohortMembership

  """Reads a single `Person` that is related to this `CohortMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `CohortMembership`."""
  tenant: Tenant
}

"""The output of our delete `Cohort` mutation."""
type DeleteCohortPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Cohort` that was deleted by this mutation."""
  cohort: Cohort

  """Reads a single `CohortGroup` that is related to this `Cohort`."""
  cohortGroup: CohortGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Cohort`."""
  tenant: Tenant
}

"""All input for the `deleteCouple` mutation."""
input DeleteCoupleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Couple` mutation."""
type DeleteCouplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Couple` that was deleted by this mutation."""
  couple: Couple

  """Reads a single `Person` that is related to this `Couple`."""
  man: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Person` that is related to this `Couple`."""
  woman: Person
}

"""All input for the `deleteDokumentyById` mutation."""
input DeleteDokumentyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteDokumenty` mutation."""
input DeleteDokumentyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dId: BigInt!
}

"""The output of our delete `Dokumenty` mutation."""
type DeleteDokumentyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dokumenty` that was deleted by this mutation."""
  dokumenty: Dokumenty

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Dokumenty`."""
  tenant: Tenant

  """Reads a single `User` that is related to this `Dokumenty`."""
  userByDKdo: User
}

"""All input for the `deleteEventExternalRegistration` mutation."""
input DeleteEventExternalRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `EventExternalRegistration` mutation."""
type DeleteEventExternalRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Event` that is related to this `EventExternalRegistration`.
  """
  event: Event

  """The `EventExternalRegistration` that was deleted by this mutation."""
  eventExternalRegistration: EventExternalRegistration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Tenant` that is related to this `EventExternalRegistration`.
  """
  tenant: Tenant

  """
  Reads a single `User` that is related to this `EventExternalRegistration`.
  """
  userByCreatedBy: User
}

"""All input for the `deleteEvent` mutation."""
input DeleteEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteEventInstance` mutation."""
input DeleteEventInstanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our `deleteEventInstance` mutation."""
type DeleteEventInstancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deleted: EventInstance

  """Reads a single `Event` that is related to this `EventInstance`."""
  event: Event

  """An edge for our `EventInstance`. May be used by Relay 1."""
  eventInstanceEdge(
    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): EventInstancesEdge

  """
  Reads a single `TenantLocation` that is related to this `EventInstance`.
  """
  location: TenantLocation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `EventInstance`."""
  tenant: Tenant
}

"""The output of our delete `Event` mutation."""
type DeleteEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was deleted by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """Reads a single `TenantLocation` that is related to this `Event`."""
  location: TenantLocation

  """Reads a single `Account` that is related to this `Event`."""
  paymentRecipient: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Event`."""
  tenant: Tenant
}

"""
All input for the `deleteEventRegistrationByEventIdAndPersonIdAndCoupleId` mutation.
"""
input DeleteEventRegistrationByEventIdAndPersonIdAndCoupleIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  coupleId: BigInt!
  eventId: BigInt!
  personId: BigInt!
}

"""All input for the `deleteEventRegistration` mutation."""
input DeleteEventRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `EventRegistration` mutation."""
type DeleteEventRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Couple` that is related to this `EventRegistration`."""
  couple: Couple

  """Reads a single `Event` that is related to this `EventRegistration`."""
  event: Event

  """The `EventRegistration` that was deleted by this mutation."""
  eventRegistration: EventRegistration

  """An edge for our `EventRegistration`. May be used by Relay 1."""
  eventRegistrationEdge(
    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): EventRegistrationsEdge

  """Reads a single `Person` that is related to this `EventRegistration`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EventTargetCohort` that is related to this `EventRegistration`.
  """
  targetCohort: EventTargetCohort

  """Reads a single `Tenant` that is related to this `EventRegistration`."""
  tenant: Tenant
}

"""All input for the `deleteLocation` mutation."""
input DeleteLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Location` mutation."""
type DeleteLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Location` that was deleted by this mutation."""
  location: Location

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): LocationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMembershipApplication` mutation."""
input DeleteMembershipApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `MembershipApplication` mutation."""
type DeleteMembershipApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MembershipApplication` that was deleted by this mutation."""
  membershipApplication: MembershipApplication

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Tenant` that is related to this `MembershipApplication`.
  """
  tenant: Tenant

  """Reads a single `User` that is related to this `MembershipApplication`."""
  user: User
}

"""All input for the `deletePayment` mutation."""
input DeletePaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Payment` mutation."""
type DeletePaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `CohortSubscription` that is related to this `Payment`."""
  cohortSubscription: CohortSubscription

  """Reads a single `EventInstance` that is related to this `Payment`."""
  eventInstance: EventInstance

  """Reads a single `EventRegistration` that is related to this `Payment`."""
  eventRegistration: EventRegistration

  """The `Payment` that was deleted by this mutation."""
  payment: Payment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Payment`."""
  tenant: Tenant
}

"""All input for the `deletePerson` mutation."""
input DeletePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deletePersonInvitationByAccessToken` mutation."""
input DeletePersonInvitationByAccessTokenInput {
  accessToken: UUID!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the `deletePersonInvitation` mutation."""
input DeletePersonInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `PersonInvitation` mutation."""
type DeletePersonInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `PersonInvitation`."""
  person: Person

  """The `PersonInvitation` that was deleted by this mutation."""
  personInvitation: PersonInvitation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `PersonInvitation`."""
  tenant: Tenant
}

"""The output of our delete `Person` mutation."""
type DeletePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was deleted by this mutation."""
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteRoom` mutation."""
input DeleteRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Room` mutation."""
type DeleteRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Location` that is related to this `Room`."""
  location: Location

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Room` that was deleted by this mutation."""
  room: Room

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomsEdge
}

"""All input for the `deleteTenantAdministrator` mutation."""
input DeleteTenantAdministratorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `TenantAdministrator` mutation."""
type DeleteTenantAdministratorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantAdministrator`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantAdministrator`."""
  tenant: Tenant

  """The `TenantAdministrator` that was deleted by this mutation."""
  tenantAdministrator: TenantAdministrator
}

"""All input for the `deleteTenantLocation` mutation."""
input DeleteTenantLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `TenantLocation` mutation."""
type DeleteTenantLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantLocation`."""
  tenant: Tenant

  """The `TenantLocation` that was deleted by this mutation."""
  tenantLocation: TenantLocation
}

"""All input for the `deleteTenantMembership` mutation."""
input DeleteTenantMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `TenantMembership` mutation."""
type DeleteTenantMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantMembership`."""
  tenant: Tenant

  """The `TenantMembership` that was deleted by this mutation."""
  tenantMembership: TenantMembership
}

"""All input for the `deleteTenantTrainer` mutation."""
input DeleteTenantTrainerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `TenantTrainer` mutation."""
type DeleteTenantTrainerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantTrainer`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantTrainer`."""
  tenant: Tenant

  """The `TenantTrainer` that was deleted by this mutation."""
  tenantTrainer: TenantTrainer
}

"""All input for the `deleteTransaction` mutation."""
input DeleteTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Transaction` mutation."""
type DeleteTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Payment` that is related to this `Transaction`."""
  payment: Payment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Transaction`."""
  tenant: Tenant

  """The `Transaction` that was deleted by this mutation."""
  transaction: Transaction

  """An edge for our `Transaction`. May be used by Relay 1."""
  transactionEdge(
    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TransactionsEdge
}

"""All input for the `deleteUpozorneniById` mutation."""
input DeleteUpozorneniByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteUpozorneni` mutation."""
input DeleteUpozorneniInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  upId: BigInt!
}

"""The output of our delete `Upozorneni` mutation."""
type DeleteUpozorneniPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Upozorneni`."""
  tenant: Tenant

  """The `Upozorneni` that was deleted by this mutation."""
  upozorneni: Upozorneni

  """An edge for our `Upozorneni`. May be used by Relay 1."""
  upozorneniEdge(
    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UpozornenisEdge

  """Reads a single `User` that is related to this `Upozorneni`."""
  userByUpKdo: User
}

"""All input for the `deleteUserProxy` mutation."""
input DeleteUserProxyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `UserProxy` mutation."""
type DeleteUserProxyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `UserProxy`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserProxy`."""
  user: User

  """The `UserProxy` that was deleted by this mutation."""
  userProxy: UserProxy
}

"""Methods to use when ordering `Dokumenty`."""
enum DokumentiesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  D_FILENAME_ASC
  D_FILENAME_DESC
  D_ID_ASC
  D_ID_DESC
  D_KATEGORIE_ASC
  D_KATEGORIE_DESC
  D_KDO_ASC
  D_KDO_DESC
  D_NAME_ASC
  D_NAME_DESC
  D_PATH_ASC
  D_PATH_DESC
  D_TIMESTAMP_ASC
  D_TIMESTAMP_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type Dokumenty {
  createdAt: Datetime
  dFilename: String!
  dId: BigInt!
  dKategorie: Int!
  dKdo: BigInt!
  dName: String!
  dPath: String!
  dTimestamp: Datetime
  id: BigInt!

  """Reads a single `Tenant` that is related to this `Dokumenty`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime

  """Reads a single `User` that is related to this `Dokumenty`."""
  userByDKdo: User
}

"""
A condition to be used against `Dokumenty` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DokumentyCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `dFilename` field."""
  dFilename: String

  """Checks for equality with the object’s `dId` field."""
  dId: BigInt

  """Checks for equality with the object’s `dKategorie` field."""
  dKategorie: Int

  """Checks for equality with the object’s `dKdo` field."""
  dKdo: BigInt

  """Checks for equality with the object’s `dName` field."""
  dName: String

  """Checks for equality with the object’s `dPath` field."""
  dPath: String

  """Checks for equality with the object’s `dTimestamp` field."""
  dTimestamp: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Dokumenty`"""
input DokumentyInput {
  createdAt: Datetime
  dFilename: String!
  dId: BigInt
  dKategorie: Int!
  dKdo: BigInt!
  dName: String!
  dPath: String!
  dTimestamp: Datetime
  id: BigInt
  tenantId: BigInt
  updatedAt: Datetime
}

"""
Represents an update to a `Dokumenty`. Fields that are set will be updated.
"""
input DokumentyPatch {
  createdAt: Datetime
  dFilename: String
  dId: BigInt
  dKategorie: Int
  dKdo: BigInt
  dName: String
  dPath: String
  dTimestamp: Datetime
  id: BigInt
  tenantId: BigInt
  updatedAt: Datetime
}

"""All input for the `editRegistration` mutation."""
input EditRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  note: String!
  registrationId: BigInt!
}

"""The output of our `editRegistration` mutation."""
type EditRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Couple` that is related to this `EventRegistration`."""
  couple: Couple

  """Reads a single `Event` that is related to this `EventRegistration`."""
  event: Event
  eventRegistration: EventRegistration

  """An edge for our `EventRegistration`. May be used by Relay 1."""
  eventRegistrationEdge(
    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): EventRegistrationsEdge

  """Reads a single `Person` that is related to this `EventRegistration`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EventTargetCohort` that is related to this `EventRegistration`.
  """
  targetCohort: EventTargetCohort

  """Reads a single `Tenant` that is related to this `EventRegistration`."""
  tenant: Tenant
}

type Event {
  capacity: Int!
  createdAt: Datetime
  description: String!
  descriptionMember: String!
  enableNotes: Boolean!

  """
  Reads and enables pagination through a set of `EventExternalRegistration`.
  """
  eventExternalRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventExternalRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventExternalRegistration`."""
    orderBy: [EventExternalRegistrationsOrderBy!]
  ): [EventExternalRegistration!]!

  """Reads and enables pagination through a set of `EventInstance`."""
  eventInstancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!]
  ): [EventInstance!]!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventRegistrationsConnection!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]!

  """Reads and enables pagination through a set of `EventTargetCohort`."""
  eventTargetCohortsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTargetCohortCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTargetCohort`."""
    orderBy: [EventTargetCohortsOrderBy!]
  ): [EventTargetCohort!]!

  """Reads and enables pagination through a set of `EventTrainer`."""
  eventTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTrainer`."""
    orderBy: [EventTrainersOrderBy!]
  ): [EventTrainer!]!
  filesLegacy: String!
  guestPrice: Price
  id: BigInt!
  isLocked: Boolean!
  isPaidByTenant: Boolean!
  isPublic: Boolean!
  isRegistrationOpen: Boolean
  isVisible: Boolean!

  """Reads a single `TenantLocation` that is related to this `Event`."""
  location: TenantLocation
  locationId: BigInt
  locationText: String!
  memberPrice: Price
  myRegistrationsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [EventRegistration!]
  name: String!

  """Reads a single `Account` that is related to this `Event`."""
  paymentRecipient: Account
  paymentRecipientId: BigInt
  paymentType: EventPaymentType!
  registrantsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Person!]
  remainingLessons: Int
  remainingPersonSpots: Int
  since: Date
  summary: String!

  """Reads a single `Tenant` that is related to this `Event`."""
  tenant: Tenant
  tenantId: BigInt!
  titleImageLegacy: String
  type: EventType!
  until: Date
  updatedAt: Datetime
}

type EventAttendance {
  createdAt: Datetime!
  id: BigInt!

  """
  Reads a single `EventInstance` that is related to this `EventAttendance`.
  """
  instance: EventInstance
  instanceId: BigInt!
  note: String

  """Reads a single `Person` that is related to this `EventAttendance`."""
  person: Person
  personId: BigInt!

  """
  Reads a single `EventRegistration` that is related to this `EventAttendance`.
  """
  registration: EventRegistration
  registrationId: BigInt!
  status: AttendanceType!

  """Reads a single `Tenant` that is related to this `EventAttendance`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventAttendance` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventAttendanceCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `instanceId` field."""
  instanceId: BigInt

  """Checks for equality with the object’s `note` field."""
  note: String

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `registrationId` field."""
  registrationId: BigInt

  """Checks for equality with the object’s `status` field."""
  status: AttendanceType

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A `EventAttendance` edge in the connection."""
type EventAttendancesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventAttendance` at the end of the edge."""
  node: EventAttendance!
}

"""Methods to use when ordering `EventAttendance`."""
enum EventAttendancesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  INSTANCE_ID_ASC
  INSTANCE_ID_DESC
  NATURAL
  NOTE_ASC
  NOTE_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REGISTRATION_ID_ASC
  REGISTRATION_ID_DESC
  STATUS_ASC
  STATUS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventCondition {
  """Checks for equality with the object’s `capacity` field."""
  capacity: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `descriptionMember` field."""
  descriptionMember: String

  """Checks for equality with the object’s `enableNotes` field."""
  enableNotes: Boolean

  """Checks for equality with the object’s `filesLegacy` field."""
  filesLegacy: String

  """Checks for equality with the object’s `guestPrice` field."""
  guestPrice: PriceInput

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isLocked` field."""
  isLocked: Boolean

  """Checks for equality with the object’s `isPaidByTenant` field."""
  isPaidByTenant: Boolean

  """Checks for equality with the object’s `isPublic` field."""
  isPublic: Boolean

  """Checks for equality with the object’s `isVisible` field."""
  isVisible: Boolean

  """Checks for equality with the object’s `locationId` field."""
  locationId: BigInt

  """Checks for equality with the object’s `locationText` field."""
  locationText: String

  """Checks for equality with the object’s `memberPrice` field."""
  memberPrice: PriceInput

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `paymentRecipientId` field."""
  paymentRecipientId: BigInt

  """Checks for equality with the object’s `paymentType` field."""
  paymentType: EventPaymentType

  """Checks for equality with the object’s `since` field."""
  since: Date

  """Checks for equality with the object’s `summary` field."""
  summary: String

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `titleImageLegacy` field."""
  titleImageLegacy: String

  """Checks for equality with the object’s `type` field."""
  type: EventType

  """Checks for equality with the object’s `until` field."""
  until: Date

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

type EventExternalRegistration {
  birthDate: Date
  createdAt: Datetime!
  createdBy: BigInt
  email: String!

  """
  Reads a single `Event` that is related to this `EventExternalRegistration`.
  """
  event: Event
  eventId: BigInt!
  firstName: String!
  id: BigInt!
  lastName: String!
  nationality: String!
  note: String
  phone: String!
  prefixTitle: String!
  suffixTitle: String!
  taxIdentificationNumber: String

  """
  Reads a single `Tenant` that is related to this `EventExternalRegistration`.
  """
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!

  """
  Reads a single `User` that is related to this `EventExternalRegistration`.
  """
  userByCreatedBy: User
}

"""
A condition to be used against `EventExternalRegistration` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input EventExternalRegistrationCondition {
  """Checks for equality with the object’s `birthDate` field."""
  birthDate: Date

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: BigInt

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `eventId` field."""
  eventId: BigInt

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `nationality` field."""
  nationality: String

  """Checks for equality with the object’s `note` field."""
  note: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `prefixTitle` field."""
  prefixTitle: String

  """Checks for equality with the object’s `suffixTitle` field."""
  suffixTitle: String

  """Checks for equality with the object’s `taxIdentificationNumber` field."""
  taxIdentificationNumber: String

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `EventExternalRegistration`"""
input EventExternalRegistrationInput {
  birthDate: Date
  createdAt: Datetime
  createdBy: BigInt
  email: String!
  eventId: BigInt!
  firstName: String!
  lastName: String!
  nationality: String!
  note: String
  phone: String!
  prefixTitle: String
  suffixTitle: String
  taxIdentificationNumber: String
  tenantId: BigInt
  updatedAt: Datetime
}

"""Methods to use when ordering `EventExternalRegistration`."""
enum EventExternalRegistrationsOrderBy {
  BIRTH_DATE_ASC
  BIRTH_DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  EMAIL_ASC
  EMAIL_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATIONALITY_ASC
  NATIONALITY_DESC
  NATURAL
  NOTE_ASC
  NOTE_DESC
  PHONE_ASC
  PHONE_DESC
  PREFIX_TITLE_ASC
  PREFIX_TITLE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUFFIX_TITLE_ASC
  SUFFIX_TITLE_DESC
  TAX_IDENTIFICATION_NUMBER_ASC
  TAX_IDENTIFICATION_NUMBER_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""An input for mutations affecting `Event`"""
input EventInput {
  capacity: Int
  createdAt: Datetime
  description: String!
  descriptionMember: String
  enableNotes: Boolean
  filesLegacy: String
  guestPrice: PriceInput
  id: BigInt
  isLocked: Boolean
  isPaidByTenant: Boolean
  isPublic: Boolean
  isVisible: Boolean
  locationId: BigInt
  locationText: String!
  memberPrice: PriceInput
  name: String!
  paymentRecipientId: BigInt
  paymentType: EventPaymentType
  since: Date
  summary: String
  tenantId: BigInt
  titleImageLegacy: String
  type: EventType
  until: Date
  updatedAt: Datetime
}

type EventInstance {
  approxPriceList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [EventInstanceApproxPriceRecord!]
  attendanceSummaryList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [EventInstanceAttendanceSummaryRecord!]
  createdAt: Datetime!

  """Reads a single `Event` that is related to this `EventInstance`."""
  event: Event

  """Reads and enables pagination through a set of `EventAttendance`."""
  eventAttendancesByInstanceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventAttendanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventAttendance`."""
    orderBy: [EventAttendancesOrderBy!]
  ): [EventAttendance!]!
  eventId: BigInt!

  """Reads and enables pagination through a set of `EventInstanceTrainer`."""
  eventInstanceTrainersByInstanceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstanceTrainer`."""
    orderBy: [EventInstanceTrainersOrderBy!]
  ): [EventInstanceTrainer!]!
  id: BigInt!
  isCancelled: Boolean

  """
  Reads a single `TenantLocation` that is related to this `EventInstance`.
  """
  location: TenantLocation
  locationId: BigInt

  """Reads and enables pagination through a set of `Payment`."""
  paymentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!]
  ): [Payment!]!
  range: DatetimeRange!
  since: Datetime!

  """Reads a single `Tenant` that is related to this `EventInstance`."""
  tenant: Tenant
  tenantId: BigInt!
  until: Datetime!
  updatedAt: Datetime!
}

type EventInstanceApproxPriceRecord {
  amount: BigFloat
  currency: String
}

type EventInstanceAttendanceSummaryRecord {
  count: Int
  status: AttendanceType
}

"""
A condition to be used against `EventInstance` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventInstanceCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isCancelled` field."""
  isCancelled: Boolean

  """Checks for equality with the object’s `locationId` field."""
  locationId: BigInt

  """Checks for equality with the object’s `range` field."""
  range: DatetimeRangeInput

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
Represents an update to a `EventInstance`. Fields that are set will be updated.
"""
input EventInstancePatch {
  createdAt: Datetime
  eventId: BigInt
  id: BigInt
  isCancelled: Boolean
  locationId: BigInt
  range: DatetimeRangeInput
  since: Datetime
  tenantId: BigInt
  until: Datetime
  updatedAt: Datetime
}

type EventInstanceTrainer {
  createdAt: Datetime!
  id: BigInt!

  """
  Reads a single `EventInstance` that is related to this `EventInstanceTrainer`.
  """
  instance: EventInstance
  instanceId: BigInt!
  lessonPrice: Price
  name: String

  """
  Reads a single `Person` that is related to this `EventInstanceTrainer`.
  """
  person: Person
  personId: BigInt!

  """
  Reads a single `Tenant` that is related to this `EventInstanceTrainer`.
  """
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventInstanceTrainer` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EventInstanceTrainerCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `instanceId` field."""
  instanceId: BigInt

  """Checks for equality with the object’s `lessonPrice` field."""
  lessonPrice: PriceInput

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""Methods to use when ordering `EventInstanceTrainer`."""
enum EventInstanceTrainersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  INSTANCE_ID_ASC
  INSTANCE_ID_DESC
  LESSON_PRICE_ASC
  LESSON_PRICE_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A `EventInstance` edge in the connection."""
type EventInstancesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventInstance` at the end of the edge."""
  node: EventInstance!
}

"""Methods to use when ordering `EventInstance`."""
enum EventInstancesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  ID_ASC
  ID_DESC
  IS_CANCELLED_ASC
  IS_CANCELLED_DESC
  LOCATION_ID_ASC
  LOCATION_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type EventLessonDemand {
  createdAt: Datetime!
  id: BigInt!
  lessonCount: Int!

  """
  Reads a single `EventRegistration` that is related to this `EventLessonDemand`.
  """
  registration: EventRegistration
  registrationId: BigInt!

  """Reads a single `Tenant` that is related to this `EventLessonDemand`."""
  tenant: Tenant
  tenantId: BigInt!

  """
  Reads a single `EventTrainer` that is related to this `EventLessonDemand`.
  """
  trainer: EventTrainer
  trainerId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventLessonDemand` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventLessonDemandCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `lessonCount` field."""
  lessonCount: Int

  """Checks for equality with the object’s `registrationId` field."""
  registrationId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `trainerId` field."""
  trainerId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `EventLessonDemand`"""
input EventLessonDemandInput {
  createdAt: Datetime
  lessonCount: Int!
  registrationId: BigInt
  tenantId: BigInt
  trainerId: BigInt!
  updatedAt: Datetime
}

"""
Represents an update to a `EventLessonDemand`. Fields that are set will be updated.
"""
input EventLessonDemandPatch {
  createdAt: Datetime
  lessonCount: Int
  registrationId: BigInt
  tenantId: BigInt
  trainerId: BigInt
  updatedAt: Datetime
}

"""A `EventLessonDemand` edge in the connection."""
type EventLessonDemandsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventLessonDemand` at the end of the edge."""
  node: EventLessonDemand!
}

"""Methods to use when ordering `EventLessonDemand`."""
enum EventLessonDemandsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  LESSON_COUNT_ASC
  LESSON_COUNT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REGISTRATION_ID_ASC
  REGISTRATION_ID_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  TRAINER_ID_ASC
  TRAINER_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Event`. Fields that are set will be updated.
"""
input EventPatch {
  capacity: Int
  createdAt: Datetime
  description: String
  descriptionMember: String
  enableNotes: Boolean
  filesLegacy: String
  guestPrice: PriceInput
  id: BigInt
  isLocked: Boolean
  isPaidByTenant: Boolean
  isPublic: Boolean
  isVisible: Boolean
  locationId: BigInt
  locationText: String
  memberPrice: PriceInput
  name: String
  paymentRecipientId: BigInt
  paymentType: EventPaymentType
  since: Date
  summary: String
  tenantId: BigInt
  titleImageLegacy: String
  type: EventType
  until: Date
  updatedAt: Datetime
}

enum EventPaymentType {
  AFTER_INSTANCE
  NONE
  UPFRONT
}

type EventRegistration {
  """Reads a single `Couple` that is related to this `EventRegistration`."""
  couple: Couple
  coupleId: BigInt
  createdAt: Datetime!

  """Reads a single `Event` that is related to this `EventRegistration`."""
  event: Event

  """Reads and enables pagination through a set of `EventAttendance`."""
  eventAttendancesByRegistrationIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventAttendanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventAttendance`."""
    orderBy: [EventAttendancesOrderBy!]
  ): [EventAttendance!]!
  eventId: BigInt!

  """Reads and enables pagination through a set of `EventLessonDemand`."""
  eventLessonDemandsByRegistrationIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventLessonDemandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventLessonDemand`."""
    orderBy: [EventLessonDemandsOrderBy!]
  ): [EventLessonDemand!]!
  id: BigInt!
  note: String

  """Reads and enables pagination through a set of `Payment`."""
  paymentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!]
  ): [Payment!]!

  """Reads a single `Person` that is related to this `EventRegistration`."""
  person: Person
  personId: BigInt

  """
  Reads a single `EventTargetCohort` that is related to this `EventRegistration`.
  """
  targetCohort: EventTargetCohort
  targetCohortId: BigInt

  """Reads a single `Tenant` that is related to this `EventRegistration`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventRegistration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventRegistrationCondition {
  """Checks for equality with the object’s `coupleId` field."""
  coupleId: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `note` field."""
  note: String

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `targetCohortId` field."""
  targetCohortId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `EventRegistration`"""
input EventRegistrationInput {
  coupleId: BigInt
  createdAt: Datetime
  eventId: BigInt!
  id: BigInt
  note: String
  personId: BigInt
  targetCohortId: BigInt
  tenantId: BigInt
  updatedAt: Datetime
}

"""
Represents an update to a `EventRegistration`. Fields that are set will be updated.
"""
input EventRegistrationPatch {
  coupleId: BigInt
  createdAt: Datetime
  eventId: BigInt
  id: BigInt
  note: String
  personId: BigInt
  targetCohortId: BigInt
  tenantId: BigInt
  updatedAt: Datetime
}

"""A connection to a list of `EventRegistration` values."""
type EventRegistrationsConnection {
  """
  A list of edges which contains the `EventRegistration` and cursor to aid in pagination.
  """
  edges: [EventRegistrationsEdge!]!

  """A list of `EventRegistration` objects."""
  nodes: [EventRegistration!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EventRegistration` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EventRegistration` edge in the connection."""
type EventRegistrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventRegistration` at the end of the edge."""
  node: EventRegistration!
}

"""Methods to use when ordering `EventRegistration`."""
enum EventRegistrationsOrderBy {
  COUPLE_ID_ASC
  COUPLE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NOTE_ASC
  NOTE_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TARGET_COHORT_ID_ASC
  TARGET_COHORT_ID_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type EventTargetCohort {
  """Reads a single `Cohort` that is related to this `EventTargetCohort`."""
  cohort: Cohort
  cohortId: BigInt!
  createdAt: Datetime!

  """Reads a single `Event` that is related to this `EventTargetCohort`."""
  event: Event
  eventId: BigInt!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrationsByTargetCohortId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventRegistrationsConnection!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrationsByTargetCohortIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]!
  id: BigInt!

  """Reads a single `Tenant` that is related to this `EventTargetCohort`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventTargetCohort` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventTargetCohortCondition {
  """Checks for equality with the object’s `cohortId` field."""
  cohortId: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
Represents an update to a `EventTargetCohort`. Fields that are set will be updated.
"""
input EventTargetCohortPatch {
  cohortId: BigInt
  createdAt: Datetime
  eventId: BigInt
  id: BigInt
  tenantId: BigInt
  updatedAt: Datetime
}

"""Methods to use when ordering `EventTargetCohort`."""
enum EventTargetCohortsOrderBy {
  COHORT_ID_ASC
  COHORT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type EventTrainer {
  createdAt: Datetime!

  """Reads a single `Event` that is related to this `EventTrainer`."""
  event: Event
  eventId: BigInt!

  """Reads and enables pagination through a set of `EventLessonDemand`."""
  eventLessonDemandsByTrainerIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventLessonDemandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventLessonDemand`."""
    orderBy: [EventLessonDemandsOrderBy!]
  ): [EventLessonDemand!]!
  id: BigInt!
  lessonPrice: Price
  lessonsOffered: Int!
  lessonsRemaining: Int
  name: String

  """Reads a single `Person` that is related to this `EventTrainer`."""
  person: Person
  personId: BigInt!

  """Reads a single `Tenant` that is related to this `EventTrainer`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `EventTrainer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventTrainerCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `lessonPrice` field."""
  lessonPrice: PriceInput

  """Checks for equality with the object’s `lessonsOffered` field."""
  lessonsOffered: Int

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
Represents an update to a `EventTrainer`. Fields that are set will be updated.
"""
input EventTrainerPatch {
  createdAt: Datetime
  eventId: BigInt
  id: BigInt
  lessonPrice: PriceInput
  lessonsOffered: Int
  personId: BigInt
  tenantId: BigInt
  updatedAt: Datetime
}

"""Methods to use when ordering `EventTrainer`."""
enum EventTrainersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  ID_ASC
  ID_DESC
  LESSONS_OFFERED_ASC
  LESSONS_OFFERED_DESC
  LESSON_PRICE_ASC
  LESSON_PRICE_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum EventType {
  CAMP
  GROUP
  HOLIDAY
  LESSON
  RESERVATION
}

"""A connection to a list of `Event` values."""
type EventsConnection {
  """
  A list of edges which contains the `Event` and cursor to aid in pagination.
  """
  edges: [EventsEdge!]!

  """A list of `Event` objects."""
  nodes: [Event!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Event` you could get from the connection."""
  totalCount: Int!
}

"""A `Event` edge in the connection."""
type EventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Event` at the end of the edge."""
  node: Event!
}

"""Methods to use when ordering `Event`."""
enum EventsOrderBy {
  CAPACITY_ASC
  CAPACITY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  DESCRIPTION_MEMBER_ASC
  DESCRIPTION_MEMBER_DESC
  ENABLE_NOTES_ASC
  ENABLE_NOTES_DESC
  FILES_LEGACY_ASC
  FILES_LEGACY_DESC
  GUEST_PRICE_ASC
  GUEST_PRICE_DESC
  ID_ASC
  ID_DESC
  IS_LOCKED_ASC
  IS_LOCKED_DESC
  IS_PAID_BY_TENANT_ASC
  IS_PAID_BY_TENANT_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  IS_VISIBLE_ASC
  IS_VISIBLE_DESC
  LOCATION_ID_ASC
  LOCATION_ID_DESC
  LOCATION_TEXT_ASC
  LOCATION_TEXT_DESC
  MEMBER_PRICE_ASC
  MEMBER_PRICE_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PAYMENT_RECIPIENT_ID_ASC
  PAYMENT_RECIPIENT_ID_DESC
  PAYMENT_TYPE_ASC
  PAYMENT_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  SUMMARY_ASC
  SUMMARY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  TITLE_IMAGE_LEGACY_ASC
  TITLE_IMAGE_LEGACY_DESC
  TYPE_ASC
  TYPE_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type FormResponse {
  createdAt: Datetime!
  data: JSON!
  id: BigInt!

  """Reads a single `Tenant` that is related to this `FormResponse`."""
  tenant: Tenant
  tenantId: BigInt!
  type: String!
  updatedAt: Datetime!
  url: String!
}

"""
A condition to be used against `FormResponse` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FormResponseCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `data` field."""
  data: JSON

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `url` field."""
  url: String
}

"""An input for mutations affecting `FormResponse`"""
input FormResponseInput {
  createdAt: Datetime
  data: JSON!
  id: BigInt
  tenantId: BigInt
  type: String!
  updatedAt: Datetime
  url: String!
}

"""A connection to a list of `FormResponse` values."""
type FormResponsesConnection {
  """
  A list of edges which contains the `FormResponse` and cursor to aid in pagination.
  """
  edges: [FormResponsesEdge!]!

  """A list of `FormResponse` objects."""
  nodes: [FormResponse!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormResponse` you could get from the connection."""
  totalCount: Int!
}

"""A `FormResponse` edge in the connection."""
type FormResponsesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormResponse` at the end of the edge."""
  node: FormResponse!
}

"""Methods to use when ordering `FormResponse`."""
enum FormResponsesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DATA_ASC
  DATA_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  URL_ASC
  URL_DESC
}

type GalerieDir {
  """Reads and enables pagination through a set of `GalerieFoto`."""
  galerieFotosByGfIdRodic(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieFotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosConnection!
  gdHidden: Boolean!
  gdId: BigInt!
  gdIdRodic: BigInt!
  gdLevel: Int!
  gdName: String!
  gdPath: String!
  id: BigInt!

  """Reads a single `Tenant` that is related to this `GalerieDir`."""
  tenant: Tenant
  tenantId: BigInt!
}

"""
A condition to be used against `GalerieDir` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GalerieDirCondition {
  """Checks for equality with the object’s `gdHidden` field."""
  gdHidden: Boolean

  """Checks for equality with the object’s `gdId` field."""
  gdId: BigInt

  """Checks for equality with the object’s `gdIdRodic` field."""
  gdIdRodic: BigInt

  """Checks for equality with the object’s `gdLevel` field."""
  gdLevel: Int

  """Checks for equality with the object’s `gdName` field."""
  gdName: String

  """Checks for equality with the object’s `gdPath` field."""
  gdPath: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

"""A connection to a list of `GalerieDir` values."""
type GalerieDirsConnection {
  """
  A list of edges which contains the `GalerieDir` and cursor to aid in pagination.
  """
  edges: [GalerieDirsEdge!]!

  """A list of `GalerieDir` objects."""
  nodes: [GalerieDir!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GalerieDir` you could get from the connection."""
  totalCount: Int!
}

"""A `GalerieDir` edge in the connection."""
type GalerieDirsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GalerieDir` at the end of the edge."""
  node: GalerieDir!
}

"""Methods to use when ordering `GalerieDir`."""
enum GalerieDirsOrderBy {
  GD_HIDDEN_ASC
  GD_HIDDEN_DESC
  GD_ID_ASC
  GD_ID_DESC
  GD_ID_RODIC_ASC
  GD_ID_RODIC_DESC
  GD_LEVEL_ASC
  GD_LEVEL_DESC
  GD_NAME_ASC
  GD_NAME_DESC
  GD_PATH_ASC
  GD_PATH_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
}

type GalerieFoto {
  """Reads and enables pagination through a set of `Aktuality`."""
  aktualitiesByAtFotoMain(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AktualityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesConnection!
  createdAt: Datetime

  """Reads a single `GalerieDir` that is related to this `GalerieFoto`."""
  galerieDir: GalerieDir
  gfId: BigInt!
  gfIdRodic: BigInt!
  gfKdo: BigInt!
  gfName: String!
  gfPath: String!
  gfTimestamp: Datetime
  id: BigInt!

  """Reads a single `Tenant` that is related to this `GalerieFoto`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime

  """Reads a single `User` that is related to this `GalerieFoto`."""
  user: User
}

"""
A condition to be used against `GalerieFoto` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GalerieFotoCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `gfId` field."""
  gfId: BigInt

  """Checks for equality with the object’s `gfIdRodic` field."""
  gfIdRodic: BigInt

  """Checks for equality with the object’s `gfKdo` field."""
  gfKdo: BigInt

  """Checks for equality with the object’s `gfName` field."""
  gfName: String

  """Checks for equality with the object’s `gfPath` field."""
  gfPath: String

  """Checks for equality with the object’s `gfTimestamp` field."""
  gfTimestamp: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A connection to a list of `GalerieFoto` values."""
type GalerieFotosConnection {
  """
  A list of edges which contains the `GalerieFoto` and cursor to aid in pagination.
  """
  edges: [GalerieFotosEdge!]!

  """A list of `GalerieFoto` objects."""
  nodes: [GalerieFoto!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GalerieFoto` you could get from the connection."""
  totalCount: Int!
}

"""A `GalerieFoto` edge in the connection."""
type GalerieFotosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GalerieFoto` at the end of the edge."""
  node: GalerieFoto!
}

"""Methods to use when ordering `GalerieFoto`."""
enum GalerieFotosOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  GF_ID_ASC
  GF_ID_DESC
  GF_ID_RODIC_ASC
  GF_ID_RODIC_DESC
  GF_KDO_ASC
  GF_KDO_DESC
  GF_NAME_ASC
  GF_NAME_DESC
  GF_PATH_ASC
  GF_PATH_DESC
  GF_TIMESTAMP_ASC
  GF_TIMESTAMP_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum GenderType {
  MAN
  UNSPECIFIED
  WOMAN
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
type Interval {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
input IntervalInput {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

type Location {
  address: AddressDomain
  description: JSON!
  id: BigInt!

  """Reads and enables pagination through a set of `LocationAttachment`."""
  locationAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LocationAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LocationAttachment`."""
    orderBy: [LocationAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationAttachmentsConnection!
  name: String!

  """Reads and enables pagination through a set of `Room`."""
  rooms(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomsConnection!
}

type LocationAttachment {
  """
  Reads a single `Attachment` that is related to this `LocationAttachment`.
  """
  attachment: Attachment

  """
  Reads a single `Location` that is related to this `LocationAttachment`.
  """
  location: Location
  locationId: BigInt!
  objectName: String!
}

"""
A condition to be used against `LocationAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LocationAttachmentCondition {
  """Checks for equality with the object’s `locationId` field."""
  locationId: BigInt

  """Checks for equality with the object’s `objectName` field."""
  objectName: String
}

"""A connection to a list of `LocationAttachment` values."""
type LocationAttachmentsConnection {
  """
  A list of edges which contains the `LocationAttachment` and cursor to aid in pagination.
  """
  edges: [LocationAttachmentsEdge!]!

  """A list of `LocationAttachment` objects."""
  nodes: [LocationAttachment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LocationAttachment` you could get from the connection.
  """
  totalCount: Int!
}

"""A `LocationAttachment` edge in the connection."""
type LocationAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LocationAttachment` at the end of the edge."""
  node: LocationAttachment!
}

"""Methods to use when ordering `LocationAttachment`."""
enum LocationAttachmentsOrderBy {
  LOCATION_ID_ASC
  LOCATION_ID_DESC
  NATURAL
  OBJECT_NAME_ASC
  OBJECT_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Location` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LocationCondition {
  """Checks for equality with the object’s `address` field."""
  address: AddressDomainInput

  """Checks for equality with the object’s `description` field."""
  description: JSON

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Location`"""
input LocationInput {
  address: AddressDomainInput
  description: JSON!
  id: BigInt
  name: String!
}

"""
Represents an update to a `Location`. Fields that are set will be updated.
"""
input LocationPatch {
  address: AddressDomainInput
  description: JSON
  id: BigInt
  name: String
}

"""A connection to a list of `Location` values."""
type LocationsConnection {
  """
  A list of edges which contains the `Location` and cursor to aid in pagination.
  """
  edges: [LocationsEdge!]!

  """A list of `Location` objects."""
  nodes: [Location!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Location` you could get from the connection."""
  totalCount: Int!
}

"""A `Location` edge in the connection."""
type LocationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Location` at the end of the edge."""
  node: Location!
}

"""Methods to use when ordering `Location`."""
enum LocationsOrderBy {
  ADDRESS_ASC
  ADDRESS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `logInAs` mutation."""
input LogInAsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our `logInAs` mutation."""
type LogInAsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: LogInAsRecord
}

type LogInAsRecord {
  jwt: JwtToken
  usr: User
}

"""All input for the `login` mutation."""
input LoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  login: String!
  passwd: String!
}

"""The output of our `login` mutation."""
type LoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: LoginRecord
}

type LoginRecord {
  jwt: JwtToken
  usr: User
}

type MembershipApplication {
  bio: String
  birthDate: Date
  createdAt: Datetime!
  createdBy: BigInt!
  cstsId: String
  email: String
  firstName: String!
  gender: GenderType!
  id: BigInt!
  lastName: String!
  middleName: String
  nationalIdNumber: String
  nationality: String!
  note: String!
  phone: String
  prefixTitle: String
  status: ApplicationFormStatus!
  suffixTitle: String
  taxIdentificationNumber: String

  """
  Reads a single `Tenant` that is related to this `MembershipApplication`.
  """
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `MembershipApplication`."""
  user: User
  wdsfId: String
}

"""
A condition to be used against `MembershipApplication` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MembershipApplicationCondition {
  """Checks for equality with the object’s `bio` field."""
  bio: String

  """Checks for equality with the object’s `birthDate` field."""
  birthDate: Date

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: BigInt

  """Checks for equality with the object’s `cstsId` field."""
  cstsId: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `gender` field."""
  gender: GenderType

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `middleName` field."""
  middleName: String

  """Checks for equality with the object’s `nationalIdNumber` field."""
  nationalIdNumber: String

  """Checks for equality with the object’s `nationality` field."""
  nationality: String

  """Checks for equality with the object’s `note` field."""
  note: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `prefixTitle` field."""
  prefixTitle: String

  """Checks for equality with the object’s `status` field."""
  status: ApplicationFormStatus

  """Checks for equality with the object’s `suffixTitle` field."""
  suffixTitle: String

  """Checks for equality with the object’s `taxIdentificationNumber` field."""
  taxIdentificationNumber: String

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `wdsfId` field."""
  wdsfId: String
}

"""An input for mutations affecting `MembershipApplication`"""
input MembershipApplicationInput {
  bio: String
  birthDate: Date
  createdAt: Datetime
  createdBy: BigInt!
  cstsId: String
  email: String
  firstName: String!
  gender: GenderType!
  id: BigInt
  lastName: String!
  middleName: String
  nationalIdNumber: String
  nationality: String!
  note: String
  phone: String
  prefixTitle: String
  status: ApplicationFormStatus
  suffixTitle: String
  taxIdentificationNumber: String
  tenantId: BigInt
  updatedAt: Datetime
  wdsfId: String
}

"""
Represents an update to a `MembershipApplication`. Fields that are set will be updated.
"""
input MembershipApplicationPatch {
  bio: String
  birthDate: Date
  createdAt: Datetime
  createdBy: BigInt
  cstsId: String
  email: String
  firstName: String
  gender: GenderType
  id: BigInt
  lastName: String
  middleName: String
  nationalIdNumber: String
  nationality: String
  note: String
  phone: String
  prefixTitle: String
  status: ApplicationFormStatus
  suffixTitle: String
  taxIdentificationNumber: String
  tenantId: BigInt
  updatedAt: Datetime
  wdsfId: String
}

"""A `MembershipApplication` edge in the connection."""
type MembershipApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MembershipApplication` at the end of the edge."""
  node: MembershipApplication!
}

"""Methods to use when ordering `MembershipApplication`."""
enum MembershipApplicationsOrderBy {
  BIO_ASC
  BIO_DESC
  BIRTH_DATE_ASC
  BIRTH_DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CSTS_ID_ASC
  CSTS_ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  GENDER_ASC
  GENDER_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  MIDDLE_NAME_ASC
  MIDDLE_NAME_DESC
  NATIONALITY_ASC
  NATIONALITY_DESC
  NATIONAL_ID_NUMBER_ASC
  NATIONAL_ID_NUMBER_DESC
  NATURAL
  NOTE_ASC
  NOTE_DESC
  PHONE_ASC
  PHONE_DESC
  PREFIX_TITLE_ASC
  PREFIX_TITLE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_ASC
  STATUS_DESC
  SUFFIX_TITLE_ASC
  SUFFIX_TITLE_DESC
  TAX_IDENTIFICATION_NUMBER_ASC
  TAX_IDENTIFICATION_NUMBER_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  WDSF_ID_ASC
  WDSF_ID_DESC
}

"""All input for the `moveEventInstance` mutation."""
input MoveEventInstanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt
  locationId: BigInt
  locationText: String
  since: Datetime
  trainerPersonId: BigInt
  until: Datetime
}

"""The output of our `moveEventInstance` mutation."""
type MoveEventInstancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `EventInstance`."""
  event: Event
  eventInstance: EventInstance

  """An edge for our `EventInstance`. May be used by Relay 1."""
  eventInstanceEdge(
    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): EventInstancesEdge

  """
  Reads a single `TenantLocation` that is related to this `EventInstance`.
  """
  location: TenantLocation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `EventInstance`."""
  tenant: Tenant
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  cancelRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CancelRegistrationInput!
  ): CancelRegistrationPayload
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload
  confirmMembershipApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmMembershipApplicationInput!
  ): ConfirmMembershipApplicationPayload

  """Creates a single `Aktuality`."""
  createAktuality(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAktualityInput!
  ): CreateAktualityPayload

  """Creates a single `Attachment`."""
  createAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttachmentInput!
  ): CreateAttachmentPayload

  """Creates a single `Cohort`."""
  createCohort(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCohortInput!
  ): CreateCohortPayload

  """Creates a single `CohortGroup`."""
  createCohortGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCohortGroupInput!
  ): CreateCohortGroupPayload

  """Creates a single `CohortMembership`."""
  createCohortMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCohortMembershipInput!
  ): CreateCohortMembershipPayload

  """Creates a single `Couple`."""
  createCouple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCoupleInput!
  ): CreateCouplePayload
  createCreditTransactionForPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCreditTransactionForPersonInput!
  ): CreateCreditTransactionForPersonPayload

  """Creates a single `Dokumenty`."""
  createDokumenty(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDokumentyInput!
  ): CreateDokumentyPayload
  createEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventInput!
  ): CreateEventPayload

  """Creates a single `EventExternalRegistration`."""
  createEventExternalRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventExternalRegistrationInput!
  ): CreateEventExternalRegistrationPayload

  """Creates a single `EventRegistration`."""
  createEventRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventRegistrationInput!
  ): CreateEventRegistrationPayload

  """Creates a single `FormResponse`."""
  createFormResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormResponseInput!
  ): CreateFormResponsePayload

  """Creates a single `Location`."""
  createLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLocationInput!
  ): CreateLocationPayload

  """Creates a single `MembershipApplication`."""
  createMembershipApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMembershipApplicationInput!
  ): CreateMembershipApplicationPayload
  createMissingCohortSubscriptionPayments(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMissingCohortSubscriptionPaymentsInput!
  ): CreateMissingCohortSubscriptionPaymentsPayload
  createNextCohortSubscriptionPayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNextCohortSubscriptionPaymentInput!
  ): CreateNextCohortSubscriptionPaymentPayload
  createPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePersonInput!
  ): CreatePersonPayload

  """Creates a single `PersonInvitation`."""
  createPersonInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePersonInvitationInput!
  ): CreatePersonInvitationPayload

  """Creates a single `Room`."""
  createRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoomInput!
  ): CreateRoomPayload

  """Creates a single `TenantAdministrator`."""
  createTenantAdministrator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTenantAdministratorInput!
  ): CreateTenantAdministratorPayload

  """Creates a single `TenantLocation`."""
  createTenantLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTenantLocationInput!
  ): CreateTenantLocationPayload

  """Creates a single `TenantMembership`."""
  createTenantMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTenantMembershipInput!
  ): CreateTenantMembershipPayload

  """Creates a single `TenantTrainer`."""
  createTenantTrainer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTenantTrainerInput!
  ): CreateTenantTrainerPayload

  """Creates a single `Upozorneni`."""
  createUpozorneni(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUpozorneniInput!
  ): CreateUpozorneniPayload

  """Creates a single `UserProxy`."""
  createUserProxy(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserProxyInput!
  ): CreateUserProxyPayload

  """Deletes a single `Aktuality` using a unique key."""
  deleteAktuality(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAktualityInput!
  ): DeleteAktualityPayload

  """Deletes a single `Aktuality` using a unique key."""
  deleteAktualityById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAktualityByIdInput!
  ): DeleteAktualityPayload

  """Deletes a single `Attachment` using a unique key."""
  deleteAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentInput!
  ): DeleteAttachmentPayload

  """Deletes a single `Cohort` using a unique key."""
  deleteCohort(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCohortInput!
  ): DeleteCohortPayload

  """Deletes a single `CohortGroup` using a unique key."""
  deleteCohortGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCohortGroupInput!
  ): DeleteCohortGroupPayload

  """Deletes a single `CohortMembership` using a unique key."""
  deleteCohortMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCohortMembershipInput!
  ): DeleteCohortMembershipPayload

  """Deletes a single `Couple` using a unique key."""
  deleteCouple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCoupleInput!
  ): DeleteCouplePayload

  """Deletes a single `Dokumenty` using a unique key."""
  deleteDokumenty(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDokumentyInput!
  ): DeleteDokumentyPayload

  """Deletes a single `Dokumenty` using a unique key."""
  deleteDokumentyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDokumentyByIdInput!
  ): DeleteDokumentyPayload

  """Deletes a single `Event` using a unique key."""
  deleteEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventInput!
  ): DeleteEventPayload

  """Deletes a single `EventExternalRegistration` using a unique key."""
  deleteEventExternalRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventExternalRegistrationInput!
  ): DeleteEventExternalRegistrationPayload
  deleteEventInstance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventInstanceInput!
  ): DeleteEventInstancePayload

  """Deletes a single `EventRegistration` using a unique key."""
  deleteEventRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventRegistrationInput!
  ): DeleteEventRegistrationPayload

  """Deletes a single `EventRegistration` using a unique key."""
  deleteEventRegistrationByEventIdAndPersonIdAndCoupleId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventRegistrationByEventIdAndPersonIdAndCoupleIdInput!
  ): DeleteEventRegistrationPayload

  """Deletes a single `Location` using a unique key."""
  deleteLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLocationInput!
  ): DeleteLocationPayload

  """Deletes a single `MembershipApplication` using a unique key."""
  deleteMembershipApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMembershipApplicationInput!
  ): DeleteMembershipApplicationPayload

  """Deletes a single `Payment` using a unique key."""
  deletePayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePaymentInput!
  ): DeletePaymentPayload

  """Deletes a single `Person` using a unique key."""
  deletePerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonInput!
  ): DeletePersonPayload

  """Deletes a single `PersonInvitation` using a unique key."""
  deletePersonInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonInvitationInput!
  ): DeletePersonInvitationPayload

  """Deletes a single `PersonInvitation` using a unique key."""
  deletePersonInvitationByAccessToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonInvitationByAccessTokenInput!
  ): DeletePersonInvitationPayload

  """Deletes a single `Room` using a unique key."""
  deleteRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoomInput!
  ): DeleteRoomPayload

  """Deletes a single `TenantAdministrator` using a unique key."""
  deleteTenantAdministrator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTenantAdministratorInput!
  ): DeleteTenantAdministratorPayload

  """Deletes a single `TenantLocation` using a unique key."""
  deleteTenantLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTenantLocationInput!
  ): DeleteTenantLocationPayload

  """Deletes a single `TenantMembership` using a unique key."""
  deleteTenantMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTenantMembershipInput!
  ): DeleteTenantMembershipPayload

  """Deletes a single `TenantTrainer` using a unique key."""
  deleteTenantTrainer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTenantTrainerInput!
  ): DeleteTenantTrainerPayload

  """Deletes a single `Transaction` using a unique key."""
  deleteTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTransactionInput!
  ): DeleteTransactionPayload

  """Deletes a single `Upozorneni` using a unique key."""
  deleteUpozorneni(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUpozorneniInput!
  ): DeleteUpozorneniPayload

  """Deletes a single `Upozorneni` using a unique key."""
  deleteUpozorneniById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUpozorneniByIdInput!
  ): DeleteUpozorneniPayload

  """Deletes a single `UserProxy` using a unique key."""
  deleteUserProxy(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserProxyInput!
  ): DeleteUserProxyPayload
  editRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: EditRegistrationInput!
  ): EditRegistrationPayload
  logInAs(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LogInAsInput!
  ): LogInAsPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
  moveEventInstance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MoveEventInstanceInput!
  ): MoveEventInstancePayload
  otpLogin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: OtpLoginInput!
  ): OtpLoginPayload
  personAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PersonAccountInput!
  ): PersonAccountPayload
  registerToEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterToEventInput!
  ): RegisterToEventPayload
  registerToEventMany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterToEventManyInput!
  ): RegisterToEventManyPayload
  registerUsingInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterUsingInvitationInput!
  ): RegisterUsingInvitationPayload
  registerWithoutInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterWithoutInvitationInput!
  ): RegisterWithoutInvitationPayload
  rejectMembershipApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RejectMembershipApplicationInput!
  ): RejectMembershipApplicationPayload
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload
  setLessonDemand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetLessonDemandInput!
  ): SetLessonDemandPayload
  submitForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SubmitFormInput!
  ): SubmitFormPayload
  tenantAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TenantAccountInput!
  ): TenantAccountPayload

  """Updates a single `Aktuality` using a unique key and a patch."""
  updateAktuality(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAktualityInput!
  ): UpdateAktualityPayload

  """Updates a single `Aktuality` using a unique key and a patch."""
  updateAktualityById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAktualityByIdInput!
  ): UpdateAktualityPayload

  """Updates a single `Cohort` using a unique key and a patch."""
  updateCohort(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCohortInput!
  ): UpdateCohortPayload

  """Updates a single `CohortGroup` using a unique key and a patch."""
  updateCohortGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCohortGroupInput!
  ): UpdateCohortGroupPayload

  """Updates a single `CohortMembership` using a unique key and a patch."""
  updateCohortMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCohortMembershipInput!
  ): UpdateCohortMembershipPayload

  """Updates a single `Couple` using a unique key and a patch."""
  updateCouple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCoupleInput!
  ): UpdateCouplePayload

  """Updates a single `Dokumenty` using a unique key and a patch."""
  updateDokumenty(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDokumentyInput!
  ): UpdateDokumentyPayload

  """Updates a single `Dokumenty` using a unique key and a patch."""
  updateDokumentyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDokumentyByIdInput!
  ): UpdateDokumentyPayload

  """Updates a single `Event` using a unique key and a patch."""
  updateEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventInput!
  ): UpdateEventPayload
  updateEventAttendance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventAttendanceInput!
  ): UpdateEventAttendancePayload

  """Updates a single `EventInstance` using a unique key and a patch."""
  updateEventInstance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventInstanceInput!
  ): UpdateEventInstancePayload

  """Updates a single `Location` using a unique key and a patch."""
  updateLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLocationInput!
  ): UpdateLocationPayload

  """
  Updates a single `MembershipApplication` using a unique key and a patch.
  """
  updateMembershipApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMembershipApplicationInput!
  ): UpdateMembershipApplicationPayload

  """Updates a single `Payment` using a unique key and a patch."""
  updatePayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePaymentInput!
  ): UpdatePaymentPayload

  """Updates a single `Person` using a unique key and a patch."""
  updatePerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonInput!
  ): UpdatePersonPayload

  """Updates a single `Room` using a unique key and a patch."""
  updateRoom(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoomInput!
  ): UpdateRoomPayload

  """Updates a single `Tenant` using a unique key and a patch."""
  updateTenant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTenantInput!
  ): UpdateTenantPayload

  """Updates a single `TenantAdministrator` using a unique key and a patch."""
  updateTenantAdministrator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTenantAdministratorInput!
  ): UpdateTenantAdministratorPayload

  """Updates a single `TenantLocation` using a unique key and a patch."""
  updateTenantLocation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTenantLocationInput!
  ): UpdateTenantLocationPayload

  """Updates a single `TenantMembership` using a unique key and a patch."""
  updateTenantMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTenantMembershipInput!
  ): UpdateTenantMembershipPayload

  """Updates a single `TenantTrainer` using a unique key and a patch."""
  updateTenantTrainer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTenantTrainerInput!
  ): UpdateTenantTrainerPayload

  """Updates a single `Upozorneni` using a unique key and a patch."""
  updateUpozorneni(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUpozorneniInput!
  ): UpdateUpozorneniPayload

  """Updates a single `Upozorneni` using a unique key and a patch."""
  updateUpozorneniById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUpozorneniByIdInput!
  ): UpdateUpozorneniPayload

  """Updates a single `UserProxy` using a unique key and a patch."""
  updateUserProxy(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserProxyInput!
  ): UpdateUserProxyPayload
  upsertEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertEventInput!
  ): UpsertEventPayload
}

"""All input for the `otpLogin` mutation."""
input OtpLoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: UUID!
}

"""The output of our `otpLogin` mutation."""
type OtpLoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: OtpLoginRecord
}

type OtpLoginRecord {
  jwt: JwtToken
  usr: User
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Payment {
  accountingPeriodId: BigInt!

  """Reads a single `CohortSubscription` that is related to this `Payment`."""
  cohortSubscription: CohortSubscription
  cohortSubscriptionId: BigInt
  createdAt: Datetime!
  dueAt: Datetime

  """Reads a single `EventInstance` that is related to this `Payment`."""
  eventInstance: EventInstance
  eventInstanceId: BigInt

  """Reads a single `EventRegistration` that is related to this `Payment`."""
  eventRegistration: EventRegistration
  eventRegistrationId: BigInt
  id: BigInt!
  isAutoCreditAllowed: Boolean!
  paidAt: Datetime

  """Reads and enables pagination through a set of `PaymentDebtor`."""
  paymentDebtorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentDebtorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PaymentDebtor`."""
    orderBy: [PaymentDebtorsOrderBy!]
  ): [PaymentDebtor!]!

  """Reads and enables pagination through a set of `PaymentRecipient`."""
  paymentRecipientsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentRecipientCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PaymentRecipient`."""
    orderBy: [PaymentRecipientsOrderBy!]
  ): [PaymentRecipient!]!
  specificSymbol: String
  status: PaymentStatus!
  tags: [String]!

  """Reads a single `Tenant` that is related to this `Payment`."""
  tenant: Tenant
  tenantId: BigInt!

  """Reads and enables pagination through a set of `Transaction`."""
  transactions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TransactionsConnection!
  updatedAt: Datetime!
  variableSymbol: String
}

"""
A condition to be used against `Payment` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PaymentCondition {
  """Checks for equality with the object’s `accountingPeriodId` field."""
  accountingPeriodId: BigInt

  """Checks for equality with the object’s `cohortSubscriptionId` field."""
  cohortSubscriptionId: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `dueAt` field."""
  dueAt: Datetime

  """Checks for equality with the object’s `eventInstanceId` field."""
  eventInstanceId: BigInt

  """Checks for equality with the object’s `eventRegistrationId` field."""
  eventRegistrationId: BigInt

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isAutoCreditAllowed` field."""
  isAutoCreditAllowed: Boolean

  """Checks for equality with the object’s `paidAt` field."""
  paidAt: Datetime

  """Checks for equality with the object’s `specificSymbol` field."""
  specificSymbol: String

  """Checks for equality with the object’s `status` field."""
  status: PaymentStatus

  """Checks for equality with the object’s `tags` field."""
  tags: [String]

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `variableSymbol` field."""
  variableSymbol: String
}

type PaymentDebtor {
  id: BigInt!
  isUnpaid: Boolean

  """Reads a single `Payment` that is related to this `PaymentDebtor`."""
  payment: Payment
  paymentId: BigInt!

  """Reads a single `Person` that is related to this `PaymentDebtor`."""
  person: Person
  personId: BigInt!
  price: PriceType

  """Reads a single `Tenant` that is related to this `PaymentDebtor`."""
  tenant: Tenant
  tenantId: BigInt!
}

"""
A condition to be used against `PaymentDebtor` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PaymentDebtorCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isUnpaid` field."""
  isUnpaid: Boolean

  """Checks for equality with the object’s `paymentId` field."""
  paymentId: BigInt

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

"""Methods to use when ordering `PaymentDebtor`."""
enum PaymentDebtorsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PAYMENT_ID_ASC
  PAYMENT_ID_DESC
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
}

"""
Represents an update to a `Payment`. Fields that are set will be updated.
"""
input PaymentPatch {
  accountingPeriodId: BigInt
  cohortSubscriptionId: BigInt
  createdAt: Datetime
  dueAt: Datetime
  eventInstanceId: BigInt
  eventRegistrationId: BigInt
  id: BigInt
  isAutoCreditAllowed: Boolean
  paidAt: Datetime
  specificSymbol: String
  status: PaymentStatus
  tags: [String]
  tenantId: BigInt
  updatedAt: Datetime
  variableSymbol: String
}

type PaymentRecipient {
  """Reads a single `Account` that is related to this `PaymentRecipient`."""
  account: Account
  accountId: BigInt!
  amount: BigFloat!
  id: BigInt!

  """Reads a single `Payment` that is related to this `PaymentRecipient`."""
  payment: Payment
  paymentId: BigInt!

  """Reads a single `Tenant` that is related to this `PaymentRecipient`."""
  tenant: Tenant
  tenantId: BigInt!
}

"""
A condition to be used against `PaymentRecipient` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PaymentRecipientCondition {
  """Checks for equality with the object’s `accountId` field."""
  accountId: BigInt

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `paymentId` field."""
  paymentId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

"""Methods to use when ordering `PaymentRecipient`."""
enum PaymentRecipientsOrderBy {
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PAYMENT_ID_ASC
  PAYMENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
}

enum PaymentStatus {
  PAID
  TENTATIVE
  UNPAID
}

"""Methods to use when ordering `Payment`."""
enum PaymentsOrderBy {
  ACCOUNTING_PERIOD_ID_ASC
  ACCOUNTING_PERIOD_ID_DESC
  COHORT_SUBSCRIPTION_ID_ASC
  COHORT_SUBSCRIPTION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DUE_AT_ASC
  DUE_AT_DESC
  EVENT_INSTANCE_ID_ASC
  EVENT_INSTANCE_ID_DESC
  EVENT_REGISTRATION_ID_ASC
  EVENT_REGISTRATION_ID_DESC
  ID_ASC
  ID_DESC
  IS_AUTO_CREDIT_ALLOWED_ASC
  IS_AUTO_CREDIT_ALLOWED_DESC
  NATURAL
  PAID_AT_ASC
  PAID_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SPECIFIC_SYMBOL_ASC
  SPECIFIC_SYMBOL_DESC
  STATUS_ASC
  STATUS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  VARIABLE_SYMBOL_ASC
  VARIABLE_SYMBOL_DESC
}

"""A connection to a list of `Person` values."""
type PeopleConnection {
  """
  A list of edges which contains the `Person` and cursor to aid in pagination.
  """
  edges: [PeopleEdge!]!

  """A list of `Person` objects."""
  nodes: [Person!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Person` you could get from the connection."""
  totalCount: Int!
}

"""A `Person` edge in the connection."""
type PeopleEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Person` at the end of the edge."""
  node: Person!
}

"""Methods to use when ordering `Person`."""
enum PeopleOrderBy {
  ADDRESS_ASC
  ADDRESS_DESC
  BIO_ASC
  BIO_DESC
  BIRTH_DATE_ASC
  BIRTH_DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CSTS_ID_ASC
  CSTS_ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  GENDER_ASC
  GENDER_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NAME_ASC
  NAME_DESC
  NATIONALITY_ASC
  NATIONALITY_DESC
  NATIONAL_ID_NUMBER_ASC
  NATIONAL_ID_NUMBER_DESC
  NATURAL
  PHONE_ASC
  PHONE_DESC
  PREFIX_TITLE_ASC
  PREFIX_TITLE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUFFIX_TITLE_ASC
  SUFFIX_TITLE_DESC
  TAX_IDENTIFICATION_NUMBER_ASC
  TAX_IDENTIFICATION_NUMBER_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  WDSF_ID_ASC
  WDSF_ID_DESC
}

type Person {
  """Reads and enables pagination through a set of `Account`."""
  accountsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]
  ): [Account!]!
  activeCouplesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Couple!]
  address: AddressDomain
  allCouplesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Couple!]
  bio: String!
  birthDate: Date
  cohortIds: [BigInt]

  """Reads and enables pagination through a set of `CohortMembership`."""
  cohortMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CohortMembership`."""
    orderBy: [CohortMembershipsOrderBy!]
  ): [CohortMembership!]!

  """Reads and enables pagination through a set of `Couple`."""
  couplesByManIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CoupleCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Couple`."""
    orderBy: [CouplesOrderBy!]
  ): [Couple!]!

  """Reads and enables pagination through a set of `Couple`."""
  couplesByWomanIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CoupleCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Couple`."""
    orderBy: [CouplesOrderBy!]
  ): [Couple!]!
  createdAt: Datetime!
  cstsId: String
  email: String

  """Reads and enables pagination through a set of `EventAttendance`."""
  eventAttendancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventAttendanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventAttendance`."""
    orderBy: [EventAttendancesOrderBy!]
  ): [EventAttendance!]!

  """Reads and enables pagination through a set of `EventInstanceTrainer`."""
  eventInstanceTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstanceTrainer`."""
    orderBy: [EventInstanceTrainersOrderBy!]
  ): [EventInstanceTrainer!]!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventRegistrationsConnection!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]!

  """Reads and enables pagination through a set of `EventTrainer`."""
  eventTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTrainer`."""
    orderBy: [EventTrainersOrderBy!]
  ): [EventTrainer!]!
  firstName: String!
  gender: GenderType!
  id: BigInt!
  isAdmin: Boolean
  isMember: Boolean
  isTrainer: Boolean
  lastName: String!
  name: String!
  nationalIdNumber: String
  nationality: String!

  """Reads and enables pagination through a set of `PaymentDebtor`."""
  paymentDebtorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentDebtorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PaymentDebtor`."""
    orderBy: [PaymentDebtorsOrderBy!]
  ): [PaymentDebtor!]!

  """Reads and enables pagination through a set of `PersonInvitation`."""
  personInvitationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonInvitationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PersonInvitation`."""
    orderBy: [PersonInvitationsOrderBy!]
  ): [PersonInvitation!]!
  phone: String
  prefixTitle: String!
  recentAttendanceList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [EventAttendance!]

  """Reads and enables pagination through a set of `Scoreboard`."""
  scoreboardsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreboardCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Scoreboard`."""
    orderBy: [ScoreboardsOrderBy!]
  ): [Scoreboard!]!
  suffixTitle: String!
  taxIdentificationNumber: String

  """Reads and enables pagination through a set of `TenantAdministrator`."""
  tenantAdministratorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantAdministratorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantAdministrator`."""
    orderBy: [TenantAdministratorsOrderBy!]
  ): [TenantAdministrator!]!

  """Reads and enables pagination through a set of `TenantMembership`."""
  tenantMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantMembership`."""
    orderBy: [TenantMembershipsOrderBy!]
  ): [TenantMembership!]!

  """Reads and enables pagination through a set of `TenantTrainer`."""
  tenantTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantTrainer`."""
    orderBy: [TenantTrainersOrderBy!]
  ): [TenantTrainer!]!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserProxy`."""
  userProxiesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserProxyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserProxy`."""
    orderBy: [UserProxiesOrderBy!]
  ): [UserProxy!]!
  wdsfId: String
  weeklyAttendanceList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [PersonWeeklyAttendanceRecord!]
}

"""All input for the `personAccount` mutation."""
input PersonAccountInput {
  c: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pId: BigInt
}

"""The output of our `personAccount` mutation."""
type PersonAccountPayload {
  acc: Account

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): AccountsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `Account`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Account`."""
  tenant: Tenant
}

"""
A condition to be used against `Person` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PersonCondition {
  """Checks for equality with the object’s `address` field."""
  address: AddressDomainInput

  """Checks for equality with the object’s `bio` field."""
  bio: String

  """Checks for equality with the object’s `birthDate` field."""
  birthDate: Date

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `cstsId` field."""
  cstsId: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `gender` field."""
  gender: GenderType

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `nationalIdNumber` field."""
  nationalIdNumber: String

  """Checks for equality with the object’s `nationality` field."""
  nationality: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `prefixTitle` field."""
  prefixTitle: String

  """Checks for equality with the object’s `suffixTitle` field."""
  suffixTitle: String

  """Checks for equality with the object’s `taxIdentificationNumber` field."""
  taxIdentificationNumber: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `wdsfId` field."""
  wdsfId: String
}

"""An input for mutations affecting `Person`"""
input PersonInput {
  address: AddressDomainInput
  bio: String
  birthDate: Date
  createdAt: Datetime
  cstsId: String
  email: String
  firstName: String!
  gender: GenderType!
  lastName: String!
  name: String
  nationalIdNumber: String
  nationality: String!
  phone: String
  prefixTitle: String
  suffixTitle: String
  taxIdentificationNumber: String
  updatedAt: Datetime
  wdsfId: String
}

type PersonInvitation {
  accessToken: UUID!
  createdAt: Datetime!
  email: String!
  id: BigInt!

  """Reads a single `Person` that is related to this `PersonInvitation`."""
  person: Person
  personId: BigInt

  """Reads a single `Tenant` that is related to this `PersonInvitation`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
  usedAt: Datetime
}

"""
A condition to be used against `PersonInvitation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PersonInvitationCondition {
  """Checks for equality with the object’s `accessToken` field."""
  accessToken: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `usedAt` field."""
  usedAt: Datetime
}

"""An input for mutations affecting `PersonInvitation`"""
input PersonInvitationInput {
  accessToken: UUID
  createdAt: Datetime
  email: String!
  personId: BigInt
  tenantId: BigInt
  updatedAt: Datetime
  usedAt: Datetime
}

"""Methods to use when ordering `PersonInvitation`."""
enum PersonInvitationsOrderBy {
  ACCESS_TOKEN_ASC
  ACCESS_TOKEN_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USED_AT_ASC
  USED_AT_DESC
}

"""
Represents an update to a `Person`. Fields that are set will be updated.
"""
input PersonPatch {
  address: AddressDomainInput
  bio: String
  birthDate: Date
  createdAt: Datetime
  cstsId: String
  email: String
  firstName: String
  gender: GenderType
  lastName: String
  name: String
  nationalIdNumber: String
  nationality: String
  phone: String
  prefixTitle: String
  suffixTitle: String
  taxIdentificationNumber: String
  updatedAt: Datetime
  wdsfId: String
}

type PersonWeeklyAttendanceRecord {
  eventCount: Int
  week: Date
}

"""A connection to a list of `PlatbyCategory` values."""
type PlatbyCategoriesConnection {
  """
  A list of edges which contains the `PlatbyCategory` and cursor to aid in pagination.
  """
  edges: [PlatbyCategoriesEdge!]!

  """A list of `PlatbyCategory` objects."""
  nodes: [PlatbyCategory!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PlatbyCategory` you could get from the connection."""
  totalCount: Int!
}

"""A `PlatbyCategory` edge in the connection."""
type PlatbyCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlatbyCategory` at the end of the edge."""
  node: PlatbyCategory!
}

"""Methods to use when ordering `PlatbyCategory`."""
enum PlatbyCategoriesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PC_AMOUNT_ASC
  PC_AMOUNT_DESC
  PC_ARCHIVE_ASC
  PC_ARCHIVE_DESC
  PC_DATE_DUE_ASC
  PC_DATE_DUE_DESC
  PC_ID_ASC
  PC_ID_DESC
  PC_NAME_ASC
  PC_NAME_DESC
  PC_SYMBOL_ASC
  PC_SYMBOL_DESC
  PC_USE_BASE_ASC
  PC_USE_BASE_DESC
  PC_USE_PREFIX_ASC
  PC_USE_PREFIX_DESC
  PC_VALID_FROM_ASC
  PC_VALID_FROM_DESC
  PC_VALID_TO_ASC
  PC_VALID_TO_DESC
  PC_VISIBLE_ASC
  PC_VISIBLE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
}

type PlatbyCategory {
  id: BigInt!
  pcAmount: BigFloat!
  pcArchive: Boolean!
  pcDateDue: Date!
  pcId: BigInt!
  pcName: String!
  pcSymbol: BigInt!
  pcUseBase: Boolean!
  pcUsePrefix: Boolean!
  pcValidFrom: Date!
  pcValidTo: Date!
  pcVisible: Boolean!

  """Reads and enables pagination through a set of `PlatbyItem`."""
  platbyItemsByPiIdCategory(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsConnection!

  """Reads a single `Tenant` that is related to this `PlatbyCategory`."""
  tenant: Tenant
  tenantId: BigInt!
}

"""
A condition to be used against `PlatbyCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PlatbyCategoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `pcAmount` field."""
  pcAmount: BigFloat

  """Checks for equality with the object’s `pcArchive` field."""
  pcArchive: Boolean

  """Checks for equality with the object’s `pcDateDue` field."""
  pcDateDue: Date

  """Checks for equality with the object’s `pcId` field."""
  pcId: BigInt

  """Checks for equality with the object’s `pcName` field."""
  pcName: String

  """Checks for equality with the object’s `pcSymbol` field."""
  pcSymbol: BigInt

  """Checks for equality with the object’s `pcUseBase` field."""
  pcUseBase: Boolean

  """Checks for equality with the object’s `pcUsePrefix` field."""
  pcUsePrefix: Boolean

  """Checks for equality with the object’s `pcValidFrom` field."""
  pcValidFrom: Date

  """Checks for equality with the object’s `pcValidTo` field."""
  pcValidTo: Date

  """Checks for equality with the object’s `pcVisible` field."""
  pcVisible: Boolean

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

type PlatbyItem {
  id: BigInt!
  piAmount: BigFloat!
  piDate: Date!
  piId: BigInt!
  piIdCategory: BigInt!
  piIdRaw: BigInt
  piIdUser: BigInt
  piPrefix: Int!

  """Reads a single `PlatbyCategory` that is related to this `PlatbyItem`."""
  platbyCategory: PlatbyCategory
  status: PaymentStatus!

  """Reads a single `Tenant` that is related to this `PlatbyItem`."""
  tenant: Tenant
  tenantId: BigInt!

  """Reads a single `User` that is related to this `PlatbyItem`."""
  user: User
}

"""
A condition to be used against `PlatbyItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PlatbyItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `piAmount` field."""
  piAmount: BigFloat

  """Checks for equality with the object’s `piDate` field."""
  piDate: Date

  """Checks for equality with the object’s `piId` field."""
  piId: BigInt

  """Checks for equality with the object’s `piIdCategory` field."""
  piIdCategory: BigInt

  """Checks for equality with the object’s `piIdRaw` field."""
  piIdRaw: BigInt

  """Checks for equality with the object’s `piIdUser` field."""
  piIdUser: BigInt

  """Checks for equality with the object’s `piPrefix` field."""
  piPrefix: Int

  """Checks for equality with the object’s `status` field."""
  status: PaymentStatus

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt
}

"""A connection to a list of `PlatbyItem` values."""
type PlatbyItemsConnection {
  """
  A list of edges which contains the `PlatbyItem` and cursor to aid in pagination.
  """
  edges: [PlatbyItemsEdge!]!

  """A list of `PlatbyItem` objects."""
  nodes: [PlatbyItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PlatbyItem` you could get from the connection."""
  totalCount: Int!
}

"""A `PlatbyItem` edge in the connection."""
type PlatbyItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlatbyItem` at the end of the edge."""
  node: PlatbyItem!
}

"""Methods to use when ordering `PlatbyItem`."""
enum PlatbyItemsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PI_AMOUNT_ASC
  PI_AMOUNT_DESC
  PI_DATE_ASC
  PI_DATE_DESC
  PI_ID_ASC
  PI_ID_CATEGORY_ASC
  PI_ID_CATEGORY_DESC
  PI_ID_DESC
  PI_ID_RAW_ASC
  PI_ID_RAW_DESC
  PI_ID_USER_ASC
  PI_ID_USER_DESC
  PI_PREFIX_ASC
  PI_PREFIX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_ASC
  STATUS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
}

type Posting {
  """Reads a single `Account` that is related to this `Posting`."""
  account: Account
  accountId: BigInt!
  amount: BigFloat
  createdAt: Datetime!
  id: BigInt!

  """Reads a single `Account` that is related to this `Posting`."""
  originalAccount: Account
  originalAccountId: BigInt

  """Reads a single `Tenant` that is related to this `Posting`."""
  tenant: Tenant
  tenantId: BigInt!

  """Reads a single `Transaction` that is related to this `Posting`."""
  transaction: Transaction
  transactionId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `Posting` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostingCondition {
  """Checks for equality with the object’s `accountId` field."""
  accountId: BigInt

  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `originalAccountId` field."""
  originalAccountId: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `transactionId` field."""
  transactionId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""Methods to use when ordering `Posting`."""
enum PostingsOrderBy {
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  ORIGINAL_ACCOUNT_ID_ASC
  ORIGINAL_ACCOUNT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  TRANSACTION_ID_ASC
  TRANSACTION_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type Price {
  amount: BigFloat
  currency: String
}

"""An input for mutations affecting `Price`"""
input PriceInput {
  amount: BigFloat
  currency: String
}

type PriceType {
  amount: BigFloat
  currency: String
}

"""The root query type which gives access points into the data universe."""
type Query {
  """Get a single `Account`."""
  account(id: BigInt!): Account

  """Get a single `Account`."""
  accountByTenantIdAndPersonIdAndCurrency(currency: String!, personId: BigInt!, tenantId: BigInt!): Account

  """Reads a set of `Account`."""
  accountsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]
  ): [Account!]

  """Reads and enables pagination through a set of `Aktuality`."""
  aktualities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AktualityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesConnection

  """Get a single `Aktuality`."""
  aktuality(atId: BigInt!): Aktuality

  """Get a single `Aktuality`."""
  aktualityById(id: BigInt!): Aktuality

  """Reads and enables pagination through a set of `Upozorneni`."""
  archivedAnnouncements(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UpozornenisConnection

  """Get a single `Attachment`."""
  attachment(objectName: String!): Attachment

  """Reads and enables pagination through a set of `Text`."""
  attachmentDirectories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): AttachmentDirectoriesConnection

  """Reads and enables pagination through a set of `Attachment`."""
  attachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection

  """Get a single `Cohort`."""
  cohort(id: BigInt!): Cohort

  """Get a single `CohortGroup`."""
  cohortGroup(id: BigInt!): CohortGroup

  """Reads and enables pagination through a set of `CohortGroup`."""
  cohortGroups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CohortGroup`."""
    orderBy: [CohortGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CohortGroupsConnection

  """Get a single `CohortMembership`."""
  cohortMembership(id: BigInt!): CohortMembership

  """Reads a set of `CohortMembership`."""
  cohortMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CohortMembership`."""
    orderBy: [CohortMembershipsOrderBy!]
  ): [CohortMembership!]

  """Get a single `CohortSubscription`."""
  cohortSubscription(id: BigInt!): CohortSubscription

  """Reads a set of `CohortSubscription`."""
  cohortSubscriptionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortSubscriptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CohortSubscription`."""
    orderBy: [CohortSubscriptionsOrderBy!]
  ): [CohortSubscription!]

  """Reads a set of `Cohort`."""
  cohortsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Cohort`."""
    orderBy: [CohortsOrderBy!]
  ): [Cohort!]

  """Get a single `Couple`."""
  couple(id: BigInt!): Couple

  """Reads a set of `Couple`."""
  couplesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CoupleCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Couple`."""
    orderBy: [CouplesOrderBy!]
  ): [Couple!]
  cstsAthlete(idt: Int!): JSON

  """Reads a set of `Dokumenty`."""
  dokumentiesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DokumentyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Dokumenty`."""
    orderBy: [DokumentiesOrderBy!]
  ): [Dokumenty!]

  """Get a single `Dokumenty`."""
  dokumenty(dId: BigInt!): Dokumenty

  """Get a single `Dokumenty`."""
  dokumentyById(id: BigInt!): Dokumenty

  """Get a single `Event`."""
  event(id: BigInt!): Event

  """Get a single `EventAttendance`."""
  eventAttendance(id: BigInt!): EventAttendance

  """Get a single `EventAttendance`."""
  eventAttendanceByRegistrationIdAndInstanceIdAndPersonId(instanceId: BigInt!, personId: BigInt!, registrationId: BigInt!): EventAttendance

  """Reads a set of `EventAttendance`."""
  eventAttendancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventAttendanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventAttendance`."""
    orderBy: [EventAttendancesOrderBy!]
  ): [EventAttendance!]

  """Get a single `EventExternalRegistration`."""
  eventExternalRegistration(id: BigInt!): EventExternalRegistration

  """Reads a set of `EventExternalRegistration`."""
  eventExternalRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventExternalRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventExternalRegistration`."""
    orderBy: [EventExternalRegistrationsOrderBy!]
  ): [EventExternalRegistration!]

  """Get a single `EventInstance`."""
  eventInstance(id: BigInt!): EventInstance

  """Get a single `EventInstanceTrainer`."""
  eventInstanceTrainer(id: BigInt!): EventInstanceTrainer

  """Reads a set of `EventInstanceTrainer`."""
  eventInstanceTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstanceTrainer`."""
    orderBy: [EventInstanceTrainersOrderBy!]
  ): [EventInstanceTrainer!]
  eventInstancesForRangeList(
    endRange: Datetime

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    onlyMine: Boolean
    onlyType: EventType
    startRange: Datetime
    trainerIds: [BigInt]
  ): [EventInstance!]

  """Reads a set of `EventInstance`."""
  eventInstancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!]
  ): [EventInstance!]

  """Get a single `EventLessonDemand`."""
  eventLessonDemand(id: BigInt!): EventLessonDemand

  """Get a single `EventLessonDemand`."""
  eventLessonDemandByRegistrationIdAndTrainerId(registrationId: BigInt!, trainerId: BigInt!): EventLessonDemand

  """Reads a set of `EventLessonDemand`."""
  eventLessonDemandsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventLessonDemandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventLessonDemand`."""
    orderBy: [EventLessonDemandsOrderBy!]
  ): [EventLessonDemand!]

  """Get a single `EventRegistration`."""
  eventRegistration(id: BigInt!): EventRegistration

  """Get a single `EventRegistration`."""
  eventRegistrationByEventIdAndPersonIdAndCoupleId(coupleId: BigInt!, eventId: BigInt!, personId: BigInt!): EventRegistration

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventRegistrationsConnection

  """Reads a set of `EventRegistration`."""
  eventRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]

  """Get a single `EventTargetCohort`."""
  eventTargetCohort(id: BigInt!): EventTargetCohort

  """Reads a set of `EventTargetCohort`."""
  eventTargetCohortsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTargetCohortCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTargetCohort`."""
    orderBy: [EventTargetCohortsOrderBy!]
  ): [EventTargetCohort!]

  """Get a single `EventTrainer`."""
  eventTrainer(id: BigInt!): EventTrainer

  """Get a single `EventTrainer`."""
  eventTrainerByEventIdAndPersonId(eventId: BigInt!, personId: BigInt!): EventTrainer

  """Reads a set of `EventTrainer`."""
  eventTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTrainer`."""
    orderBy: [EventTrainersOrderBy!]
  ): [EventTrainer!]

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection
  filteredPeopleList(
    """Only read the first `n` values of the set."""
    first: Int
    inCohorts: [BigInt]
    isAdmin: Boolean
    isTrainer: Boolean

    """Skip the first `n` values."""
    offset: Int
  ): [Person!]

  """Get a single `FormResponse`."""
  formResponse(id: BigInt!): FormResponse

  """Reads and enables pagination through a set of `FormResponse`."""
  formResponses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResponseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResponse`."""
    orderBy: [FormResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResponsesConnection

  """Get a single `GalerieDir`."""
  galerieDir(gdId: BigInt!): GalerieDir

  """Get a single `GalerieDir`."""
  galerieDirById(id: BigInt!): GalerieDir

  """Reads and enables pagination through a set of `GalerieDir`."""
  galerieDirs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieDirCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieDir`."""
    orderBy: [GalerieDirsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieDirsConnection

  """Get a single `GalerieFoto`."""
  galerieFoto(gfId: BigInt!): GalerieFoto

  """Get a single `GalerieFoto`."""
  galerieFotoById(id: BigInt!): GalerieFoto

  """Reads and enables pagination through a set of `GalerieFoto`."""
  galerieFotos(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieFotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosConnection
  getCurrentTenant: Tenant
  getCurrentUser: User
  invitationInfo(token: UUID): String

  """Get a single `Location`."""
  location(id: BigInt!): Location

  """Get a single `LocationAttachment`."""
  locationAttachment(locationId: BigInt!, objectName: String!): LocationAttachment

  """Reads and enables pagination through a set of `LocationAttachment`."""
  locationAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LocationAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `LocationAttachment`."""
    orderBy: [LocationAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationAttachmentsConnection

  """Reads and enables pagination through a set of `Location`."""
  locations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LocationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LocationsConnection

  """Get a single `MembershipApplication`."""
  membershipApplication(id: BigInt!): MembershipApplication

  """Reads a set of `MembershipApplication`."""
  membershipApplicationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MembershipApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MembershipApplication`."""
    orderBy: [MembershipApplicationsOrderBy!]
  ): [MembershipApplication!]

  """Reads and enables pagination through a set of `Upozorneni`."""
  myAnnouncements(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    archive: Boolean

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UpozornenisConnection
  myEventInstancesForRangeList(
    endRange: Datetime

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    onlyMine: Boolean
    onlyType: EventType
    startRange: Datetime
  ): [EventInstance!]

  """Get a single `Payment`."""
  payment(id: BigInt!): Payment

  """Get a single `PaymentDebtor`."""
  paymentDebtor(id: BigInt!): PaymentDebtor

  """Reads a set of `PaymentDebtor`."""
  paymentDebtorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentDebtorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PaymentDebtor`."""
    orderBy: [PaymentDebtorsOrderBy!]
  ): [PaymentDebtor!]

  """Get a single `PaymentRecipient`."""
  paymentRecipient(id: BigInt!): PaymentRecipient

  """Reads a set of `PaymentRecipient`."""
  paymentRecipientsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentRecipientCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PaymentRecipient`."""
    orderBy: [PaymentRecipientsOrderBy!]
  ): [PaymentRecipient!]

  """Reads a set of `Payment`."""
  paymentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!]
  ): [Payment!]

  """Reads and enables pagination through a set of `Person`."""
  people(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  ): PeopleConnection

  """Get a single `Person`."""
  person(id: BigInt!): Person

  """Get a single `PersonInvitation`."""
  personInvitation(id: BigInt!): PersonInvitation

  """Get a single `PersonInvitation`."""
  personInvitationByAccessToken(accessToken: UUID!): PersonInvitation

  """Reads a set of `PersonInvitation`."""
  personInvitationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonInvitationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PersonInvitation`."""
    orderBy: [PersonInvitationsOrderBy!]
  ): [PersonInvitation!]

  """Reads and enables pagination through a set of `PlatbyCategory`."""
  platbyCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyCategoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyCategory`."""
    orderBy: [PlatbyCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoriesConnection

  """Get a single `PlatbyCategory`."""
  platbyCategory(pcId: BigInt!): PlatbyCategory

  """Get a single `PlatbyCategory`."""
  platbyCategoryById(id: BigInt!): PlatbyCategory

  """Get a single `PlatbyItem`."""
  platbyItem(piId: BigInt!): PlatbyItem

  """Get a single `PlatbyItem`."""
  platbyItemById(id: BigInt!): PlatbyItem

  """Reads and enables pagination through a set of `PlatbyItem`."""
  platbyItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsConnection

  """Get a single `Posting`."""
  posting(id: BigInt!): Posting

  """Reads a set of `Posting`."""
  postingsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Posting`."""
    orderBy: [PostingsOrderBy!]
  ): [Posting!]

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  refreshJwt: JwtToken

  """Get a single `Room`."""
  room(id: BigInt!): Room

  """Get a single `RoomAttachment`."""
  roomAttachment(objectName: String!, roomId: BigInt!): RoomAttachment

  """Reads and enables pagination through a set of `RoomAttachment`."""
  roomAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomAttachment`."""
    orderBy: [RoomAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomAttachmentsConnection

  """Reads and enables pagination through a set of `Room`."""
  rooms(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomsConnection

  """Reads a set of `Scoreboard`."""
  scoreboardsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreboardCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Scoreboard`."""
    orderBy: [ScoreboardsOrderBy!]
  ): [Scoreboard!]

  """Reads and enables pagination through a set of `Upozorneni`."""
  stickyAnnouncements(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UpozornenisConnection

  """Get a single `Tenant`."""
  tenant(id: BigInt!): Tenant

  """Get a single `TenantAdministrator`."""
  tenantAdministrator(id: BigInt!): TenantAdministrator

  """Reads a set of `TenantAdministrator`."""
  tenantAdministratorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantAdministratorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantAdministrator`."""
    orderBy: [TenantAdministratorsOrderBy!]
  ): [TenantAdministrator!]

  """Get a single `TenantAttachment`."""
  tenantAttachment(objectName: String!, tenantId: BigInt!): TenantAttachment

  """Reads and enables pagination through a set of `TenantAttachment`."""
  tenantAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TenantAttachment`."""
    orderBy: [TenantAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TenantAttachmentsConnection

  """Get a single `TenantLocation`."""
  tenantLocation(id: BigInt!): TenantLocation

  """Reads a set of `TenantLocation`."""
  tenantLocationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantLocationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantLocation`."""
    orderBy: [TenantLocationsOrderBy!]
  ): [TenantLocation!]

  """Get a single `TenantMembership`."""
  tenantMembership(id: BigInt!): TenantMembership

  """Reads a set of `TenantMembership`."""
  tenantMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantMembership`."""
    orderBy: [TenantMembershipsOrderBy!]
  ): [TenantMembership!]

  """Get a single `TenantTrainer`."""
  tenantTrainer(id: BigInt!): TenantTrainer

  """Reads a set of `TenantTrainer`."""
  tenantTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantTrainer`."""
    orderBy: [TenantTrainersOrderBy!]
  ): [TenantTrainer!]

  """Reads a set of `Tenant`."""
  tenantsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Tenant`."""
    orderBy: [TenantsOrderBy!]
  ): [Tenant!]

  """Get a single `Transaction`."""
  transaction(id: BigInt!): Transaction

  """Reads and enables pagination through a set of `Transaction`."""
  transactions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TransactionsConnection

  """Get a single `Upozorneni`."""
  upozorneni(upId: BigInt!): Upozorneni

  """Get a single `Upozorneni`."""
  upozorneniById(id: BigInt!): Upozorneni

  """Reads and enables pagination through a set of `UpozorneniSkupiny`."""
  upozorneniSkupinies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniSkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesConnection

  """Get a single `UpozorneniSkupiny`."""
  upozorneniSkupiny(upsId: BigInt!): UpozorneniSkupiny

  """Get a single `UpozorneniSkupiny`."""
  upozorneniSkupinyById(id: BigInt!): UpozorneniSkupiny

  """Reads and enables pagination through a set of `Upozorneni`."""
  upozornenis(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisConnection

  """Get a single `User`."""
  user(uId: BigInt!): User

  """Get a single `User`."""
  userById(id: BigInt!): User

  """Reads a set of `UserProxy`."""
  userProxiesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserProxyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserProxy`."""
    orderBy: [UserProxiesOrderBy!]
  ): [UserProxy!]

  """Get a single `UserProxy`."""
  userProxy(id: BigInt!): UserProxy

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
  wdsfAthlete(min: Int!): JSON
}

"""All input for the `registerToEvent` mutation."""
input RegisterToEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lessons: [EventLessonDemandPatch]!
  registration: EventRegistrationInput!
}

"""All input for the `registerToEventMany` mutation."""
input RegisterToEventManyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  registrations: [RegisterToEventTypeInput]
}

"""The output of our `registerToEventMany` mutation."""
type RegisterToEventManyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  eventRegistrations: [EventRegistration!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our `registerToEvent` mutation."""
type RegisterToEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Couple` that is related to this `EventRegistration`."""
  couple: Couple

  """Reads a single `Event` that is related to this `EventRegistration`."""
  event: Event

  """An edge for our `EventRegistration`. May be used by Relay 1."""
  eventRegistrationEdge(
    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): EventRegistrationsEdge

  """Reads a single `Person` that is related to this `EventRegistration`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  registration: EventRegistration

  """
  Reads a single `EventTargetCohort` that is related to this `EventRegistration`.
  """
  targetCohort: EventTargetCohort

  """Reads a single `Tenant` that is related to this `EventRegistration`."""
  tenant: Tenant
}

"""An input for mutations affecting `RegisterToEventType`"""
input RegisterToEventTypeInput {
  coupleId: BigInt
  eventId: BigInt
  lessons: [EventLessonDemandInput]
  note: String
  personId: BigInt
}

"""All input for the `registerUsingInvitation` mutation."""
input RegisterUsingInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  login: String!
  passwd: String!
  token: UUID!
}

"""The output of our `registerUsingInvitation` mutation."""
type RegisterUsingInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: RegisterUsingInvitationRecord
}

type RegisterUsingInvitationRecord {
  jwt: JwtToken
  usr: User
}

"""All input for the `registerWithoutInvitation` mutation."""
input RegisterWithoutInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  login: String!
  passwd: String!
}

"""The output of our `registerWithoutInvitation` mutation."""
type RegisterWithoutInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: RegisterWithoutInvitationRecord
}

type RegisterWithoutInvitationRecord {
  jwt: JwtToken
  usr: User
}

"""All input for the `rejectMembershipApplication` mutation."""
input RejectMembershipApplicationInput {
  applicationId: BigInt

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `rejectMembershipApplication` mutation."""
type RejectMembershipApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  membershipApplication: MembershipApplication

  """An edge for our `MembershipApplication`. May be used by Relay 1."""
  membershipApplicationEdge(
    """The method to use when ordering `MembershipApplication`."""
    orderBy: [MembershipApplicationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): MembershipApplicationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Tenant` that is related to this `MembershipApplication`.
  """
  tenant: Tenant

  """Reads a single `User` that is related to this `MembershipApplication`."""
  user: User
}

enum RelationshipStatus {
  ACTIVE
  EXPIRED
  PENDING
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Room {
  description: JSON!
  id: BigInt!

  """Reads a single `Location` that is related to this `Room`."""
  location: Location
  locationId: BigInt
  name: String!

  """Reads and enables pagination through a set of `RoomAttachment`."""
  roomAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoomAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RoomAttachment`."""
    orderBy: [RoomAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RoomAttachmentsConnection!
}

type RoomAttachment {
  """Reads a single `Attachment` that is related to this `RoomAttachment`."""
  attachment: Attachment
  objectName: String!

  """Reads a single `Room` that is related to this `RoomAttachment`."""
  room: Room
  roomId: BigInt!
}

"""
A condition to be used against `RoomAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RoomAttachmentCondition {
  """Checks for equality with the object’s `objectName` field."""
  objectName: String

  """Checks for equality with the object’s `roomId` field."""
  roomId: BigInt
}

"""A connection to a list of `RoomAttachment` values."""
type RoomAttachmentsConnection {
  """
  A list of edges which contains the `RoomAttachment` and cursor to aid in pagination.
  """
  edges: [RoomAttachmentsEdge!]!

  """A list of `RoomAttachment` objects."""
  nodes: [RoomAttachment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RoomAttachment` you could get from the connection."""
  totalCount: Int!
}

"""A `RoomAttachment` edge in the connection."""
type RoomAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RoomAttachment` at the end of the edge."""
  node: RoomAttachment!
}

"""Methods to use when ordering `RoomAttachment`."""
enum RoomAttachmentsOrderBy {
  NATURAL
  OBJECT_NAME_ASC
  OBJECT_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROOM_ID_ASC
  ROOM_ID_DESC
}

"""
A condition to be used against `Room` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RoomCondition {
  """Checks for equality with the object’s `description` field."""
  description: JSON

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `locationId` field."""
  locationId: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Room`"""
input RoomInput {
  description: JSON!
  id: BigInt
  locationId: BigInt
  name: String!
}

"""Represents an update to a `Room`. Fields that are set will be updated."""
input RoomPatch {
  description: JSON
  id: BigInt
  locationId: BigInt
  name: String
}

"""A connection to a list of `Room` values."""
type RoomsConnection {
  """
  A list of edges which contains the `Room` and cursor to aid in pagination.
  """
  edges: [RoomsEdge!]!

  """A list of `Room` objects."""
  nodes: [Room!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Room` you could get from the connection."""
  totalCount: Int!
}

"""A `Room` edge in the connection."""
type RoomsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Room` at the end of the edge."""
  node: Room!
}

"""Methods to use when ordering `Room`."""
enum RoomsOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  LOCATION_ID_ASC
  LOCATION_ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Scoreboard {
  eventTotalScore: BigInt
  groupTotalScore: BigInt
  lessonTotalScore: BigInt

  """Reads a single `Person` that is related to this `Scoreboard`."""
  person: Person
  personId: BigInt
  ranking: BigInt
  totalScore: BigInt
}

"""
A condition to be used against `Scoreboard` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ScoreboardCondition {
  """Checks for equality with the object’s `eventTotalScore` field."""
  eventTotalScore: BigInt

  """Checks for equality with the object’s `groupTotalScore` field."""
  groupTotalScore: BigInt

  """Checks for equality with the object’s `lessonTotalScore` field."""
  lessonTotalScore: BigInt

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `ranking` field."""
  ranking: BigInt

  """Checks for equality with the object’s `totalScore` field."""
  totalScore: BigInt
}

"""Methods to use when ordering `Scoreboard`."""
enum ScoreboardsOrderBy {
  EVENT_TOTAL_SCORE_ASC
  EVENT_TOTAL_SCORE_DESC
  GROUP_TOTAL_SCORE_ASC
  GROUP_TOTAL_SCORE_DESC
  LESSON_TOTAL_SCORE_ASC
  LESSON_TOTAL_SCORE_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  RANKING_ASC
  RANKING_DESC
  TOTAL_SCORE_ASC
  TOTAL_SCORE_DESC
}

"""All input for the `setLessonDemand` mutation."""
input SetLessonDemandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lessonCount: Int!
  registrationId: BigInt!
  trainerId: BigInt!
}

"""The output of our `setLessonDemand` mutation."""
type SetLessonDemandPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  eventLessonDemand: EventLessonDemand

  """An edge for our `EventLessonDemand`. May be used by Relay 1."""
  eventLessonDemandEdge(
    """The method to use when ordering `EventLessonDemand`."""
    orderBy: [EventLessonDemandsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): EventLessonDemandsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EventRegistration` that is related to this `EventLessonDemand`.
  """
  registration: EventRegistration

  """Reads a single `Tenant` that is related to this `EventLessonDemand`."""
  tenant: Tenant

  """
  Reads a single `EventTrainer` that is related to this `EventLessonDemand`.
  """
  trainer: EventTrainer
}

"""All input for the `submitForm` mutation."""
input SubmitFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  data: JSON!
  type: String!
  url: String!
}

"""The output of our `submitForm` mutation."""
type SubmitFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Tenant {
  """Reads and enables pagination through a set of `Account`."""
  accountsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]
  ): [Account!]!
  address: AddressDomain

  """Reads and enables pagination through a set of `Aktuality`."""
  aktualities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AktualityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesConnection!
  bankAccount: String!

  """Reads and enables pagination through a set of `CohortGroup`."""
  cohortGroups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CohortGroup`."""
    orderBy: [CohortGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CohortGroupsConnection!

  """Reads and enables pagination through a set of `CohortMembership`."""
  cohortMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CohortMembership`."""
    orderBy: [CohortMembershipsOrderBy!]
  ): [CohortMembership!]!

  """Reads and enables pagination through a set of `CohortSubscription`."""
  cohortSubscriptionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortSubscriptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CohortSubscription`."""
    orderBy: [CohortSubscriptionsOrderBy!]
  ): [CohortSubscription!]!

  """Reads and enables pagination through a set of `Cohort`."""
  cohortsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CohortCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Cohort`."""
    orderBy: [CohortsOrderBy!]
  ): [Cohort!]!
  couplesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Couple!]
  czDic: String!
  czIco: String!
  description: String!

  """Reads and enables pagination through a set of `Dokumenty`."""
  dokumentiesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DokumentyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Dokumenty`."""
    orderBy: [DokumentiesOrderBy!]
  ): [Dokumenty!]!

  """Reads and enables pagination through a set of `EventAttendance`."""
  eventAttendancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventAttendanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventAttendance`."""
    orderBy: [EventAttendancesOrderBy!]
  ): [EventAttendance!]!

  """
  Reads and enables pagination through a set of `EventExternalRegistration`.
  """
  eventExternalRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventExternalRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventExternalRegistration`."""
    orderBy: [EventExternalRegistrationsOrderBy!]
  ): [EventExternalRegistration!]!

  """Reads and enables pagination through a set of `EventInstanceTrainer`."""
  eventInstanceTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstanceTrainer`."""
    orderBy: [EventInstanceTrainersOrderBy!]
  ): [EventInstanceTrainer!]!

  """Reads and enables pagination through a set of `EventInstance`."""
  eventInstancesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!]
  ): [EventInstance!]!

  """Reads and enables pagination through a set of `EventLessonDemand`."""
  eventLessonDemandsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventLessonDemandCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventLessonDemand`."""
    orderBy: [EventLessonDemandsOrderBy!]
  ): [EventLessonDemand!]!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventRegistrationsConnection!

  """Reads and enables pagination through a set of `EventRegistration`."""
  eventRegistrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventRegistration`."""
    orderBy: [EventRegistrationsOrderBy!]
  ): [EventRegistration!]!

  """Reads and enables pagination through a set of `EventTargetCohort`."""
  eventTargetCohortsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTargetCohortCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTargetCohort`."""
    orderBy: [EventTargetCohortsOrderBy!]
  ): [EventTargetCohort!]!

  """Reads and enables pagination through a set of `EventTrainer`."""
  eventTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventTrainer`."""
    orderBy: [EventTrainersOrderBy!]
  ): [EventTrainer!]!

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection!

  """Reads and enables pagination through a set of `FormResponse`."""
  formResponses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResponseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormResponse`."""
    orderBy: [FormResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResponsesConnection!

  """Reads and enables pagination through a set of `GalerieDir`."""
  galerieDirs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieDirCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieDir`."""
    orderBy: [GalerieDirsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieDirsConnection!

  """Reads and enables pagination through a set of `GalerieFoto`."""
  galerieFotos(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieFotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosConnection!
  id: BigInt!

  """Reads and enables pagination through a set of `MembershipApplication`."""
  membershipApplicationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MembershipApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MembershipApplication`."""
    orderBy: [MembershipApplicationsOrderBy!]
  ): [MembershipApplication!]!
  name: String!
  origins: [String]!

  """Reads and enables pagination through a set of `PaymentDebtor`."""
  paymentDebtorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentDebtorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PaymentDebtor`."""
    orderBy: [PaymentDebtorsOrderBy!]
  ): [PaymentDebtor!]!

  """Reads and enables pagination through a set of `PaymentRecipient`."""
  paymentRecipientsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentRecipientCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PaymentRecipient`."""
    orderBy: [PaymentRecipientsOrderBy!]
  ): [PaymentRecipient!]!

  """Reads and enables pagination through a set of `Payment`."""
  paymentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!]
  ): [Payment!]!

  """Reads and enables pagination through a set of `PersonInvitation`."""
  personInvitationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonInvitationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PersonInvitation`."""
    orderBy: [PersonInvitationsOrderBy!]
  ): [PersonInvitation!]!

  """Reads and enables pagination through a set of `PlatbyCategory`."""
  platbyCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyCategoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyCategory`."""
    orderBy: [PlatbyCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoriesConnection!

  """Reads and enables pagination through a set of `PlatbyItem`."""
  platbyItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsConnection!

  """Reads and enables pagination through a set of `Posting`."""
  postingsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Posting`."""
    orderBy: [PostingsOrderBy!]
  ): [Posting!]!

  """Reads and enables pagination through a set of `TenantAdministrator`."""
  tenantAdministratorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantAdministratorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantAdministrator`."""
    orderBy: [TenantAdministratorsOrderBy!]
  ): [TenantAdministrator!]!

  """Reads and enables pagination through a set of `TenantAttachment`."""
  tenantAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TenantAttachment`."""
    orderBy: [TenantAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TenantAttachmentsConnection!

  """Reads and enables pagination through a set of `TenantLocation`."""
  tenantLocationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantLocationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantLocation`."""
    orderBy: [TenantLocationsOrderBy!]
  ): [TenantLocation!]!

  """Reads and enables pagination through a set of `TenantMembership`."""
  tenantMembershipsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantMembershipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantMembership`."""
    orderBy: [TenantMembershipsOrderBy!]
  ): [TenantMembership!]!

  """Reads and enables pagination through a set of `TenantTrainer`."""
  tenantTrainersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TenantTrainerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TenantTrainer`."""
    orderBy: [TenantTrainersOrderBy!]
  ): [TenantTrainer!]!

  """Reads and enables pagination through a set of `Transaction`."""
  transactions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TransactionsConnection!

  """Reads and enables pagination through a set of `UpozorneniSkupiny`."""
  upozorneniSkupinies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniSkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesConnection!

  """Reads and enables pagination through a set of `Upozorneni`."""
  upozornenis(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisConnection!

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection!
}

"""All input for the `tenantAccount` mutation."""
input TenantAccountInput {
  c: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `tenantAccount` mutation."""
type TenantAccountPayload {
  acc: Account

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): AccountsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `Account`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Account`."""
  tenant: Tenant
}

type TenantAdministrator {
  active: Boolean!
  createdAt: Datetime!
  description: String!
  id: BigInt!
  isVisible: Boolean!

  """Reads a single `Person` that is related to this `TenantAdministrator`."""
  person: Person
  personId: BigInt!
  since: Datetime!
  status: RelationshipStatus!

  """Reads a single `Tenant` that is related to this `TenantAdministrator`."""
  tenant: Tenant
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime!
}

"""
A condition to be used against `TenantAdministrator` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TenantAdministratorCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isVisible` field."""
  isVisible: Boolean

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `status` field."""
  status: RelationshipStatus

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `TenantAdministrator`"""
input TenantAdministratorInput {
  active: Boolean
  createdAt: Datetime
  description: String
  isVisible: Boolean
  personId: BigInt!
  since: Datetime
  status: RelationshipStatus
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `TenantAdministrator`. Fields that are set will be updated.
"""
input TenantAdministratorPatch {
  active: Boolean
  createdAt: Datetime
  description: String
  isVisible: Boolean
  personId: BigInt
  since: Datetime
  status: RelationshipStatus
  tenantId: BigInt
  until: Datetime
  updatedAt: Datetime
}

"""Methods to use when ordering `TenantAdministrator`."""
enum TenantAdministratorsOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  IS_VISIBLE_ASC
  IS_VISIBLE_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  STATUS_ASC
  STATUS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type TenantAttachment {
  """
  Reads a single `Attachment` that is related to this `TenantAttachment`.
  """
  attachment: Attachment
  objectName: String!

  """Reads a single `Tenant` that is related to this `TenantAttachment`."""
  tenant: Tenant
  tenantId: BigInt!
  type: TenantAttachmentType
}

"""
A condition to be used against `TenantAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TenantAttachmentCondition {
  """Checks for equality with the object’s `objectName` field."""
  objectName: String

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `type` field."""
  type: TenantAttachmentType
}

enum TenantAttachmentType {
  LOGO
  MAP
  PHOTO
}

"""A connection to a list of `TenantAttachment` values."""
type TenantAttachmentsConnection {
  """
  A list of edges which contains the `TenantAttachment` and cursor to aid in pagination.
  """
  edges: [TenantAttachmentsEdge!]!

  """A list of `TenantAttachment` objects."""
  nodes: [TenantAttachment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TenantAttachment` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TenantAttachment` edge in the connection."""
type TenantAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TenantAttachment` at the end of the edge."""
  node: TenantAttachment!
}

"""Methods to use when ordering `TenantAttachment`."""
enum TenantAttachmentsOrderBy {
  NATURAL
  OBJECT_NAME_ASC
  OBJECT_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  TYPE_ASC
  TYPE_DESC
}

"""
A condition to be used against `Tenant` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TenantCondition {
  """Checks for equality with the object’s `address` field."""
  address: AddressDomainInput

  """Checks for equality with the object’s `bankAccount` field."""
  bankAccount: String

  """Checks for equality with the object’s `czDic` field."""
  czDic: String

  """Checks for equality with the object’s `czIco` field."""
  czIco: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `origins` field."""
  origins: [String]
}

type TenantLocation {
  address: AddressDomain
  createdAt: Datetime!
  description: String!

  """Reads and enables pagination through a set of `EventInstance`."""
  eventInstancesByLocationIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventInstanceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventInstance`."""
    orderBy: [EventInstancesOrderBy!]
  ): [EventInstance!]!

  """Reads and enables pagination through a set of `Event`."""
  eventsByLocationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection!
  id: BigInt!
  isPublic: Boolean
  name: String!

  """Reads a single `Tenant` that is related to this `TenantLocation`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `TenantLocation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TenantLocationCondition {
  """Checks for equality with the object’s `address` field."""
  address: AddressDomainInput

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isPublic` field."""
  isPublic: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `TenantLocation`"""
input TenantLocationInput {
  address: AddressDomainInput
  createdAt: Datetime
  description: String
  isPublic: Boolean
  name: String!
  tenantId: BigInt!
  updatedAt: Datetime
}

"""
Represents an update to a `TenantLocation`. Fields that are set will be updated.
"""
input TenantLocationPatch {
  address: AddressDomainInput
  createdAt: Datetime
  description: String
  isPublic: Boolean
  name: String
  tenantId: BigInt
  updatedAt: Datetime
}

"""Methods to use when ordering `TenantLocation`."""
enum TenantLocationsOrderBy {
  ADDRESS_ASC
  ADDRESS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type TenantMembership {
  active: Boolean!
  createdAt: Datetime!
  id: BigInt!

  """Reads a single `Person` that is related to this `TenantMembership`."""
  person: Person
  personId: BigInt!
  since: Datetime!
  status: RelationshipStatus!

  """Reads a single `Tenant` that is related to this `TenantMembership`."""
  tenant: Tenant
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime!
}

"""
A condition to be used against `TenantMembership` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TenantMembershipCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `status` field."""
  status: RelationshipStatus

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `TenantMembership`"""
input TenantMembershipInput {
  active: Boolean
  createdAt: Datetime
  personId: BigInt!
  since: Datetime
  status: RelationshipStatus
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `TenantMembership`. Fields that are set will be updated.
"""
input TenantMembershipPatch {
  active: Boolean
  createdAt: Datetime
  personId: BigInt
  since: Datetime
  status: RelationshipStatus
  tenantId: BigInt
  until: Datetime
  updatedAt: Datetime
}

"""Methods to use when ordering `TenantMembership`."""
enum TenantMembershipsOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  STATUS_ASC
  STATUS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Tenant`. Fields that are set will be updated.
"""
input TenantPatch {
  address: AddressDomainInput
  bankAccount: String
  czDic: String
  czIco: String
  description: String
  id: BigInt
  name: String
  origins: [String]
}

type TenantTrainer {
  active: Boolean!
  createPayoutPayments: Boolean!
  createdAt: Datetime!
  description: String!
  guestPayout45Min: Price
  guestPrice45Min: Price
  id: BigInt!
  isVisible: Boolean
  memberPayout45Min: Price
  memberPrice45Min: Price

  """Reads a single `Person` that is related to this `TenantTrainer`."""
  person: Person
  personId: BigInt!
  since: Datetime!
  status: RelationshipStatus!

  """Reads a single `Tenant` that is related to this `TenantTrainer`."""
  tenant: Tenant
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime!
}

"""
A condition to be used against `TenantTrainer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TenantTrainerCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `createPayoutPayments` field."""
  createPayoutPayments: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `guestPayout45Min` field."""
  guestPayout45Min: PriceInput

  """Checks for equality with the object’s `guestPrice45Min` field."""
  guestPrice45Min: PriceInput

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isVisible` field."""
  isVisible: Boolean

  """Checks for equality with the object’s `memberPayout45Min` field."""
  memberPayout45Min: PriceInput

  """Checks for equality with the object’s `memberPrice45Min` field."""
  memberPrice45Min: PriceInput

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `status` field."""
  status: RelationshipStatus

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `TenantTrainer`"""
input TenantTrainerInput {
  active: Boolean
  createPayoutPayments: Boolean
  createdAt: Datetime
  description: String
  guestPayout45Min: PriceInput
  guestPrice45Min: PriceInput
  isVisible: Boolean
  memberPayout45Min: PriceInput
  memberPrice45Min: PriceInput
  personId: BigInt!
  since: Datetime
  status: RelationshipStatus
  tenantId: BigInt!
  until: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `TenantTrainer`. Fields that are set will be updated.
"""
input TenantTrainerPatch {
  active: Boolean
  createPayoutPayments: Boolean
  createdAt: Datetime
  description: String
  guestPayout45Min: PriceInput
  guestPrice45Min: PriceInput
  isVisible: Boolean
  memberPayout45Min: PriceInput
  memberPrice45Min: PriceInput
  personId: BigInt
  since: Datetime
  status: RelationshipStatus
  tenantId: BigInt
  until: Datetime
  updatedAt: Datetime
}

"""Methods to use when ordering `TenantTrainer`."""
enum TenantTrainersOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATE_PAYOUT_PAYMENTS_ASC
  CREATE_PAYOUT_PAYMENTS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  GUEST_PAYOUT_45MIN_ASC
  GUEST_PAYOUT_45MIN_DESC
  GUEST_PRICE_45MIN_ASC
  GUEST_PRICE_45MIN_DESC
  ID_ASC
  ID_DESC
  IS_VISIBLE_ASC
  IS_VISIBLE_DESC
  MEMBER_PAYOUT_45MIN_ASC
  MEMBER_PAYOUT_45MIN_DESC
  MEMBER_PRICE_45MIN_ASC
  MEMBER_PRICE_45MIN_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  STATUS_ASC
  STATUS_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Methods to use when ordering `Tenant`."""
enum TenantsOrderBy {
  ADDRESS_ASC
  ADDRESS_DESC
  BANK_ACCOUNT_ASC
  BANK_ACCOUNT_DESC
  CZ_DIC_ASC
  CZ_DIC_DESC
  CZ_ICO_ASC
  CZ_ICO_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Transaction {
  accountingPeriodId: BigInt!
  createdAt: Datetime!
  description: String
  effectiveDate: Datetime!
  id: BigInt!

  """Reads a single `Payment` that is related to this `Transaction`."""
  payment: Payment
  paymentId: BigInt

  """Reads and enables pagination through a set of `Posting`."""
  postingsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Posting`."""
    orderBy: [PostingsOrderBy!]
  ): [Posting!]!
  source: TransactionSource!

  """Reads a single `Tenant` that is related to this `Transaction`."""
  tenant: Tenant
  tenantId: BigInt!
  updatedAt: Datetime!
}

"""
A condition to be used against `Transaction` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TransactionCondition {
  """Checks for equality with the object’s `accountingPeriodId` field."""
  accountingPeriodId: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `effectiveDate` field."""
  effectiveDate: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `paymentId` field."""
  paymentId: BigInt

  """Checks for equality with the object’s `source` field."""
  source: TransactionSource

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

enum TransactionSource {
  AUTO_BANK
  AUTO_CREDIT
  MANUAL_BANK
  MANUAL_CASH
  MANUAL_CREDIT
}

"""A connection to a list of `Transaction` values."""
type TransactionsConnection {
  """
  A list of edges which contains the `Transaction` and cursor to aid in pagination.
  """
  edges: [TransactionsEdge!]!

  """A list of `Transaction` objects."""
  nodes: [Transaction!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Transaction` you could get from the connection."""
  totalCount: Int!
}

"""A `Transaction` edge in the connection."""
type TransactionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Transaction` at the end of the edge."""
  node: Transaction!
}

"""Methods to use when ordering `Transaction`."""
enum TransactionsOrderBy {
  ACCOUNTING_PERIOD_ID_ASC
  ACCOUNTING_PERIOD_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EFFECTIVE_DATE_ASC
  EFFECTIVE_DATE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PAYMENT_ID_ASC
  PAYMENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ASC
  SOURCE_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateAktualityById` mutation."""
input UpdateAktualityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Aktuality` being updated.
  """
  patch: AktualityPatch!
}

"""All input for the `updateAktuality` mutation."""
input UpdateAktualityInput {
  atId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Aktuality` being updated.
  """
  patch: AktualityPatch!
}

"""The output of our update `Aktuality` mutation."""
type UpdateAktualityPayload {
  """The `Aktuality` that was updated by this mutation."""
  aktuality: Aktuality

  """An edge for our `Aktuality`. May be used by Relay 1."""
  aktualityEdge(
    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): AktualitiesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `GalerieFoto` that is related to this `Aktuality`."""
  galerieFotoByAtFotoMain: GalerieFoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Aktuality`."""
  tenant: Tenant

  """Reads a single `User` that is related to this `Aktuality`."""
  user: User
}

"""All input for the `updateCohortGroup` mutation."""
input UpdateCohortGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `CohortGroup` being updated.
  """
  patch: CohortGroupPatch!
}

"""The output of our update `CohortGroup` mutation."""
type UpdateCohortGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CohortGroup` that was updated by this mutation."""
  cohortGroup: CohortGroup

  """An edge for our `CohortGroup`. May be used by Relay 1."""
  cohortGroupEdge(
    """The method to use when ordering `CohortGroup`."""
    orderBy: [CohortGroupsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CohortGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `CohortGroup`."""
  tenant: Tenant
}

"""All input for the `updateCohort` mutation."""
input UpdateCohortInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Cohort` being updated.
  """
  patch: CohortPatch!
}

"""All input for the `updateCohortMembership` mutation."""
input UpdateCohortMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `CohortMembership` being updated.
  """
  patch: CohortMembershipPatch!
}

"""The output of our update `CohortMembership` mutation."""
type UpdateCohortMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Cohort` that is related to this `CohortMembership`."""
  cohort: Cohort

  """The `CohortMembership` that was updated by this mutation."""
  cohortMembership: CohortMembership

  """Reads a single `Person` that is related to this `CohortMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `CohortMembership`."""
  tenant: Tenant
}

"""The output of our update `Cohort` mutation."""
type UpdateCohortPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Cohort` that was updated by this mutation."""
  cohort: Cohort

  """Reads a single `CohortGroup` that is related to this `Cohort`."""
  cohortGroup: CohortGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Cohort`."""
  tenant: Tenant
}

"""All input for the `updateCouple` mutation."""
input UpdateCoupleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Couple` being updated.
  """
  patch: CouplePatch!
}

"""The output of our update `Couple` mutation."""
type UpdateCouplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Couple` that was updated by this mutation."""
  couple: Couple

  """Reads a single `Person` that is related to this `Couple`."""
  man: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Person` that is related to this `Couple`."""
  woman: Person
}

"""All input for the `updateDokumentyById` mutation."""
input UpdateDokumentyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Dokumenty` being updated.
  """
  patch: DokumentyPatch!
}

"""All input for the `updateDokumenty` mutation."""
input UpdateDokumentyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dId: BigInt!

  """
  An object where the defined keys will be set on the `Dokumenty` being updated.
  """
  patch: DokumentyPatch!
}

"""The output of our update `Dokumenty` mutation."""
type UpdateDokumentyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dokumenty` that was updated by this mutation."""
  dokumenty: Dokumenty

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Dokumenty`."""
  tenant: Tenant

  """Reads a single `User` that is related to this `Dokumenty`."""
  userByDKdo: User
}

"""All input for the `updateEventAttendance` mutation."""
input UpdateEventAttendanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  instanceId: BigInt
  note: String
  personId: BigInt
  status: AttendanceType
}

"""The output of our `updateEventAttendance` mutation."""
type UpdateEventAttendancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  eventAttendance: EventAttendance

  """An edge for our `EventAttendance`. May be used by Relay 1."""
  eventAttendanceEdge(
    """The method to use when ordering `EventAttendance`."""
    orderBy: [EventAttendancesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): EventAttendancesEdge

  """
  Reads a single `EventInstance` that is related to this `EventAttendance`.
  """
  instance: EventInstance

  """Reads a single `Person` that is related to this `EventAttendance`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EventRegistration` that is related to this `EventAttendance`.
  """
  registration: EventRegistration

  """Reads a single `Tenant` that is related to this `EventAttendance`."""
  tenant: Tenant
}

"""All input for the `updateEvent` mutation."""
input UpdateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  patch: EventPatch!
}

"""All input for the `updateEventInstance` mutation."""
input UpdateEventInstanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `EventInstance` being updated.
  """
  patch: EventInstancePatch!
}

"""The output of our update `EventInstance` mutation."""
type UpdateEventInstancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `EventInstance`."""
  event: Event

  """The `EventInstance` that was updated by this mutation."""
  eventInstance: EventInstance

  """
  Reads a single `TenantLocation` that is related to this `EventInstance`.
  """
  location: TenantLocation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `EventInstance`."""
  tenant: Tenant
}

"""The output of our update `Event` mutation."""
type UpdateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was updated by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """Reads a single `TenantLocation` that is related to this `Event`."""
  location: TenantLocation

  """Reads a single `Account` that is related to this `Event`."""
  paymentRecipient: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Event`."""
  tenant: Tenant
}

"""All input for the `updateLocation` mutation."""
input UpdateLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Location` being updated.
  """
  patch: LocationPatch!
}

"""The output of our update `Location` mutation."""
type UpdateLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Location` that was updated by this mutation."""
  location: Location

  """An edge for our `Location`. May be used by Relay 1."""
  locationEdge(
    """The method to use when ordering `Location`."""
    orderBy: [LocationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): LocationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMembershipApplication` mutation."""
input UpdateMembershipApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `MembershipApplication` being updated.
  """
  patch: MembershipApplicationPatch!
}

"""The output of our update `MembershipApplication` mutation."""
type UpdateMembershipApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MembershipApplication` that was updated by this mutation."""
  membershipApplication: MembershipApplication

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Tenant` that is related to this `MembershipApplication`.
  """
  tenant: Tenant

  """Reads a single `User` that is related to this `MembershipApplication`."""
  user: User
}

"""All input for the `updatePayment` mutation."""
input UpdatePaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Payment` being updated.
  """
  patch: PaymentPatch!
}

"""The output of our update `Payment` mutation."""
type UpdatePaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `CohortSubscription` that is related to this `Payment`."""
  cohortSubscription: CohortSubscription

  """Reads a single `EventInstance` that is related to this `Payment`."""
  eventInstance: EventInstance

  """Reads a single `EventRegistration` that is related to this `Payment`."""
  eventRegistration: EventRegistration

  """The `Payment` that was updated by this mutation."""
  payment: Payment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Payment`."""
  tenant: Tenant
}

"""All input for the `updatePerson` mutation."""
input UpdatePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  patch: PersonPatch!
}

"""The output of our update `Person` mutation."""
type UpdatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was updated by this mutation."""
  person: Person

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PeopleEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateRoom` mutation."""
input UpdateRoomInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Room` being updated.
  """
  patch: RoomPatch!
}

"""The output of our update `Room` mutation."""
type UpdateRoomPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Location` that is related to this `Room`."""
  location: Location

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Room` that was updated by this mutation."""
  room: Room

  """An edge for our `Room`. May be used by Relay 1."""
  roomEdge(
    """The method to use when ordering `Room`."""
    orderBy: [RoomsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): RoomsEdge
}

"""All input for the `updateTenantAdministrator` mutation."""
input UpdateTenantAdministratorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `TenantAdministrator` being updated.
  """
  patch: TenantAdministratorPatch!
}

"""The output of our update `TenantAdministrator` mutation."""
type UpdateTenantAdministratorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantAdministrator`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantAdministrator`."""
  tenant: Tenant

  """The `TenantAdministrator` that was updated by this mutation."""
  tenantAdministrator: TenantAdministrator
}

"""All input for the `updateTenant` mutation."""
input UpdateTenantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Tenant` being updated.
  """
  patch: TenantPatch!
}

"""All input for the `updateTenantLocation` mutation."""
input UpdateTenantLocationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `TenantLocation` being updated.
  """
  patch: TenantLocationPatch!
}

"""The output of our update `TenantLocation` mutation."""
type UpdateTenantLocationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantLocation`."""
  tenant: Tenant

  """The `TenantLocation` that was updated by this mutation."""
  tenantLocation: TenantLocation
}

"""All input for the `updateTenantMembership` mutation."""
input UpdateTenantMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `TenantMembership` being updated.
  """
  patch: TenantMembershipPatch!
}

"""The output of our update `TenantMembership` mutation."""
type UpdateTenantMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantMembership`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantMembership`."""
  tenant: Tenant

  """The `TenantMembership` that was updated by this mutation."""
  tenantMembership: TenantMembership
}

"""The output of our update `Tenant` mutation."""
type UpdateTenantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tenant` that was updated by this mutation."""
  tenant: Tenant
}

"""All input for the `updateTenantTrainer` mutation."""
input UpdateTenantTrainerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `TenantTrainer` being updated.
  """
  patch: TenantTrainerPatch!
}

"""The output of our update `TenantTrainer` mutation."""
type UpdateTenantTrainerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `TenantTrainer`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `TenantTrainer`."""
  tenant: Tenant

  """The `TenantTrainer` that was updated by this mutation."""
  tenantTrainer: TenantTrainer
}

"""All input for the `updateUpozorneniById` mutation."""
input UpdateUpozorneniByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `Upozorneni` being updated.
  """
  patch: UpozorneniPatch!
}

"""All input for the `updateUpozorneni` mutation."""
input UpdateUpozorneniInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Upozorneni` being updated.
  """
  patch: UpozorneniPatch!
  upId: BigInt!
}

"""The output of our update `Upozorneni` mutation."""
type UpdateUpozorneniPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Upozorneni`."""
  tenant: Tenant

  """The `Upozorneni` that was updated by this mutation."""
  upozorneni: Upozorneni

  """An edge for our `Upozorneni`. May be used by Relay 1."""
  upozorneniEdge(
    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UpozornenisEdge

  """Reads a single `User` that is related to this `Upozorneni`."""
  userByUpKdo: User
}

"""All input for the `updateUserProxy` mutation."""
input UpdateUserProxyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!

  """
  An object where the defined keys will be set on the `UserProxy` being updated.
  """
  patch: UserProxyPatch!
}

"""The output of our update `UserProxy` mutation."""
type UpdateUserProxyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Person` that is related to this `UserProxy`."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserProxy`."""
  user: User

  """The `UserProxy` that was updated by this mutation."""
  userProxy: UserProxy
}

type Upozorneni {
  createdAt: Datetime!
  id: BigInt!
  isVisible: Boolean
  scheduledSince: Datetime
  scheduledUntil: Datetime
  sticky: Boolean!

  """Reads a single `Tenant` that is related to this `Upozorneni`."""
  tenant: Tenant
  tenantId: BigInt!
  upId: BigInt!
  upKdo: BigInt
  upLock: Boolean!
  upNadpis: String!
  upText: String!
  upTimestamp: Datetime!
  upTimestampAdd: Datetime!
  updatedAt: Datetime

  """Reads and enables pagination through a set of `UpozorneniSkupiny`."""
  upozorneniSkupiniesByUpsIdRodic(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniSkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesConnection!

  """Reads a single `User` that is related to this `Upozorneni`."""
  userByUpKdo: User
}

"""
A condition to be used against `Upozorneni` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UpozorneniCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isVisible` field."""
  isVisible: Boolean

  """Checks for equality with the object’s `scheduledSince` field."""
  scheduledSince: Datetime

  """Checks for equality with the object’s `scheduledUntil` field."""
  scheduledUntil: Datetime

  """Checks for equality with the object’s `sticky` field."""
  sticky: Boolean

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `upId` field."""
  upId: BigInt

  """Checks for equality with the object’s `upKdo` field."""
  upKdo: BigInt

  """Checks for equality with the object’s `upLock` field."""
  upLock: Boolean

  """Checks for equality with the object’s `upNadpis` field."""
  upNadpis: String

  """Checks for equality with the object’s `upText` field."""
  upText: String

  """Checks for equality with the object’s `upTimestamp` field."""
  upTimestamp: Datetime

  """Checks for equality with the object’s `upTimestampAdd` field."""
  upTimestampAdd: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Upozorneni`"""
input UpozorneniInput {
  createdAt: Datetime
  id: BigInt
  isVisible: Boolean
  scheduledSince: Datetime
  scheduledUntil: Datetime
  sticky: Boolean
  tenantId: BigInt
  upId: BigInt
  upKdo: BigInt
  upLock: Boolean
  upNadpis: String!
  upText: String!
  upTimestamp: Datetime
  upTimestampAdd: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `Upozorneni`. Fields that are set will be updated.
"""
input UpozorneniPatch {
  createdAt: Datetime
  id: BigInt
  isVisible: Boolean
  scheduledSince: Datetime
  scheduledUntil: Datetime
  sticky: Boolean
  tenantId: BigInt
  upId: BigInt
  upKdo: BigInt
  upLock: Boolean
  upNadpis: String
  upText: String
  upTimestamp: Datetime
  upTimestampAdd: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `UpozorneniSkupiny` values."""
type UpozorneniSkupiniesConnection {
  """
  A list of edges which contains the `UpozorneniSkupiny` and cursor to aid in pagination.
  """
  edges: [UpozorneniSkupiniesEdge!]!

  """A list of `UpozorneniSkupiny` objects."""
  nodes: [UpozorneniSkupiny!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UpozorneniSkupiny` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UpozorneniSkupiny` edge in the connection."""
type UpozorneniSkupiniesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UpozorneniSkupiny` at the end of the edge."""
  node: UpozorneniSkupiny!
}

"""Methods to use when ordering `UpozorneniSkupiny`."""
enum UpozorneniSkupiniesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPS_COLOR_ASC
  UPS_COLOR_DESC
  UPS_ID_ASC
  UPS_ID_DESC
  UPS_ID_RODIC_ASC
  UPS_ID_RODIC_DESC
  UPS_ID_SKUPINA_ASC
  UPS_ID_SKUPINA_DESC
}

type UpozorneniSkupiny {
  """Reads a single `Cohort` that is related to this `UpozorneniSkupiny`."""
  cohortByUpsIdSkupina: Cohort
  id: BigInt!

  """Reads a single `Tenant` that is related to this `UpozorneniSkupiny`."""
  tenant: Tenant
  tenantId: BigInt!

  """
  Reads a single `Upozorneni` that is related to this `UpozorneniSkupiny`.
  """
  upozorneni: Upozorneni
  upsColor: String!
  upsId: BigInt!
  upsIdRodic: BigInt!
  upsIdSkupina: BigInt!
}

"""
A condition to be used against `UpozorneniSkupiny` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UpozorneniSkupinyCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `upsColor` field."""
  upsColor: String

  """Checks for equality with the object’s `upsId` field."""
  upsId: BigInt

  """Checks for equality with the object’s `upsIdRodic` field."""
  upsIdRodic: BigInt

  """Checks for equality with the object’s `upsIdSkupina` field."""
  upsIdSkupina: BigInt
}

"""A connection to a list of `Upozorneni` values."""
type UpozornenisConnection {
  """
  A list of edges which contains the `Upozorneni` and cursor to aid in pagination.
  """
  edges: [UpozornenisEdge!]!

  """A list of `Upozorneni` objects."""
  nodes: [Upozorneni!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Upozorneni` you could get from the connection."""
  totalCount: Int!
}

"""A `Upozorneni` edge in the connection."""
type UpozornenisEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Upozorneni` at the end of the edge."""
  node: Upozorneni!
}

"""Methods to use when ordering `Upozorneni`."""
enum UpozornenisOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_VISIBLE_ASC
  IS_VISIBLE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SCHEDULED_SINCE_ASC
  SCHEDULED_SINCE_DESC
  SCHEDULED_UNTIL_ASC
  SCHEDULED_UNTIL_DESC
  STICKY_ASC
  STICKY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UP_ID_ASC
  UP_ID_DESC
  UP_KDO_ASC
  UP_KDO_DESC
  UP_LOCK_ASC
  UP_LOCK_DESC
  UP_NADPIS_ASC
  UP_NADPIS_DESC
  UP_TEXT_ASC
  UP_TEXT_DESC
  UP_TIMESTAMP_ADD_ASC
  UP_TIMESTAMP_ADD_DESC
  UP_TIMESTAMP_ASC
  UP_TIMESTAMP_DESC
}

"""All input for the `upsertEvent` mutation."""
input UpsertEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cohorts: [EventTargetCohortPatch]
  info: EventPatch
  instances: [EventInstancePatch]
  registrations: [EventRegistrationPatch]
  trainers: [EventTrainerPatch]
}

"""The output of our `upsertEvent` mutation."""
type UpsertEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): EventsEdge
  info: Event

  """Reads a single `TenantLocation` that is related to this `Event`."""
  location: TenantLocation

  """Reads a single `Account` that is related to this `Event`."""
  paymentRecipient: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tenant` that is related to this `Event`."""
  tenant: Tenant
}

type User {
  """Reads and enables pagination through a set of `Aktuality`."""
  aktualitiesByAtKdo(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AktualityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUploadedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!
  createdAt: Datetime

  """Reads and enables pagination through a set of `Dokumenty`."""
  dokumentiesByDKdoList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DokumentyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Dokumenty`."""
    orderBy: [DokumentiesOrderBy!]
  ): [Dokumenty!]!

  """
  Reads and enables pagination through a set of `EventExternalRegistration`.
  """
  eventExternalRegistrationsByCreatedByList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventExternalRegistrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EventExternalRegistration`."""
    orderBy: [EventExternalRegistrationsOrderBy!]
  ): [EventExternalRegistration!]!

  """Reads and enables pagination through a set of `GalerieFoto`."""
  galerieFotosByGfKdo(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieFotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosConnection!
  id: BigInt!
  lastLogin: Datetime

  """Reads and enables pagination through a set of `MembershipApplication`."""
  membershipApplicationsByCreatedByList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MembershipApplicationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MembershipApplication`."""
    orderBy: [MembershipApplicationsOrderBy!]
  ): [MembershipApplication!]!

  """Reads and enables pagination through a set of `PlatbyItem`."""
  platbyItemsByPiIdUser(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsConnection!

  """Reads a single `Tenant` that is related to this `User`."""
  tenant: Tenant
  tenantId: BigInt!
  uCreatedAt: Datetime!
  uEmail: String!
  uId: BigInt!
  uJmeno: String
  uLogin: String!
  uPrijmeni: String
  uTimestamp: Datetime
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `Upozorneni`."""
  upozornenisByUpKdo(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisConnection!

  """Reads and enables pagination through a set of `UserProxy`."""
  userProxiesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserProxyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserProxy`."""
    orderBy: [UserProxiesOrderBy!]
  ): [UserProxy!]!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `lastLogin` field."""
  lastLogin: Datetime

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: BigInt

  """Checks for equality with the object’s `uCreatedAt` field."""
  uCreatedAt: Datetime

  """Checks for equality with the object’s `uEmail` field."""
  uEmail: String

  """Checks for equality with the object’s `uId` field."""
  uId: BigInt

  """Checks for equality with the object’s `uJmeno` field."""
  uJmeno: String

  """Checks for equality with the object’s `uLogin` field."""
  uLogin: String

  """Checks for equality with the object’s `uPrijmeni` field."""
  uPrijmeni: String

  """Checks for equality with the object’s `uTimestamp` field."""
  uTimestamp: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""Methods to use when ordering `UserProxy`."""
enum UserProxiesOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SINCE_ASC
  SINCE_DESC
  STATUS_ASC
  STATUS_DESC
  UNTIL_ASC
  UNTIL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type UserProxy {
  active: Boolean!
  createdAt: Datetime!
  id: BigInt!

  """Reads a single `Person` that is related to this `UserProxy`."""
  person: Person
  personId: BigInt!
  since: Datetime
  status: RelationshipStatus!
  until: Datetime
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserProxy`."""
  user: User
  userId: BigInt!
}

"""
A condition to be used against `UserProxy` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserProxyCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `personId` field."""
  personId: BigInt

  """Checks for equality with the object’s `since` field."""
  since: Datetime

  """Checks for equality with the object’s `status` field."""
  status: RelationshipStatus

  """Checks for equality with the object’s `until` field."""
  until: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: BigInt
}

"""An input for mutations affecting `UserProxy`"""
input UserProxyInput {
  active: Boolean
  createdAt: Datetime
  personId: BigInt!
  since: Datetime
  status: RelationshipStatus
  until: Datetime
  updatedAt: Datetime
  userId: BigInt!
}

"""
Represents an update to a `UserProxy`. Fields that are set will be updated.
"""
input UserProxyPatch {
  active: Boolean
  createdAt: Datetime
  personId: BigInt
  since: Datetime
  status: RelationshipStatus
  until: Datetime
  updatedAt: Datetime
  userId: BigInt
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  LAST_LOGIN_ASC
  LAST_LOGIN_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  U_CREATED_AT_ASC
  U_CREATED_AT_DESC
  U_EMAIL_ASC
  U_EMAIL_DESC
  U_ID_ASC
  U_ID_DESC
  U_JMENO_ASC
  U_JMENO_DESC
  U_LOGIN_ASC
  U_LOGIN_DESC
  U_PRIJMENI_ASC
  U_PRIJMENI_DESC
  U_TIMESTAMP_ASC
  U_TIMESTAMP_DESC
}
