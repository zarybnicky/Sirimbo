"""A `ActiveProspectsRecord` edge in the connection."""
type ActiveProspectEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ActiveProspectsRecord` at the end of the edge."""
  node: ActiveProspectsRecord!
}

"""A connection to a list of `ActiveProspectsRecord` values."""
type ActiveProspectsConnection {
  """
  A list of edges which contains the `ActiveProspectsRecord` and cursor to aid in pagination.
  """
  edges: [ActiveProspectEdge!]!

  """A list of `ActiveProspectsRecord` objects."""
  nodes: [ActiveProspectsRecord!]!

  """
  The count of *all* `ActiveProspectsRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""The return type of our `activeProspects` query."""
type ActiveProspectsRecord {
  cohort: CrmCohort
  data: ProspectDatum
  id: BigInt
  updatedAt: Datetime
}

type Akce implements Node {
  aDo: Date!
  aDokumenty: String!
  aId: BigInt!
  aInfo: String!
  aJmeno: String!
  aKapacita: BigInt!

  """Reads and enables pagination through a set of `AkceItem`."""
  akceItemsByAiIdRodic(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AkceItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AkceItem`."""
    orderBy: [AkceItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AkceItemsConnection!
  aKde: String!
  aLock: Boolean!
  aOd: Date!
  aTimestamp: Datetime
  aVisible: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Akce` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AkceCondition {
  """Checks for equality with the object’s `aDo` field."""
  aDo: Date

  """Checks for equality with the object’s `aDokumenty` field."""
  aDokumenty: String

  """Checks for equality with the object’s `aId` field."""
  aId: BigInt

  """Checks for equality with the object’s `aInfo` field."""
  aInfo: String

  """Checks for equality with the object’s `aJmeno` field."""
  aJmeno: String

  """Checks for equality with the object’s `aKapacita` field."""
  aKapacita: BigInt

  """Checks for equality with the object’s `aKde` field."""
  aKde: String

  """Checks for equality with the object’s `aLock` field."""
  aLock: Boolean

  """Checks for equality with the object’s `aOd` field."""
  aOd: Date

  """Checks for equality with the object’s `aTimestamp` field."""
  aTimestamp: Datetime

  """Checks for equality with the object’s `aVisible` field."""
  aVisible: Boolean
}

"""An input for mutations affecting `Akce`"""
input AkceInput {
  aDo: Date!
  aDokumenty: String!
  aId: BigInt
  aInfo: String!
  aJmeno: String!
  aKapacita: BigInt
  aKde: String!
  aLock: Boolean
  aOd: Date!
  aTimestamp: Datetime
  aVisible: Boolean
}

type AkceItem implements Node {
  aiId: BigInt!
  aiIdRodic: BigInt!
  aiRokNarozeni: Int!
  aiUser: BigInt!

  """Reads a single `Akce` that is related to this `AkceItem`."""
  akceByAiIdRodic: Akce

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `User` that is related to this `AkceItem`."""
  userByAiUser: User
}

"""
A condition to be used against `AkceItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AkceItemCondition {
  """Checks for equality with the object’s `aiId` field."""
  aiId: BigInt

  """Checks for equality with the object’s `aiIdRodic` field."""
  aiIdRodic: BigInt

  """Checks for equality with the object’s `aiRokNarozeni` field."""
  aiRokNarozeni: Int

  """Checks for equality with the object’s `aiUser` field."""
  aiUser: BigInt
}

"""An input for mutations affecting `AkceItem`"""
input AkceItemInput {
  aiId: BigInt
  aiIdRodic: BigInt!
  aiRokNarozeni: Int!
  aiUser: BigInt!
}

"""
Represents an update to a `AkceItem`. Fields that are set will be updated.
"""
input AkceItemPatch {
  aiId: BigInt
  aiIdRodic: BigInt
  aiRokNarozeni: Int
  aiUser: BigInt
}

"""A connection to a list of `AkceItem` values."""
type AkceItemsConnection {
  """
  A list of edges which contains the `AkceItem` and cursor to aid in pagination.
  """
  edges: [AkceItemsEdge!]!

  """A list of `AkceItem` objects."""
  nodes: [AkceItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AkceItem` you could get from the connection."""
  totalCount: Int!
}

"""A `AkceItem` edge in the connection."""
type AkceItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AkceItem` at the end of the edge."""
  node: AkceItem!
}

"""Methods to use when ordering `AkceItem`."""
enum AkceItemsOrderBy {
  AI_ID_ASC
  AI_ID_DESC
  AI_ID_RODIC_ASC
  AI_ID_RODIC_DESC
  AI_ROK_NAROZENI_ASC
  AI_ROK_NAROZENI_DESC
  AI_USER_ASC
  AI_USER_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Represents an update to a `Akce`. Fields that are set will be updated."""
input AkcePatch {
  aDo: Date
  aDokumenty: String
  aId: BigInt
  aInfo: String
  aJmeno: String
  aKapacita: BigInt
  aKde: String
  aLock: Boolean
  aOd: Date
  aTimestamp: Datetime
  aVisible: Boolean
}

"""A connection to a list of `Akce` values."""
type AkcesConnection {
  """
  A list of edges which contains the `Akce` and cursor to aid in pagination.
  """
  edges: [AkcesEdge!]!

  """A list of `Akce` objects."""
  nodes: [Akce!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Akce` you could get from the connection."""
  totalCount: Int!
}

"""A `Akce` edge in the connection."""
type AkcesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Akce` at the end of the edge."""
  node: Akce!
}

"""Methods to use when ordering `Akce`."""
enum AkcesOrderBy {
  A_DO_ASC
  A_DO_DESC
  A_DOKUMENTY_ASC
  A_DOKUMENTY_DESC
  A_ID_ASC
  A_ID_DESC
  A_INFO_ASC
  A_INFO_DESC
  A_JMENO_ASC
  A_JMENO_DESC
  A_KAPACITA_ASC
  A_KAPACITA_DESC
  A_KDE_ASC
  A_KDE_DESC
  A_LOCK_ASC
  A_LOCK_DESC
  A_OD_ASC
  A_OD_DESC
  A_TIMESTAMP_ASC
  A_TIMESTAMP_DESC
  A_VISIBLE_ASC
  A_VISIBLE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Aktuality` values."""
type AktualitiesConnection {
  """
  A list of edges which contains the `Aktuality` and cursor to aid in pagination.
  """
  edges: [AktualitiesEdge!]!

  """A list of `Aktuality` objects."""
  nodes: [Aktuality!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Aktuality` you could get from the connection."""
  totalCount: Int!
}

"""A `Aktuality` edge in the connection."""
type AktualitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Aktuality` at the end of the edge."""
  node: Aktuality!
}

"""Methods to use when ordering `Aktuality`."""
enum AktualitiesOrderBy {
  AT_FOTO_ASC
  AT_FOTO_DESC
  AT_FOTO_MAIN_ASC
  AT_FOTO_MAIN_DESC
  AT_ID_ASC
  AT_ID_DESC
  AT_JMENO_ASC
  AT_JMENO_DESC
  AT_KAT_ASC
  AT_KAT_DESC
  AT_KDO_ASC
  AT_KDO_DESC
  AT_PREVIEW_ASC
  AT_PREVIEW_DESC
  AT_TEXT_ASC
  AT_TEXT_DESC
  AT_TIMESTAMP_ADD_ASC
  AT_TIMESTAMP_ADD_DESC
  AT_TIMESTAMP_ASC
  AT_TIMESTAMP_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Aktuality implements Node {
  atFoto: BigInt
  atFotoMain: BigInt
  atId: BigInt!
  atJmeno: String!
  atKat: String!
  atKdo: BigInt
  atPreview: String!
  atText: String!
  atTimestamp: Datetime
  atTimestampAdd: Datetime

  """Reads a single `GalerieFoto` that is related to this `Aktuality`."""
  galerieFotoByAtFotoMain: GalerieFoto

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `User` that is related to this `Aktuality`."""
  userByAtKdo: User
}

"""
A condition to be used against `Aktuality` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AktualityCondition {
  """Checks for equality with the object’s `atFoto` field."""
  atFoto: BigInt

  """Checks for equality with the object’s `atFotoMain` field."""
  atFotoMain: BigInt

  """Checks for equality with the object’s `atId` field."""
  atId: BigInt

  """Checks for equality with the object’s `atJmeno` field."""
  atJmeno: String

  """Checks for equality with the object’s `atKat` field."""
  atKat: String

  """Checks for equality with the object’s `atKdo` field."""
  atKdo: BigInt

  """Checks for equality with the object’s `atPreview` field."""
  atPreview: String

  """Checks for equality with the object’s `atText` field."""
  atText: String

  """Checks for equality with the object’s `atTimestamp` field."""
  atTimestamp: Datetime

  """Checks for equality with the object’s `atTimestampAdd` field."""
  atTimestampAdd: Datetime
}

"""An input for mutations affecting `Aktuality`"""
input AktualityInput {
  atFoto: BigInt
  atFotoMain: BigInt
  atId: BigInt
  atJmeno: String!
  atKat: String!
  atKdo: BigInt
  atPreview: String!
  atText: String!
  atTimestamp: Datetime
  atTimestampAdd: Datetime
}

"""
Represents an update to a `Aktuality`. Fields that are set will be updated.
"""
input AktualityPatch {
  atFoto: BigInt
  atFotoMain: BigInt
  atId: BigInt
  atJmeno: String
  atKat: String
  atKdo: BigInt
  atPreview: String
  atText: String
  atTimestamp: Datetime
  atTimestampAdd: Datetime
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""All input for the `bookLesson` mutation."""
input BookLessonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lessonId: BigInt!
}

"""The output of our `bookLesson` mutation."""
type BookLessonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  rozpisItems: [RozpisItem!]
}

"""All input for the `cancelLesson` mutation."""
input CancelLessonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lessonId: BigInt!
}

"""The output of our `cancelLesson` mutation."""
type CancelLessonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  rozpisItems: [RozpisItem!]
}

"""All input for the `confirmUser` mutation."""
input ConfirmUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cohort: BigInt!
  grp: BigInt!
  id: BigInt!
}

"""The output of our `confirmUser` mutation."""
type ConfirmUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Akce` mutation."""
input CreateAkceInput {
  """The `Akce` to be created by this mutation."""
  akce: AkceInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the create `AkceItem` mutation."""
input CreateAkceItemInput {
  """The `AkceItem` to be created by this mutation."""
  akceItem: AkceItemInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `AkceItem` mutation."""
type CreateAkceItemPayload {
  """Reads a single `Akce` that is related to this `AkceItem`."""
  akceByAiIdRodic: Akce

  """The `AkceItem` that was created by this mutation."""
  akceItem: AkceItem

  """An edge for our `AkceItem`. May be used by Relay 1."""
  akceItemEdge(
    """The method to use when ordering `AkceItem`."""
    orderBy: [AkceItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AkceItemsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `AkceItem`."""
  userByAiUser: User
}

"""The output of our create `Akce` mutation."""
type CreateAkcePayload {
  """The `Akce` that was created by this mutation."""
  akce: Akce

  """An edge for our `Akce`. May be used by Relay 1."""
  akceEdge(
    """The method to use when ordering `Akce`."""
    orderBy: [AkcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AkcesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Aktuality` mutation."""
input CreateAktualityInput {
  """The `Aktuality` to be created by this mutation."""
  aktuality: AktualityInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Aktuality` mutation."""
type CreateAktualityPayload {
  """The `Aktuality` that was created by this mutation."""
  aktuality: Aktuality

  """An edge for our `Aktuality`. May be used by Relay 1."""
  aktualityEdge(
    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `GalerieFoto` that is related to this `Aktuality`."""
  galerieFotoByAtFotoMain: GalerieFoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Aktuality`."""
  userByAtKdo: User
}

"""All input for the `createCouple` mutation."""
input CreateCoupleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  man: BigInt!
  woman: BigInt!
}

"""The output of our `createCouple` mutation."""
type CreateCouplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  paries: [Pary!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Dokumenty` mutation."""
input CreateDokumentyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Dokumenty` to be created by this mutation."""
  dokumenty: DokumentyInput!
}

"""The output of our create `Dokumenty` mutation."""
type CreateDokumentyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dokumenty` that was created by this mutation."""
  dokumenty: Dokumenty

  """An edge for our `Dokumenty`. May be used by Relay 1."""
  dokumentyEdge(
    """The method to use when ordering `Dokumenty`."""
    orderBy: [DokumentiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DokumentiesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Dokumenty`."""
  userByDKdo: User
}

"""All input for the create `GalerieDir` mutation."""
input CreateGalerieDirInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GalerieDir` to be created by this mutation."""
  galerieDir: GalerieDirInput!
}

"""The output of our create `GalerieDir` mutation."""
type CreateGalerieDirPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GalerieDir` that was created by this mutation."""
  galerieDir: GalerieDir

  """An edge for our `GalerieDir`. May be used by Relay 1."""
  galerieDirEdge(
    """The method to use when ordering `GalerieDir`."""
    orderBy: [GalerieDirsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieDirsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `GalerieFoto` mutation."""
input CreateGalerieFotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GalerieFoto` to be created by this mutation."""
  galerieFoto: GalerieFotoInput!
}

"""The output of our create `GalerieFoto` mutation."""
type CreateGalerieFotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `GalerieDir` that is related to this `GalerieFoto`."""
  galerieDirByGfIdRodic: GalerieDir

  """The `GalerieFoto` that was created by this mutation."""
  galerieFoto: GalerieFoto

  """An edge for our `GalerieFoto`. May be used by Relay 1."""
  galerieFotoEdge(
    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `GalerieFoto`."""
  userByGfKdo: User
}

"""All input for the create `Nabidka` mutation."""
input CreateNabidkaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Nabidka` to be created by this mutation."""
  nabidka: NabidkaInput!
}

"""All input for the create `NabidkaItem` mutation."""
input CreateNabidkaItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NabidkaItem` to be created by this mutation."""
  nabidkaItem: NabidkaItemInput!
}

"""The output of our create `NabidkaItem` mutation."""
type CreateNabidkaItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Nabidka` that is related to this `NabidkaItem`."""
  nabidkaByNiIdRodic: Nabidka

  """The `NabidkaItem` that was created by this mutation."""
  nabidkaItem: NabidkaItem

  """An edge for our `NabidkaItem`. May be used by Relay 1."""
  nabidkaItemEdge(
    """The method to use when ordering `NabidkaItem`."""
    orderBy: [NabidkaItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NabidkaItemsEdge

  """Reads a single `Pary` that is related to this `NabidkaItem`."""
  paryByNiPartner: Pary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `Nabidka` mutation."""
type CreateNabidkaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Nabidka` that was created by this mutation."""
  nabidka: Nabidka

  """An edge for our `Nabidka`. May be used by Relay 1."""
  nabidkaEdge(
    """The method to use when ordering `Nabidka`."""
    orderBy: [NabidkasOrderBy!] = [PRIMARY_KEY_ASC]
  ): NabidkasEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Nabidka`."""
  userByNTrener: User
}

"""All input for the create `Page` mutation."""
input CreatePageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Page` to be created by this mutation."""
  page: PageInput!
}

"""The output of our create `Page` mutation."""
type CreatePagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Page` that was created by this mutation."""
  page: Page

  """An edge for our `Page`. May be used by Relay 1."""
  pageEdge(
    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Parameter` mutation."""
input CreateParameterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Parameter` to be created by this mutation."""
  parameter: ParameterInput!
}

"""The output of our create `Parameter` mutation."""
type CreateParameterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Parameter` that was created by this mutation."""
  parameter: Parameter

  """An edge for our `Parameter`. May be used by Relay 1."""
  parameterEdge(
    """The method to use when ordering `Parameter`."""
    orderBy: [ParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParametersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Pary` mutation."""
input CreateParyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Pary` to be created by this mutation."""
  pary: ParyInput!
}

"""All input for the create `ParyNavrh` mutation."""
input CreateParyNavrhInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ParyNavrh` to be created by this mutation."""
  paryNavrh: ParyNavrhInput!
}

"""The output of our create `ParyNavrh` mutation."""
type CreateParyNavrhPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ParyNavrh` that was created by this mutation."""
  paryNavrh: ParyNavrh

  """An edge for our `ParyNavrh`. May be used by Relay 1."""
  paryNavrhEdge(
    """The method to use when ordering `ParyNavrh`."""
    orderBy: [ParyNavrhsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParyNavrhsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ParyNavrh`."""
  userByPnNavrhl: User

  """Reads a single `User` that is related to this `ParyNavrh`."""
  userByPnPartner: User

  """Reads a single `User` that is related to this `ParyNavrh`."""
  userByPnPartnerka: User
}

"""The output of our create `Pary` mutation."""
type CreateParyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pary` that was created by this mutation."""
  pary: Pary

  """An edge for our `Pary`. May be used by Relay 1."""
  paryEdge(
    """The method to use when ordering `Pary`."""
    orderBy: [PariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PariesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Pary`."""
  userByPIdPartner: User

  """Reads a single `User` that is related to this `Pary`."""
  userByPIdPartnerka: User
}

"""All input for the create `Permission` mutation."""
input CreatePermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Permission` to be created by this mutation."""
  permission: PermissionInput!
}

"""The output of our create `Permission` mutation."""
type CreatePermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Permission` that was created by this mutation."""
  permission: Permission

  """An edge for our `Permission`. May be used by Relay 1."""
  permissionEdge(
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `PlatbyCategoryGroup` mutation."""
input CreatePlatbyCategoryGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PlatbyCategoryGroup` to be created by this mutation."""
  platbyCategoryGroup: PlatbyCategoryGroupInput!
}

"""The output of our create `PlatbyCategoryGroup` mutation."""
type CreatePlatbyCategoryGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `PlatbyCategory` that is related to this `PlatbyCategoryGroup`.
  """
  platbyCategoryByPcgIdCategory: PlatbyCategory

  """The `PlatbyCategoryGroup` that was created by this mutation."""
  platbyCategoryGroup: PlatbyCategoryGroup

  """An edge for our `PlatbyCategoryGroup`. May be used by Relay 1."""
  platbyCategoryGroupEdge(
    """The method to use when ordering `PlatbyCategoryGroup`."""
    orderBy: [PlatbyCategoryGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoryGroupsEdge

  """
  Reads a single `PlatbyGroup` that is related to this `PlatbyCategoryGroup`.
  """
  platbyGroupByPcgIdGroup: PlatbyGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `PlatbyCategory` mutation."""
input CreatePlatbyCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PlatbyCategory` to be created by this mutation."""
  platbyCategory: PlatbyCategoryInput!
}

"""The output of our create `PlatbyCategory` mutation."""
type CreatePlatbyCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlatbyCategory` that was created by this mutation."""
  platbyCategory: PlatbyCategory

  """An edge for our `PlatbyCategory`. May be used by Relay 1."""
  platbyCategoryEdge(
    """The method to use when ordering `PlatbyCategory`."""
    orderBy: [PlatbyCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `PlatbyGroup` mutation."""
input CreatePlatbyGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PlatbyGroup` to be created by this mutation."""
  platbyGroup: PlatbyGroupInput!
}

"""The output of our create `PlatbyGroup` mutation."""
type CreatePlatbyGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlatbyGroup` that was created by this mutation."""
  platbyGroup: PlatbyGroup

  """An edge for our `PlatbyGroup`. May be used by Relay 1."""
  platbyGroupEdge(
    """The method to use when ordering `PlatbyGroup`."""
    orderBy: [PlatbyGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `PlatbyGroupSkupina` mutation."""
input CreatePlatbyGroupSkupinaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PlatbyGroupSkupina` to be created by this mutation."""
  platbyGroupSkupina: PlatbyGroupSkupinaInput!
}

"""The output of our create `PlatbyGroupSkupina` mutation."""
type CreatePlatbyGroupSkupinaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `PlatbyGroup` that is related to this `PlatbyGroupSkupina`.
  """
  platbyGroupByPgsIdGroup: PlatbyGroup

  """The `PlatbyGroupSkupina` that was created by this mutation."""
  platbyGroupSkupina: PlatbyGroupSkupina

  """An edge for our `PlatbyGroupSkupina`. May be used by Relay 1."""
  platbyGroupSkupinaEdge(
    """The method to use when ordering `PlatbyGroupSkupina`."""
    orderBy: [PlatbyGroupSkupinasOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyGroupSkupinasEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Skupiny` that is related to this `PlatbyGroupSkupina`."""
  skupinyByPgsIdSkupina: Skupiny
}

"""All input for the create `PlatbyItem` mutation."""
input CreatePlatbyItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PlatbyItem` to be created by this mutation."""
  platbyItem: PlatbyItemInput!
}

"""The output of our create `PlatbyItem` mutation."""
type CreatePlatbyItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `PlatbyCategory` that is related to this `PlatbyItem`."""
  platbyCategoryByPiIdCategory: PlatbyCategory

  """The `PlatbyItem` that was created by this mutation."""
  platbyItem: PlatbyItem

  """An edge for our `PlatbyItem`. May be used by Relay 1."""
  platbyItemEdge(
    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsEdge

  """Reads a single `PlatbyRaw` that is related to this `PlatbyItem`."""
  platbyRawByPiIdRaw: PlatbyRaw

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PlatbyItem`."""
  userByPiIdUser: User
}

"""All input for the create `PlatbyRaw` mutation."""
input CreatePlatbyRawInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PlatbyRaw` to be created by this mutation."""
  platbyRaw: PlatbyRawInput!
}

"""The output of our create `PlatbyRaw` mutation."""
type CreatePlatbyRawPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlatbyRaw` that was created by this mutation."""
  platbyRaw: PlatbyRaw

  """An edge for our `PlatbyRaw`. May be used by Relay 1."""
  platbyRawEdge(
    """The method to use when ordering `PlatbyRaw`."""
    orderBy: [PlatbyRawsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyRawsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Rozpi` mutation."""
input CreateRozpiInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Rozpi` to be created by this mutation."""
  rozpi: RozpiInput!
}

"""The output of our create `Rozpi` mutation."""
type CreateRozpiPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Rozpi` that was created by this mutation."""
  rozpi: Rozpi

  """An edge for our `Rozpi`. May be used by Relay 1."""
  rozpiEdge(
    """The method to use when ordering `Rozpi`."""
    orderBy: [RozpisOrderBy!] = [PRIMARY_KEY_ASC]
  ): RozpisEdge

  """Reads a single `User` that is related to this `Rozpi`."""
  userByRTrener: User
}

"""All input for the create `RozpisItem` mutation."""
input CreateRozpisItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RozpisItem` to be created by this mutation."""
  rozpisItem: RozpisItemInput!
}

"""The output of our create `RozpisItem` mutation."""
type CreateRozpisItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Pary` that is related to this `RozpisItem`."""
  paryByRiPartner: Pary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Rozpi` that is related to this `RozpisItem`."""
  rozpiByRiIdRodic: Rozpi

  """The `RozpisItem` that was created by this mutation."""
  rozpisItem: RozpisItem

  """An edge for our `RozpisItem`. May be used by Relay 1."""
  rozpisItemEdge(
    """The method to use when ordering `RozpisItem`."""
    orderBy: [RozpisItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RozpisItemsEdge
}

"""All input for the create `Session` mutation."""
input CreateSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Session` to be created by this mutation."""
  session: SessionInput!
}

"""The output of our create `Session` mutation."""
type CreateSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Session` that was created by this mutation."""
  session: Session

  """An edge for our `Session`. May be used by Relay 1."""
  sessionEdge(
    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SessionsEdge

  """Reads a single `User` that is related to this `Session`."""
  userBySsUser: User
}

"""All input for the create `Skupiny` mutation."""
input CreateSkupinyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Skupiny` to be created by this mutation."""
  skupiny: SkupinyInput!
}

"""The output of our create `Skupiny` mutation."""
type CreateSkupinyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Skupiny` that was created by this mutation."""
  skupiny: Skupiny

  """An edge for our `Skupiny`. May be used by Relay 1."""
  skupinyEdge(
    """The method to use when ordering `Skupiny`."""
    orderBy: [SkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SkupiniesEdge
}

"""All input for the create `Upozorneni` mutation."""
input CreateUpozorneniInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Upozorneni` to be created by this mutation."""
  upozorneni: UpozorneniInput!
}

"""The output of our create `Upozorneni` mutation."""
type CreateUpozorneniPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Upozorneni` that was created by this mutation."""
  upozorneni: Upozorneni

  """An edge for our `Upozorneni`. May be used by Relay 1."""
  upozorneniEdge(
    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisEdge

  """Reads a single `User` that is related to this `Upozorneni`."""
  userByUpKdo: User
}

"""All input for the create `UpozorneniSkupiny` mutation."""
input CreateUpozorneniSkupinyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UpozorneniSkupiny` to be created by this mutation."""
  upozorneniSkupiny: UpozorneniSkupinyInput!
}

"""The output of our create `UpozorneniSkupiny` mutation."""
type CreateUpozorneniSkupinyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Skupiny` that is related to this `UpozorneniSkupiny`."""
  skupinyByUpsIdSkupina: Skupiny

  """
  Reads a single `Upozorneni` that is related to this `UpozorneniSkupiny`.
  """
  upozorneniByUpsIdRodic: Upozorneni

  """The `UpozorneniSkupiny` that was created by this mutation."""
  upozorneniSkupiny: UpozorneniSkupiny

  """An edge for our `UpozorneniSkupiny`. May be used by Relay 1."""
  upozorneniSkupinyEdge(
    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Permission` that is related to this `User`."""
  permissionByUGroup: Permission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Skupiny` that is related to this `User`."""
  skupinyByUSkupina: Skupiny

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `Video` mutation."""
input CreateVideoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Video` to be created by this mutation."""
  video: VideoInput!
}

"""All input for the create `VideoList` mutation."""
input CreateVideoListInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `VideoList` to be created by this mutation."""
  videoList: VideoListInput!
}

"""The output of our create `VideoList` mutation."""
type CreateVideoListPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `VideoList` that was created by this mutation."""
  videoList: VideoList

  """An edge for our `VideoList`. May be used by Relay 1."""
  videoListEdge(
    """The method to use when ordering `VideoList`."""
    orderBy: [VideoListsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VideoListsEdge
}

"""The output of our create `Video` mutation."""
type CreateVideoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Video` that was created by this mutation."""
  video: Video

  """An edge for our `Video`. May be used by Relay 1."""
  videoEdge(
    """The method to use when ordering `Video`."""
    orderBy: [VideosOrderBy!] = [PRIMARY_KEY_ASC]
  ): VideosEdge
}

"""All input for the create `VideoSource` mutation."""
input CreateVideoSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `VideoSource` to be created by this mutation."""
  videoSource: VideoSourceInput!
}

"""The output of our create `VideoSource` mutation."""
type CreateVideoSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `VideoSource` that was created by this mutation."""
  videoSource: VideoSource

  """An edge for our `VideoSource`. May be used by Relay 1."""
  videoSourceEdge(
    """The method to use when ordering `VideoSource`."""
    orderBy: [VideoSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): VideoSourcesEdge
}

enum CrmCohort {
  CONTACT_ME_LATER
  DANCER
  FREE_LESSON
  HOBBYIST
  SHOWDANCE
}

"""A `BigInt` edge in the connection."""
type CurrentCoupleIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BigInt` at the end of the edge."""
  node: BigInt
}

"""A connection to a list of `BigInt` values."""
type CurrentCoupleIdsConnection {
  """
  A list of edges which contains the `BigInt` and cursor to aid in pagination.
  """
  edges: [CurrentCoupleIdEdge!]!

  """A list of `BigInt` objects."""
  nodes: [BigInt]!

  """The count of *all* `BigInt` you could get from the connection."""
  totalCount: Int!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteAkceByNodeId` mutation."""
input DeleteAkceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Akce` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAkce` mutation."""
input DeleteAkceInput {
  aId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the `deleteAkceItemByNodeId` mutation."""
input DeleteAkceItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AkceItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAkceItem` mutation."""
input DeleteAkceItemInput {
  aiId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our delete `AkceItem` mutation."""
type DeleteAkceItemPayload {
  """Reads a single `Akce` that is related to this `AkceItem`."""
  akceByAiIdRodic: Akce

  """The `AkceItem` that was deleted by this mutation."""
  akceItem: AkceItem

  """An edge for our `AkceItem`. May be used by Relay 1."""
  akceItemEdge(
    """The method to use when ordering `AkceItem`."""
    orderBy: [AkceItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AkceItemsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAkceItemNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `AkceItem`."""
  userByAiUser: User
}

"""The output of our delete `Akce` mutation."""
type DeleteAkcePayload {
  """The `Akce` that was deleted by this mutation."""
  akce: Akce

  """An edge for our `Akce`. May be used by Relay 1."""
  akceEdge(
    """The method to use when ordering `Akce`."""
    orderBy: [AkcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AkcesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAkceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteAktualityByNodeId` mutation."""
input DeleteAktualityByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Aktuality` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAktuality` mutation."""
input DeleteAktualityInput {
  atId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our delete `Aktuality` mutation."""
type DeleteAktualityPayload {
  """The `Aktuality` that was deleted by this mutation."""
  aktuality: Aktuality

  """An edge for our `Aktuality`. May be used by Relay 1."""
  aktualityEdge(
    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAktualityNodeId: ID

  """Reads a single `GalerieFoto` that is related to this `Aktuality`."""
  galerieFotoByAtFotoMain: GalerieFoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Aktuality`."""
  userByAtKdo: User
}

"""All input for the `deleteDokumentyByNodeId` mutation."""
input DeleteDokumentyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Dokumenty` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDokumenty` mutation."""
input DeleteDokumentyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dId: BigInt!
}

"""The output of our delete `Dokumenty` mutation."""
type DeleteDokumentyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedDokumentyNodeId: ID

  """The `Dokumenty` that was deleted by this mutation."""
  dokumenty: Dokumenty

  """An edge for our `Dokumenty`. May be used by Relay 1."""
  dokumentyEdge(
    """The method to use when ordering `Dokumenty`."""
    orderBy: [DokumentiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DokumentiesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Dokumenty`."""
  userByDKdo: User
}

"""All input for the `deleteGalerieDirByNodeId` mutation."""
input DeleteGalerieDirByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GalerieDir` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGalerieDir` mutation."""
input DeleteGalerieDirInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gdId: BigInt!
}

"""The output of our delete `GalerieDir` mutation."""
type DeleteGalerieDirPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGalerieDirNodeId: ID

  """The `GalerieDir` that was deleted by this mutation."""
  galerieDir: GalerieDir

  """An edge for our `GalerieDir`. May be used by Relay 1."""
  galerieDirEdge(
    """The method to use when ordering `GalerieDir`."""
    orderBy: [GalerieDirsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieDirsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGalerieFotoByNodeId` mutation."""
input DeleteGalerieFotoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GalerieFoto` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGalerieFoto` mutation."""
input DeleteGalerieFotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gfId: BigInt!
}

"""The output of our delete `GalerieFoto` mutation."""
type DeleteGalerieFotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGalerieFotoNodeId: ID

  """Reads a single `GalerieDir` that is related to this `GalerieFoto`."""
  galerieDirByGfIdRodic: GalerieDir

  """The `GalerieFoto` that was deleted by this mutation."""
  galerieFoto: GalerieFoto

  """An edge for our `GalerieFoto`. May be used by Relay 1."""
  galerieFotoEdge(
    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `GalerieFoto`."""
  userByGfKdo: User
}

"""All input for the `deleteNabidkaByNodeId` mutation."""
input DeleteNabidkaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Nabidka` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteNabidka` mutation."""
input DeleteNabidkaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  nId: BigInt!
}

"""All input for the `deleteNabidkaItemByNodeId` mutation."""
input DeleteNabidkaItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NabidkaItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteNabidkaItem` mutation."""
input DeleteNabidkaItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  niId: BigInt!
}

"""The output of our delete `NabidkaItem` mutation."""
type DeleteNabidkaItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNabidkaItemNodeId: ID

  """Reads a single `Nabidka` that is related to this `NabidkaItem`."""
  nabidkaByNiIdRodic: Nabidka

  """The `NabidkaItem` that was deleted by this mutation."""
  nabidkaItem: NabidkaItem

  """An edge for our `NabidkaItem`. May be used by Relay 1."""
  nabidkaItemEdge(
    """The method to use when ordering `NabidkaItem`."""
    orderBy: [NabidkaItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NabidkaItemsEdge

  """Reads a single `Pary` that is related to this `NabidkaItem`."""
  paryByNiPartner: Pary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our delete `Nabidka` mutation."""
type DeleteNabidkaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNabidkaNodeId: ID

  """The `Nabidka` that was deleted by this mutation."""
  nabidka: Nabidka

  """An edge for our `Nabidka`. May be used by Relay 1."""
  nabidkaEdge(
    """The method to use when ordering `Nabidka`."""
    orderBy: [NabidkasOrderBy!] = [PRIMARY_KEY_ASC]
  ): NabidkasEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Nabidka`."""
  userByNTrener: User
}

"""All input for the `deleteParameterByNodeId` mutation."""
input DeleteParameterByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Parameter` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteParameter` mutation."""
input DeleteParameterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  paName: String!
}

"""The output of our delete `Parameter` mutation."""
type DeleteParameterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParameterNodeId: ID

  """The `Parameter` that was deleted by this mutation."""
  parameter: Parameter

  """An edge for our `Parameter`. May be used by Relay 1."""
  parameterEdge(
    """The method to use when ordering `Parameter`."""
    orderBy: [ParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParametersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteParyByNodeId` mutation."""
input DeleteParyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Pary` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePary` mutation."""
input DeleteParyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pId: BigInt!
}

"""All input for the `deleteParyNavrhByNodeId` mutation."""
input DeleteParyNavrhByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ParyNavrh` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteParyNavrh` mutation."""
input DeleteParyNavrhInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pnId: BigInt!
}

"""The output of our delete `ParyNavrh` mutation."""
type DeleteParyNavrhPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParyNavrhNodeId: ID

  """The `ParyNavrh` that was deleted by this mutation."""
  paryNavrh: ParyNavrh

  """An edge for our `ParyNavrh`. May be used by Relay 1."""
  paryNavrhEdge(
    """The method to use when ordering `ParyNavrh`."""
    orderBy: [ParyNavrhsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParyNavrhsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ParyNavrh`."""
  userByPnNavrhl: User

  """Reads a single `User` that is related to this `ParyNavrh`."""
  userByPnPartner: User

  """Reads a single `User` that is related to this `ParyNavrh`."""
  userByPnPartnerka: User
}

"""The output of our delete `Pary` mutation."""
type DeleteParyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParyNodeId: ID

  """The `Pary` that was deleted by this mutation."""
  pary: Pary

  """An edge for our `Pary`. May be used by Relay 1."""
  paryEdge(
    """The method to use when ordering `Pary`."""
    orderBy: [PariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PariesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Pary`."""
  userByPIdPartner: User

  """Reads a single `User` that is related to this `Pary`."""
  userByPIdPartnerka: User
}

"""All input for the `deletePermissionByNodeId` mutation."""
input DeletePermissionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Permission` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePermission` mutation."""
input DeletePermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  peId: BigInt!
}

"""The output of our delete `Permission` mutation."""
type DeletePermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPermissionNodeId: ID

  """The `Permission` that was deleted by this mutation."""
  permission: Permission

  """An edge for our `Permission`. May be used by Relay 1."""
  permissionEdge(
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePlatbyCategoryByNodeId` mutation."""
input DeletePlatbyCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlatbyCategory` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlatbyCategoryGroupByNodeId` mutation."""
input DeletePlatbyCategoryGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlatbyCategoryGroup` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlatbyCategoryGroup` mutation."""
input DeletePlatbyCategoryGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pcgId: BigInt!
}

"""The output of our delete `PlatbyCategoryGroup` mutation."""
type DeletePlatbyCategoryGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPlatbyCategoryGroupNodeId: ID

  """
  Reads a single `PlatbyCategory` that is related to this `PlatbyCategoryGroup`.
  """
  platbyCategoryByPcgIdCategory: PlatbyCategory

  """The `PlatbyCategoryGroup` that was deleted by this mutation."""
  platbyCategoryGroup: PlatbyCategoryGroup

  """An edge for our `PlatbyCategoryGroup`. May be used by Relay 1."""
  platbyCategoryGroupEdge(
    """The method to use when ordering `PlatbyCategoryGroup`."""
    orderBy: [PlatbyCategoryGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoryGroupsEdge

  """
  Reads a single `PlatbyGroup` that is related to this `PlatbyCategoryGroup`.
  """
  platbyGroupByPcgIdGroup: PlatbyGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePlatbyCategory` mutation."""
input DeletePlatbyCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pcId: BigInt!
}

"""The output of our delete `PlatbyCategory` mutation."""
type DeletePlatbyCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPlatbyCategoryNodeId: ID

  """The `PlatbyCategory` that was deleted by this mutation."""
  platbyCategory: PlatbyCategory

  """An edge for our `PlatbyCategory`. May be used by Relay 1."""
  platbyCategoryEdge(
    """The method to use when ordering `PlatbyCategory`."""
    orderBy: [PlatbyCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePlatbyGroupByNodeId` mutation."""
input DeletePlatbyGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlatbyGroup` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlatbyGroup` mutation."""
input DeletePlatbyGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pgId: BigInt!
}

"""The output of our delete `PlatbyGroup` mutation."""
type DeletePlatbyGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPlatbyGroupNodeId: ID

  """The `PlatbyGroup` that was deleted by this mutation."""
  platbyGroup: PlatbyGroup

  """An edge for our `PlatbyGroup`. May be used by Relay 1."""
  platbyGroupEdge(
    """The method to use when ordering `PlatbyGroup`."""
    orderBy: [PlatbyGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePlatbyGroupSkupinaByNodeId` mutation."""
input DeletePlatbyGroupSkupinaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlatbyGroupSkupina` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlatbyGroupSkupina` mutation."""
input DeletePlatbyGroupSkupinaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pgsId: BigInt!
}

"""The output of our delete `PlatbyGroupSkupina` mutation."""
type DeletePlatbyGroupSkupinaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPlatbyGroupSkupinaNodeId: ID

  """
  Reads a single `PlatbyGroup` that is related to this `PlatbyGroupSkupina`.
  """
  platbyGroupByPgsIdGroup: PlatbyGroup

  """The `PlatbyGroupSkupina` that was deleted by this mutation."""
  platbyGroupSkupina: PlatbyGroupSkupina

  """An edge for our `PlatbyGroupSkupina`. May be used by Relay 1."""
  platbyGroupSkupinaEdge(
    """The method to use when ordering `PlatbyGroupSkupina`."""
    orderBy: [PlatbyGroupSkupinasOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyGroupSkupinasEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Skupiny` that is related to this `PlatbyGroupSkupina`."""
  skupinyByPgsIdSkupina: Skupiny
}

"""All input for the `deletePlatbyItemByNodeId` mutation."""
input DeletePlatbyItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlatbyItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlatbyItem` mutation."""
input DeletePlatbyItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  piId: BigInt!
}

"""The output of our delete `PlatbyItem` mutation."""
type DeletePlatbyItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPlatbyItemNodeId: ID

  """Reads a single `PlatbyCategory` that is related to this `PlatbyItem`."""
  platbyCategoryByPiIdCategory: PlatbyCategory

  """The `PlatbyItem` that was deleted by this mutation."""
  platbyItem: PlatbyItem

  """An edge for our `PlatbyItem`. May be used by Relay 1."""
  platbyItemEdge(
    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsEdge

  """Reads a single `PlatbyRaw` that is related to this `PlatbyItem`."""
  platbyRawByPiIdRaw: PlatbyRaw

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PlatbyItem`."""
  userByPiIdUser: User
}

"""All input for the `deletePlatbyRawByNodeId` mutation."""
input DeletePlatbyRawByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlatbyRaw` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlatbyRaw` mutation."""
input DeletePlatbyRawInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  prId: BigInt!
}

"""The output of our delete `PlatbyRaw` mutation."""
type DeletePlatbyRawPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPlatbyRawNodeId: ID

  """The `PlatbyRaw` that was deleted by this mutation."""
  platbyRaw: PlatbyRaw

  """An edge for our `PlatbyRaw`. May be used by Relay 1."""
  platbyRawEdge(
    """The method to use when ordering `PlatbyRaw`."""
    orderBy: [PlatbyRawsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyRawsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteRozpiByNodeId` mutation."""
input DeleteRozpiByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Rozpi` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRozpi` mutation."""
input DeleteRozpiInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rId: BigInt!
}

"""The output of our delete `Rozpi` mutation."""
type DeleteRozpiPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRozpiNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Rozpi` that was deleted by this mutation."""
  rozpi: Rozpi

  """An edge for our `Rozpi`. May be used by Relay 1."""
  rozpiEdge(
    """The method to use when ordering `Rozpi`."""
    orderBy: [RozpisOrderBy!] = [PRIMARY_KEY_ASC]
  ): RozpisEdge

  """Reads a single `User` that is related to this `Rozpi`."""
  userByRTrener: User
}

"""All input for the `deleteRozpisItemByNodeId` mutation."""
input DeleteRozpisItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RozpisItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRozpisItem` mutation."""
input DeleteRozpisItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  riId: BigInt!
}

"""The output of our delete `RozpisItem` mutation."""
type DeleteRozpisItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRozpisItemNodeId: ID

  """Reads a single `Pary` that is related to this `RozpisItem`."""
  paryByRiPartner: Pary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Rozpi` that is related to this `RozpisItem`."""
  rozpiByRiIdRodic: Rozpi

  """The `RozpisItem` that was deleted by this mutation."""
  rozpisItem: RozpisItem

  """An edge for our `RozpisItem`. May be used by Relay 1."""
  rozpisItemEdge(
    """The method to use when ordering `RozpisItem`."""
    orderBy: [RozpisItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RozpisItemsEdge
}

"""All input for the `deleteSessionByNodeId` mutation."""
input DeleteSessionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Session` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSession` mutation."""
input DeleteSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ssId: String!
}

"""The output of our delete `Session` mutation."""
type DeleteSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSessionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Session` that was deleted by this mutation."""
  session: Session

  """An edge for our `Session`. May be used by Relay 1."""
  sessionEdge(
    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SessionsEdge

  """Reads a single `User` that is related to this `Session`."""
  userBySsUser: User
}

"""All input for the `deleteSkupinyByNodeId` mutation."""
input DeleteSkupinyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Skupiny` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSkupiny` mutation."""
input DeleteSkupinyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sId: BigInt!
}

"""The output of our delete `Skupiny` mutation."""
type DeleteSkupinyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSkupinyNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Skupiny` that was deleted by this mutation."""
  skupiny: Skupiny

  """An edge for our `Skupiny`. May be used by Relay 1."""
  skupinyEdge(
    """The method to use when ordering `Skupiny`."""
    orderBy: [SkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SkupiniesEdge
}

"""All input for the `deleteUpozorneniByNodeId` mutation."""
input DeleteUpozorneniByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Upozorneni` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUpozorneni` mutation."""
input DeleteUpozorneniInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  upId: BigInt!
}

"""The output of our delete `Upozorneni` mutation."""
type DeleteUpozorneniPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUpozorneniNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Upozorneni` that was deleted by this mutation."""
  upozorneni: Upozorneni

  """An edge for our `Upozorneni`. May be used by Relay 1."""
  upozorneniEdge(
    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisEdge

  """Reads a single `User` that is related to this `Upozorneni`."""
  userByUpKdo: User
}

"""All input for the `deleteUpozorneniSkupinyByNodeId` mutation."""
input DeleteUpozorneniSkupinyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UpozorneniSkupiny` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUpozorneniSkupiny` mutation."""
input DeleteUpozorneniSkupinyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  upsId: BigInt!
}

"""The output of our delete `UpozorneniSkupiny` mutation."""
type DeleteUpozorneniSkupinyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUpozorneniSkupinyNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Skupiny` that is related to this `UpozorneniSkupiny`."""
  skupinyByUpsIdSkupina: Skupiny

  """
  Reads a single `Upozorneni` that is related to this `UpozorneniSkupiny`.
  """
  upozorneniByUpsIdRodic: Upozorneni

  """The `UpozorneniSkupiny` that was deleted by this mutation."""
  upozorneniSkupiny: UpozorneniSkupiny

  """An edge for our `UpozorneniSkupiny`. May be used by Relay 1."""
  upozorneniSkupinyEdge(
    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uId: BigInt!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID

  """Reads a single `Permission` that is related to this `User`."""
  permissionByUGroup: Permission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Skupiny` that is related to this `User`."""
  skupinyByUSkupina: Skupiny

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteVideoByNodeId` mutation."""
input DeleteVideoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Video` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteVideo` mutation."""
input DeleteVideoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  vId: BigInt!
}

"""All input for the `deleteVideoListByNodeId` mutation."""
input DeleteVideoListByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `VideoList` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteVideoList` mutation."""
input DeleteVideoListInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  vlId: BigInt!
}

"""The output of our delete `VideoList` mutation."""
type DeleteVideoListPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedVideoListNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `VideoList` that was deleted by this mutation."""
  videoList: VideoList

  """An edge for our `VideoList`. May be used by Relay 1."""
  videoListEdge(
    """The method to use when ordering `VideoList`."""
    orderBy: [VideoListsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VideoListsEdge
}

"""The output of our delete `Video` mutation."""
type DeleteVideoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedVideoNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Video` that was deleted by this mutation."""
  video: Video

  """An edge for our `Video`. May be used by Relay 1."""
  videoEdge(
    """The method to use when ordering `Video`."""
    orderBy: [VideosOrderBy!] = [PRIMARY_KEY_ASC]
  ): VideosEdge
}

"""All input for the `deleteVideoSourceByNodeId` mutation."""
input DeleteVideoSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `VideoSource` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteVideoSource` mutation."""
input DeleteVideoSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  vsId: BigInt!
}

"""The output of our delete `VideoSource` mutation."""
type DeleteVideoSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedVideoSourceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `VideoSource` that was deleted by this mutation."""
  videoSource: VideoSource

  """An edge for our `VideoSource`. May be used by Relay 1."""
  videoSourceEdge(
    """The method to use when ordering `VideoSource`."""
    orderBy: [VideoSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): VideoSourcesEdge
}

"""A connection to a list of `Dokumenty` values."""
type DokumentiesConnection {
  """
  A list of edges which contains the `Dokumenty` and cursor to aid in pagination.
  """
  edges: [DokumentiesEdge!]!

  """A list of `Dokumenty` objects."""
  nodes: [Dokumenty!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Dokumenty` you could get from the connection."""
  totalCount: Int!
}

"""A `Dokumenty` edge in the connection."""
type DokumentiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Dokumenty` at the end of the edge."""
  node: Dokumenty!
}

"""Methods to use when ordering `Dokumenty`."""
enum DokumentiesOrderBy {
  D_FILENAME_ASC
  D_FILENAME_DESC
  D_ID_ASC
  D_ID_DESC
  D_KATEGORIE_ASC
  D_KATEGORIE_DESC
  D_KDO_ASC
  D_KDO_DESC
  D_NAME_ASC
  D_NAME_DESC
  D_PATH_ASC
  D_PATH_DESC
  D_TIMESTAMP_ASC
  D_TIMESTAMP_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Dokumenty implements Node {
  dFilename: String!
  dId: BigInt!
  dKategorie: Int!
  dKdo: BigInt!
  dName: String!
  dPath: String!
  dTimestamp: Datetime

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `User` that is related to this `Dokumenty`."""
  userByDKdo: User
}

"""
A condition to be used against `Dokumenty` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DokumentyCondition {
  """Checks for equality with the object’s `dFilename` field."""
  dFilename: String

  """Checks for equality with the object’s `dId` field."""
  dId: BigInt

  """Checks for equality with the object’s `dKategorie` field."""
  dKategorie: Int

  """Checks for equality with the object’s `dKdo` field."""
  dKdo: BigInt

  """Checks for equality with the object’s `dName` field."""
  dName: String

  """Checks for equality with the object’s `dPath` field."""
  dPath: String

  """Checks for equality with the object’s `dTimestamp` field."""
  dTimestamp: Datetime
}

"""An input for mutations affecting `Dokumenty`"""
input DokumentyInput {
  dFilename: String!
  dId: BigInt
  dKategorie: Int!
  dKdo: BigInt!
  dName: String!
  dPath: String!
  dTimestamp: Datetime
}

"""
Represents an update to a `Dokumenty`. Fields that are set will be updated.
"""
input DokumentyPatch {
  dFilename: String
  dId: BigInt
  dKategorie: Int
  dKdo: BigInt
  dName: String
  dPath: String
  dTimestamp: Datetime
}

"""All input for the `fixUnpairedCouples` mutation."""
input FixUnpairedCouplesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `fixUnpairedCouples` mutation."""
type FixUnpairedCouplesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  paries: [Pary!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type GalerieDir implements Node {
  """Reads and enables pagination through a set of `GalerieFoto`."""
  galerieFotosByGfIdRodic(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieFotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosConnection!
  gdHidden: Boolean!
  gdId: BigInt!
  gdIdRodic: BigInt!
  gdLevel: Int!
  gdName: String!
  gdPath: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `GalerieDir` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GalerieDirCondition {
  """Checks for equality with the object’s `gdHidden` field."""
  gdHidden: Boolean

  """Checks for equality with the object’s `gdId` field."""
  gdId: BigInt

  """Checks for equality with the object’s `gdIdRodic` field."""
  gdIdRodic: BigInt

  """Checks for equality with the object’s `gdLevel` field."""
  gdLevel: Int

  """Checks for equality with the object’s `gdName` field."""
  gdName: String

  """Checks for equality with the object’s `gdPath` field."""
  gdPath: String
}

"""An input for mutations affecting `GalerieDir`"""
input GalerieDirInput {
  gdHidden: Boolean
  gdId: BigInt
  gdIdRodic: BigInt!
  gdLevel: Int
  gdName: String!
  gdPath: String!
}

"""
Represents an update to a `GalerieDir`. Fields that are set will be updated.
"""
input GalerieDirPatch {
  gdHidden: Boolean
  gdId: BigInt
  gdIdRodic: BigInt
  gdLevel: Int
  gdName: String
  gdPath: String
}

"""A connection to a list of `GalerieDir` values."""
type GalerieDirsConnection {
  """
  A list of edges which contains the `GalerieDir` and cursor to aid in pagination.
  """
  edges: [GalerieDirsEdge!]!

  """A list of `GalerieDir` objects."""
  nodes: [GalerieDir!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GalerieDir` you could get from the connection."""
  totalCount: Int!
}

"""A `GalerieDir` edge in the connection."""
type GalerieDirsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GalerieDir` at the end of the edge."""
  node: GalerieDir!
}

"""Methods to use when ordering `GalerieDir`."""
enum GalerieDirsOrderBy {
  GD_HIDDEN_ASC
  GD_HIDDEN_DESC
  GD_ID_ASC
  GD_ID_DESC
  GD_ID_RODIC_ASC
  GD_ID_RODIC_DESC
  GD_LEVEL_ASC
  GD_LEVEL_DESC
  GD_NAME_ASC
  GD_NAME_DESC
  GD_PATH_ASC
  GD_PATH_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type GalerieFoto implements Node {
  """Reads and enables pagination through a set of `Aktuality`."""
  aktualitiesByAtFotoMain(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AktualityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesConnection!

  """Reads a single `GalerieDir` that is related to this `GalerieFoto`."""
  galerieDirByGfIdRodic: GalerieDir
  gfId: BigInt!
  gfIdRodic: BigInt!
  gfKdo: BigInt!
  gfName: String!
  gfPath: String!
  gfTimestamp: Datetime

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `User` that is related to this `GalerieFoto`."""
  userByGfKdo: User
}

"""
A condition to be used against `GalerieFoto` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GalerieFotoCondition {
  """Checks for equality with the object’s `gfId` field."""
  gfId: BigInt

  """Checks for equality with the object’s `gfIdRodic` field."""
  gfIdRodic: BigInt

  """Checks for equality with the object’s `gfKdo` field."""
  gfKdo: BigInt

  """Checks for equality with the object’s `gfName` field."""
  gfName: String

  """Checks for equality with the object’s `gfPath` field."""
  gfPath: String

  """Checks for equality with the object’s `gfTimestamp` field."""
  gfTimestamp: Datetime
}

"""An input for mutations affecting `GalerieFoto`"""
input GalerieFotoInput {
  gfId: BigInt
  gfIdRodic: BigInt!
  gfKdo: BigInt!
  gfName: String!
  gfPath: String!
  gfTimestamp: Datetime
}

"""
Represents an update to a `GalerieFoto`. Fields that are set will be updated.
"""
input GalerieFotoPatch {
  gfId: BigInt
  gfIdRodic: BigInt
  gfKdo: BigInt
  gfName: String
  gfPath: String
  gfTimestamp: Datetime
}

"""A connection to a list of `GalerieFoto` values."""
type GalerieFotosConnection {
  """
  A list of edges which contains the `GalerieFoto` and cursor to aid in pagination.
  """
  edges: [GalerieFotosEdge!]!

  """A list of `GalerieFoto` objects."""
  nodes: [GalerieFoto!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GalerieFoto` you could get from the connection."""
  totalCount: Int!
}

"""A `GalerieFoto` edge in the connection."""
type GalerieFotosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GalerieFoto` at the end of the edge."""
  node: GalerieFoto!
}

"""Methods to use when ordering `GalerieFoto`."""
enum GalerieFotosOrderBy {
  GF_ID_ASC
  GF_ID_DESC
  GF_ID_RODIC_ASC
  GF_ID_RODIC_DESC
  GF_KDO_ASC
  GF_KDO_DESC
  GF_NAME_ASC
  GF_NAME_DESC
  GF_PATH_ASC
  GF_PATH_DESC
  GF_TIMESTAMP_ASC
  GF_TIMESTAMP_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""All input for the `login` mutation."""
input LoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  login: String!
  passwd: String!
}

"""The output of our `login` mutation."""
type LoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: LoginRecord
}

"""The return type of our `login` mutation."""
type LoginRecord {
  couple: Pary
  sess: Session
  usr: User
}

"""All input for the `logout` mutation."""
input LogoutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `logout` mutation."""
type LogoutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Member {
  newestPayment: Date
  oldestPayment: Date
  paymentValid: Boolean
  sColorRgb: String
  sColorText: String
  sDescription: String
  sId: BigInt
  sLocation: String
  sName: String
  sVisible: Boolean
  uBan: Boolean
  uCity: String
  uConfirmed: Boolean
  uConscriptionNumber: String
  uCreatedAt: Datetime
  uDancer: Boolean
  uDistrict: String
  uEmail: String
  uGdprSignedAt: Datetime
  uGroup: BigInt
  uId: BigInt
  uJmeno: String
  uLevel: Int
  uLock: Boolean
  uLogin: String
  uMemberSince: Datetime
  uMemberUntil: Datetime
  uNarozeni: Date
  uNationality: String
  uOrientationNumber: String
  uPass: String
  uPohlavi: String
  uPostalCode: String
  uPoznamky: String
  uPrijmeni: String
  uRodneCislo: String
  uSkupina: BigInt
  uStreet: String
  uSystem: Boolean
  uTeacher: Boolean
  uTelefon: String
  uTimestamp: Datetime
}

"""
A condition to be used against `Member` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MemberCondition {
  """Checks for equality with the object’s `newestPayment` field."""
  newestPayment: Date

  """Checks for equality with the object’s `oldestPayment` field."""
  oldestPayment: Date

  """Checks for equality with the object’s `paymentValid` field."""
  paymentValid: Boolean

  """Checks for equality with the object’s `sColorRgb` field."""
  sColorRgb: String

  """Checks for equality with the object’s `sColorText` field."""
  sColorText: String

  """Checks for equality with the object’s `sDescription` field."""
  sDescription: String

  """Checks for equality with the object’s `sId` field."""
  sId: BigInt

  """Checks for equality with the object’s `sLocation` field."""
  sLocation: String

  """Checks for equality with the object’s `sName` field."""
  sName: String

  """Checks for equality with the object’s `sVisible` field."""
  sVisible: Boolean

  """Checks for equality with the object’s `uBan` field."""
  uBan: Boolean

  """Checks for equality with the object’s `uCity` field."""
  uCity: String

  """Checks for equality with the object’s `uConfirmed` field."""
  uConfirmed: Boolean

  """Checks for equality with the object’s `uConscriptionNumber` field."""
  uConscriptionNumber: String

  """Checks for equality with the object’s `uCreatedAt` field."""
  uCreatedAt: Datetime

  """Checks for equality with the object’s `uDancer` field."""
  uDancer: Boolean

  """Checks for equality with the object’s `uDistrict` field."""
  uDistrict: String

  """Checks for equality with the object’s `uEmail` field."""
  uEmail: String

  """Checks for equality with the object’s `uGdprSignedAt` field."""
  uGdprSignedAt: Datetime

  """Checks for equality with the object’s `uGroup` field."""
  uGroup: BigInt

  """Checks for equality with the object’s `uId` field."""
  uId: BigInt

  """Checks for equality with the object’s `uJmeno` field."""
  uJmeno: String

  """Checks for equality with the object’s `uLevel` field."""
  uLevel: Int

  """Checks for equality with the object’s `uLock` field."""
  uLock: Boolean

  """Checks for equality with the object’s `uLogin` field."""
  uLogin: String

  """Checks for equality with the object’s `uMemberSince` field."""
  uMemberSince: Datetime

  """Checks for equality with the object’s `uMemberUntil` field."""
  uMemberUntil: Datetime

  """Checks for equality with the object’s `uNarozeni` field."""
  uNarozeni: Date

  """Checks for equality with the object’s `uNationality` field."""
  uNationality: String

  """Checks for equality with the object’s `uOrientationNumber` field."""
  uOrientationNumber: String

  """Checks for equality with the object’s `uPass` field."""
  uPass: String

  """Checks for equality with the object’s `uPohlavi` field."""
  uPohlavi: String

  """Checks for equality with the object’s `uPostalCode` field."""
  uPostalCode: String

  """Checks for equality with the object’s `uPoznamky` field."""
  uPoznamky: String

  """Checks for equality with the object’s `uPrijmeni` field."""
  uPrijmeni: String

  """Checks for equality with the object’s `uRodneCislo` field."""
  uRodneCislo: String

  """Checks for equality with the object’s `uSkupina` field."""
  uSkupina: BigInt

  """Checks for equality with the object’s `uStreet` field."""
  uStreet: String

  """Checks for equality with the object’s `uSystem` field."""
  uSystem: Boolean

  """Checks for equality with the object’s `uTeacher` field."""
  uTeacher: Boolean

  """Checks for equality with the object’s `uTelefon` field."""
  uTelefon: String

  """Checks for equality with the object’s `uTimestamp` field."""
  uTimestamp: Datetime
}

"""A connection to a list of `Member` values."""
type MembersConnection {
  """
  A list of edges which contains the `Member` and cursor to aid in pagination.
  """
  edges: [MembersEdge!]!

  """A list of `Member` objects."""
  nodes: [Member!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Member` you could get from the connection."""
  totalCount: Int!
}

"""A `Member` edge in the connection."""
type MembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Member` at the end of the edge."""
  node: Member!
}

"""Methods to use when ordering `Member`."""
enum MembersOrderBy {
  NATURAL
  NEWEST_PAYMENT_ASC
  NEWEST_PAYMENT_DESC
  OLDEST_PAYMENT_ASC
  OLDEST_PAYMENT_DESC
  PAYMENT_VALID_ASC
  PAYMENT_VALID_DESC
  S_COLOR_RGB_ASC
  S_COLOR_RGB_DESC
  S_COLOR_TEXT_ASC
  S_COLOR_TEXT_DESC
  S_DESCRIPTION_ASC
  S_DESCRIPTION_DESC
  S_ID_ASC
  S_ID_DESC
  S_LOCATION_ASC
  S_LOCATION_DESC
  S_NAME_ASC
  S_NAME_DESC
  S_VISIBLE_ASC
  S_VISIBLE_DESC
  U_BAN_ASC
  U_BAN_DESC
  U_CITY_ASC
  U_CITY_DESC
  U_CONFIRMED_ASC
  U_CONFIRMED_DESC
  U_CONSCRIPTION_NUMBER_ASC
  U_CONSCRIPTION_NUMBER_DESC
  U_CREATED_AT_ASC
  U_CREATED_AT_DESC
  U_DANCER_ASC
  U_DANCER_DESC
  U_DISTRICT_ASC
  U_DISTRICT_DESC
  U_EMAIL_ASC
  U_EMAIL_DESC
  U_GDPR_SIGNED_AT_ASC
  U_GDPR_SIGNED_AT_DESC
  U_GROUP_ASC
  U_GROUP_DESC
  U_ID_ASC
  U_ID_DESC
  U_JMENO_ASC
  U_JMENO_DESC
  U_LEVEL_ASC
  U_LEVEL_DESC
  U_LOCK_ASC
  U_LOCK_DESC
  U_LOGIN_ASC
  U_LOGIN_DESC
  U_MEMBER_SINCE_ASC
  U_MEMBER_SINCE_DESC
  U_MEMBER_UNTIL_ASC
  U_MEMBER_UNTIL_DESC
  U_NAROZENI_ASC
  U_NAROZENI_DESC
  U_NATIONALITY_ASC
  U_NATIONALITY_DESC
  U_ORIENTATION_NUMBER_ASC
  U_ORIENTATION_NUMBER_DESC
  U_PASS_ASC
  U_PASS_DESC
  U_POHLAVI_ASC
  U_POHLAVI_DESC
  U_POSTAL_CODE_ASC
  U_POSTAL_CODE_DESC
  U_POZNAMKY_ASC
  U_POZNAMKY_DESC
  U_PRIJMENI_ASC
  U_PRIJMENI_DESC
  U_RODNE_CISLO_ASC
  U_RODNE_CISLO_DESC
  U_SKUPINA_ASC
  U_SKUPINA_DESC
  U_STREET_ASC
  U_STREET_DESC
  U_SYSTEM_ASC
  U_SYSTEM_DESC
  U_TEACHER_ASC
  U_TEACHER_DESC
  U_TELEFON_ASC
  U_TELEFON_DESC
  U_TIMESTAMP_ASC
  U_TIMESTAMP_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  bookLesson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BookLessonInput!
  ): BookLessonPayload
  cancelLesson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CancelLessonInput!
  ): CancelLessonPayload
  confirmUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmUserInput!
  ): ConfirmUserPayload

  """Creates a single `Akce`."""
  createAkce(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAkceInput!
  ): CreateAkcePayload

  """Creates a single `AkceItem`."""
  createAkceItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAkceItemInput!
  ): CreateAkceItemPayload

  """Creates a single `Aktuality`."""
  createAktuality(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAktualityInput!
  ): CreateAktualityPayload
  createCouple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCoupleInput!
  ): CreateCouplePayload

  """Creates a single `Dokumenty`."""
  createDokumenty(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDokumentyInput!
  ): CreateDokumentyPayload

  """Creates a single `GalerieDir`."""
  createGalerieDir(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGalerieDirInput!
  ): CreateGalerieDirPayload

  """Creates a single `GalerieFoto`."""
  createGalerieFoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGalerieFotoInput!
  ): CreateGalerieFotoPayload

  """Creates a single `Nabidka`."""
  createNabidka(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNabidkaInput!
  ): CreateNabidkaPayload

  """Creates a single `NabidkaItem`."""
  createNabidkaItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNabidkaItemInput!
  ): CreateNabidkaItemPayload

  """Creates a single `Page`."""
  createPage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePageInput!
  ): CreatePagePayload

  """Creates a single `Parameter`."""
  createParameter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParameterInput!
  ): CreateParameterPayload

  """Creates a single `Pary`."""
  createPary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParyInput!
  ): CreateParyPayload

  """Creates a single `ParyNavrh`."""
  createParyNavrh(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParyNavrhInput!
  ): CreateParyNavrhPayload

  """Creates a single `Permission`."""
  createPermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePermissionInput!
  ): CreatePermissionPayload

  """Creates a single `PlatbyCategory`."""
  createPlatbyCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlatbyCategoryInput!
  ): CreatePlatbyCategoryPayload

  """Creates a single `PlatbyCategoryGroup`."""
  createPlatbyCategoryGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlatbyCategoryGroupInput!
  ): CreatePlatbyCategoryGroupPayload

  """Creates a single `PlatbyGroup`."""
  createPlatbyGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlatbyGroupInput!
  ): CreatePlatbyGroupPayload

  """Creates a single `PlatbyGroupSkupina`."""
  createPlatbyGroupSkupina(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlatbyGroupSkupinaInput!
  ): CreatePlatbyGroupSkupinaPayload

  """Creates a single `PlatbyItem`."""
  createPlatbyItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlatbyItemInput!
  ): CreatePlatbyItemPayload

  """Creates a single `PlatbyRaw`."""
  createPlatbyRaw(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlatbyRawInput!
  ): CreatePlatbyRawPayload

  """Creates a single `Rozpi`."""
  createRozpi(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRozpiInput!
  ): CreateRozpiPayload

  """Creates a single `RozpisItem`."""
  createRozpisItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRozpisItemInput!
  ): CreateRozpisItemPayload

  """Creates a single `Session`."""
  createSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSessionInput!
  ): CreateSessionPayload

  """Creates a single `Skupiny`."""
  createSkupiny(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSkupinyInput!
  ): CreateSkupinyPayload

  """Creates a single `Upozorneni`."""
  createUpozorneni(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUpozorneniInput!
  ): CreateUpozorneniPayload

  """Creates a single `UpozorneniSkupiny`."""
  createUpozorneniSkupiny(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUpozorneniSkupinyInput!
  ): CreateUpozorneniSkupinyPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `Video`."""
  createVideo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateVideoInput!
  ): CreateVideoPayload

  """Creates a single `VideoList`."""
  createVideoList(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateVideoListInput!
  ): CreateVideoListPayload

  """Creates a single `VideoSource`."""
  createVideoSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateVideoSourceInput!
  ): CreateVideoSourcePayload

  """Deletes a single `Akce` using a unique key."""
  deleteAkce(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAkceInput!
  ): DeleteAkcePayload

  """Deletes a single `Akce` using its globally unique id."""
  deleteAkceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAkceByNodeIdInput!
  ): DeleteAkcePayload

  """Deletes a single `AkceItem` using a unique key."""
  deleteAkceItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAkceItemInput!
  ): DeleteAkceItemPayload

  """Deletes a single `AkceItem` using its globally unique id."""
  deleteAkceItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAkceItemByNodeIdInput!
  ): DeleteAkceItemPayload

  """Deletes a single `Aktuality` using a unique key."""
  deleteAktuality(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAktualityInput!
  ): DeleteAktualityPayload

  """Deletes a single `Aktuality` using its globally unique id."""
  deleteAktualityByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAktualityByNodeIdInput!
  ): DeleteAktualityPayload

  """Deletes a single `Dokumenty` using a unique key."""
  deleteDokumenty(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDokumentyInput!
  ): DeleteDokumentyPayload

  """Deletes a single `Dokumenty` using its globally unique id."""
  deleteDokumentyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDokumentyByNodeIdInput!
  ): DeleteDokumentyPayload

  """Deletes a single `GalerieDir` using a unique key."""
  deleteGalerieDir(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGalerieDirInput!
  ): DeleteGalerieDirPayload

  """Deletes a single `GalerieDir` using its globally unique id."""
  deleteGalerieDirByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGalerieDirByNodeIdInput!
  ): DeleteGalerieDirPayload

  """Deletes a single `GalerieFoto` using a unique key."""
  deleteGalerieFoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGalerieFotoInput!
  ): DeleteGalerieFotoPayload

  """Deletes a single `GalerieFoto` using its globally unique id."""
  deleteGalerieFotoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGalerieFotoByNodeIdInput!
  ): DeleteGalerieFotoPayload

  """Deletes a single `Nabidka` using a unique key."""
  deleteNabidka(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNabidkaInput!
  ): DeleteNabidkaPayload

  """Deletes a single `Nabidka` using its globally unique id."""
  deleteNabidkaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNabidkaByNodeIdInput!
  ): DeleteNabidkaPayload

  """Deletes a single `NabidkaItem` using a unique key."""
  deleteNabidkaItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNabidkaItemInput!
  ): DeleteNabidkaItemPayload

  """Deletes a single `NabidkaItem` using its globally unique id."""
  deleteNabidkaItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNabidkaItemByNodeIdInput!
  ): DeleteNabidkaItemPayload

  """Deletes a single `Parameter` using a unique key."""
  deleteParameter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParameterInput!
  ): DeleteParameterPayload

  """Deletes a single `Parameter` using its globally unique id."""
  deleteParameterByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParameterByNodeIdInput!
  ): DeleteParameterPayload

  """Deletes a single `Pary` using a unique key."""
  deletePary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParyInput!
  ): DeleteParyPayload

  """Deletes a single `Pary` using its globally unique id."""
  deleteParyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParyByNodeIdInput!
  ): DeleteParyPayload

  """Deletes a single `ParyNavrh` using a unique key."""
  deleteParyNavrh(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParyNavrhInput!
  ): DeleteParyNavrhPayload

  """Deletes a single `ParyNavrh` using its globally unique id."""
  deleteParyNavrhByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParyNavrhByNodeIdInput!
  ): DeleteParyNavrhPayload

  """Deletes a single `Permission` using a unique key."""
  deletePermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionInput!
  ): DeletePermissionPayload

  """Deletes a single `Permission` using its globally unique id."""
  deletePermissionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionByNodeIdInput!
  ): DeletePermissionPayload

  """Deletes a single `PlatbyCategory` using a unique key."""
  deletePlatbyCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlatbyCategoryInput!
  ): DeletePlatbyCategoryPayload

  """Deletes a single `PlatbyCategory` using its globally unique id."""
  deletePlatbyCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlatbyCategoryByNodeIdInput!
  ): DeletePlatbyCategoryPayload

  """Deletes a single `PlatbyCategoryGroup` using a unique key."""
  deletePlatbyCategoryGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlatbyCategoryGroupInput!
  ): DeletePlatbyCategoryGroupPayload

  """Deletes a single `PlatbyCategoryGroup` using its globally unique id."""
  deletePlatbyCategoryGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlatbyCategoryGroupByNodeIdInput!
  ): DeletePlatbyCategoryGroupPayload

  """Deletes a single `PlatbyGroup` using a unique key."""
  deletePlatbyGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlatbyGroupInput!
  ): DeletePlatbyGroupPayload

  """Deletes a single `PlatbyGroup` using its globally unique id."""
  deletePlatbyGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlatbyGroupByNodeIdInput!
  ): DeletePlatbyGroupPayload

  """Deletes a single `PlatbyGroupSkupina` using a unique key."""
  deletePlatbyGroupSkupina(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlatbyGroupSkupinaInput!
  ): DeletePlatbyGroupSkupinaPayload

  """Deletes a single `PlatbyGroupSkupina` using its globally unique id."""
  deletePlatbyGroupSkupinaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlatbyGroupSkupinaByNodeIdInput!
  ): DeletePlatbyGroupSkupinaPayload

  """Deletes a single `PlatbyItem` using a unique key."""
  deletePlatbyItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlatbyItemInput!
  ): DeletePlatbyItemPayload

  """Deletes a single `PlatbyItem` using its globally unique id."""
  deletePlatbyItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlatbyItemByNodeIdInput!
  ): DeletePlatbyItemPayload

  """Deletes a single `PlatbyRaw` using a unique key."""
  deletePlatbyRaw(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlatbyRawInput!
  ): DeletePlatbyRawPayload

  """Deletes a single `PlatbyRaw` using its globally unique id."""
  deletePlatbyRawByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlatbyRawByNodeIdInput!
  ): DeletePlatbyRawPayload

  """Deletes a single `Rozpi` using a unique key."""
  deleteRozpi(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRozpiInput!
  ): DeleteRozpiPayload

  """Deletes a single `Rozpi` using its globally unique id."""
  deleteRozpiByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRozpiByNodeIdInput!
  ): DeleteRozpiPayload

  """Deletes a single `RozpisItem` using a unique key."""
  deleteRozpisItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRozpisItemInput!
  ): DeleteRozpisItemPayload

  """Deletes a single `RozpisItem` using its globally unique id."""
  deleteRozpisItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRozpisItemByNodeIdInput!
  ): DeleteRozpisItemPayload

  """Deletes a single `Session` using a unique key."""
  deleteSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSessionInput!
  ): DeleteSessionPayload

  """Deletes a single `Session` using its globally unique id."""
  deleteSessionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSessionByNodeIdInput!
  ): DeleteSessionPayload

  """Deletes a single `Skupiny` using a unique key."""
  deleteSkupiny(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSkupinyInput!
  ): DeleteSkupinyPayload

  """Deletes a single `Skupiny` using its globally unique id."""
  deleteSkupinyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSkupinyByNodeIdInput!
  ): DeleteSkupinyPayload

  """Deletes a single `Upozorneni` using a unique key."""
  deleteUpozorneni(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUpozorneniInput!
  ): DeleteUpozorneniPayload

  """Deletes a single `Upozorneni` using its globally unique id."""
  deleteUpozorneniByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUpozorneniByNodeIdInput!
  ): DeleteUpozorneniPayload

  """Deletes a single `UpozorneniSkupiny` using a unique key."""
  deleteUpozorneniSkupiny(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUpozorneniSkupinyInput!
  ): DeleteUpozorneniSkupinyPayload

  """Deletes a single `UpozorneniSkupiny` using its globally unique id."""
  deleteUpozorneniSkupinyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUpozorneniSkupinyByNodeIdInput!
  ): DeleteUpozorneniSkupinyPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `Video` using a unique key."""
  deleteVideo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVideoInput!
  ): DeleteVideoPayload

  """Deletes a single `Video` using its globally unique id."""
  deleteVideoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVideoByNodeIdInput!
  ): DeleteVideoPayload

  """Deletes a single `VideoList` using a unique key."""
  deleteVideoList(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVideoListInput!
  ): DeleteVideoListPayload

  """Deletes a single `VideoList` using its globally unique id."""
  deleteVideoListByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVideoListByNodeIdInput!
  ): DeleteVideoListPayload

  """Deletes a single `VideoSource` using a unique key."""
  deleteVideoSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVideoSourceInput!
  ): DeleteVideoSourcePayload

  """Deletes a single `VideoSource` using its globally unique id."""
  deleteVideoSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVideoSourceByNodeIdInput!
  ): DeleteVideoSourcePayload
  fixUnpairedCouples(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: FixUnpairedCouplesInput!
  ): FixUnpairedCouplesPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
  logout(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LogoutInput!
  ): LogoutPayload
  prospectFormDancer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ProspectFormDancerInput!
  ): ProspectFormDancerPayload
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload

  """Updates a single `Akce` using a unique key and a patch."""
  updateAkce(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAkceInput!
  ): UpdateAkcePayload

  """Updates a single `Akce` using its globally unique id and a patch."""
  updateAkceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAkceByNodeIdInput!
  ): UpdateAkcePayload

  """Updates a single `AkceItem` using a unique key and a patch."""
  updateAkceItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAkceItemInput!
  ): UpdateAkceItemPayload

  """Updates a single `AkceItem` using its globally unique id and a patch."""
  updateAkceItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAkceItemByNodeIdInput!
  ): UpdateAkceItemPayload

  """Updates a single `Aktuality` using a unique key and a patch."""
  updateAktuality(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAktualityInput!
  ): UpdateAktualityPayload

  """Updates a single `Aktuality` using its globally unique id and a patch."""
  updateAktualityByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAktualityByNodeIdInput!
  ): UpdateAktualityPayload

  """Updates a single `Dokumenty` using a unique key and a patch."""
  updateDokumenty(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDokumentyInput!
  ): UpdateDokumentyPayload

  """Updates a single `Dokumenty` using its globally unique id and a patch."""
  updateDokumentyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDokumentyByNodeIdInput!
  ): UpdateDokumentyPayload

  """Updates a single `GalerieDir` using a unique key and a patch."""
  updateGalerieDir(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGalerieDirInput!
  ): UpdateGalerieDirPayload

  """
  Updates a single `GalerieDir` using its globally unique id and a patch.
  """
  updateGalerieDirByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGalerieDirByNodeIdInput!
  ): UpdateGalerieDirPayload

  """Updates a single `GalerieFoto` using a unique key and a patch."""
  updateGalerieFoto(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGalerieFotoInput!
  ): UpdateGalerieFotoPayload

  """
  Updates a single `GalerieFoto` using its globally unique id and a patch.
  """
  updateGalerieFotoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGalerieFotoByNodeIdInput!
  ): UpdateGalerieFotoPayload

  """Updates a single `Nabidka` using a unique key and a patch."""
  updateNabidka(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNabidkaInput!
  ): UpdateNabidkaPayload

  """Updates a single `Nabidka` using its globally unique id and a patch."""
  updateNabidkaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNabidkaByNodeIdInput!
  ): UpdateNabidkaPayload

  """Updates a single `NabidkaItem` using a unique key and a patch."""
  updateNabidkaItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNabidkaItemInput!
  ): UpdateNabidkaItemPayload

  """
  Updates a single `NabidkaItem` using its globally unique id and a patch.
  """
  updateNabidkaItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNabidkaItemByNodeIdInput!
  ): UpdateNabidkaItemPayload

  """Updates a single `Page` using a unique key and a patch."""
  updatePage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageInput!
  ): UpdatePagePayload

  """Updates a single `Page` using its globally unique id and a patch."""
  updatePageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageByNodeIdInput!
  ): UpdatePagePayload

  """Updates a single `Page` using a unique key and a patch."""
  updatePageByUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageByUrlInput!
  ): UpdatePagePayload

  """Updates a single `Parameter` using a unique key and a patch."""
  updateParameter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParameterInput!
  ): UpdateParameterPayload

  """Updates a single `Parameter` using its globally unique id and a patch."""
  updateParameterByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParameterByNodeIdInput!
  ): UpdateParameterPayload

  """Updates a single `Pary` using a unique key and a patch."""
  updatePary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParyInput!
  ): UpdateParyPayload

  """Updates a single `Pary` using its globally unique id and a patch."""
  updateParyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParyByNodeIdInput!
  ): UpdateParyPayload

  """Updates a single `ParyNavrh` using a unique key and a patch."""
  updateParyNavrh(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParyNavrhInput!
  ): UpdateParyNavrhPayload

  """Updates a single `ParyNavrh` using its globally unique id and a patch."""
  updateParyNavrhByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParyNavrhByNodeIdInput!
  ): UpdateParyNavrhPayload

  """Updates a single `Permission` using a unique key and a patch."""
  updatePermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionInput!
  ): UpdatePermissionPayload

  """
  Updates a single `Permission` using its globally unique id and a patch.
  """
  updatePermissionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionByNodeIdInput!
  ): UpdatePermissionPayload

  """Updates a single `PlatbyCategory` using a unique key and a patch."""
  updatePlatbyCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlatbyCategoryInput!
  ): UpdatePlatbyCategoryPayload

  """
  Updates a single `PlatbyCategory` using its globally unique id and a patch.
  """
  updatePlatbyCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlatbyCategoryByNodeIdInput!
  ): UpdatePlatbyCategoryPayload

  """Updates a single `PlatbyCategoryGroup` using a unique key and a patch."""
  updatePlatbyCategoryGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlatbyCategoryGroupInput!
  ): UpdatePlatbyCategoryGroupPayload

  """
  Updates a single `PlatbyCategoryGroup` using its globally unique id and a patch.
  """
  updatePlatbyCategoryGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlatbyCategoryGroupByNodeIdInput!
  ): UpdatePlatbyCategoryGroupPayload

  """Updates a single `PlatbyGroup` using a unique key and a patch."""
  updatePlatbyGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlatbyGroupInput!
  ): UpdatePlatbyGroupPayload

  """
  Updates a single `PlatbyGroup` using its globally unique id and a patch.
  """
  updatePlatbyGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlatbyGroupByNodeIdInput!
  ): UpdatePlatbyGroupPayload

  """Updates a single `PlatbyGroupSkupina` using a unique key and a patch."""
  updatePlatbyGroupSkupina(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlatbyGroupSkupinaInput!
  ): UpdatePlatbyGroupSkupinaPayload

  """
  Updates a single `PlatbyGroupSkupina` using its globally unique id and a patch.
  """
  updatePlatbyGroupSkupinaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlatbyGroupSkupinaByNodeIdInput!
  ): UpdatePlatbyGroupSkupinaPayload

  """Updates a single `PlatbyItem` using a unique key and a patch."""
  updatePlatbyItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlatbyItemInput!
  ): UpdatePlatbyItemPayload

  """
  Updates a single `PlatbyItem` using its globally unique id and a patch.
  """
  updatePlatbyItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlatbyItemByNodeIdInput!
  ): UpdatePlatbyItemPayload

  """Updates a single `PlatbyRaw` using a unique key and a patch."""
  updatePlatbyRaw(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlatbyRawInput!
  ): UpdatePlatbyRawPayload

  """Updates a single `PlatbyRaw` using its globally unique id and a patch."""
  updatePlatbyRawByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlatbyRawByNodeIdInput!
  ): UpdatePlatbyRawPayload

  """Updates a single `Rozpi` using a unique key and a patch."""
  updateRozpi(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRozpiInput!
  ): UpdateRozpiPayload

  """Updates a single `Rozpi` using its globally unique id and a patch."""
  updateRozpiByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRozpiByNodeIdInput!
  ): UpdateRozpiPayload

  """Updates a single `RozpisItem` using a unique key and a patch."""
  updateRozpisItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRozpisItemInput!
  ): UpdateRozpisItemPayload

  """
  Updates a single `RozpisItem` using its globally unique id and a patch.
  """
  updateRozpisItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRozpisItemByNodeIdInput!
  ): UpdateRozpisItemPayload

  """Updates a single `Session` using a unique key and a patch."""
  updateSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSessionInput!
  ): UpdateSessionPayload

  """Updates a single `Session` using its globally unique id and a patch."""
  updateSessionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSessionByNodeIdInput!
  ): UpdateSessionPayload

  """Updates a single `Skupiny` using a unique key and a patch."""
  updateSkupiny(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSkupinyInput!
  ): UpdateSkupinyPayload

  """Updates a single `Skupiny` using its globally unique id and a patch."""
  updateSkupinyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSkupinyByNodeIdInput!
  ): UpdateSkupinyPayload

  """Updates a single `Upozorneni` using a unique key and a patch."""
  updateUpozorneni(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUpozorneniInput!
  ): UpdateUpozorneniPayload

  """
  Updates a single `Upozorneni` using its globally unique id and a patch.
  """
  updateUpozorneniByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUpozorneniByNodeIdInput!
  ): UpdateUpozorneniPayload

  """Updates a single `UpozorneniSkupiny` using a unique key and a patch."""
  updateUpozorneniSkupiny(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUpozorneniSkupinyInput!
  ): UpdateUpozorneniSkupinyPayload

  """
  Updates a single `UpozorneniSkupiny` using its globally unique id and a patch.
  """
  updateUpozorneniSkupinyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUpozorneniSkupinyByNodeIdInput!
  ): UpdateUpozorneniSkupinyPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `Video` using a unique key and a patch."""
  updateVideo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVideoInput!
  ): UpdateVideoPayload

  """Updates a single `Video` using its globally unique id and a patch."""
  updateVideoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVideoByNodeIdInput!
  ): UpdateVideoPayload

  """Updates a single `VideoList` using a unique key and a patch."""
  updateVideoList(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVideoListInput!
  ): UpdateVideoListPayload

  """Updates a single `VideoList` using its globally unique id and a patch."""
  updateVideoListByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVideoListByNodeIdInput!
  ): UpdateVideoListPayload

  """Updates a single `VideoSource` using a unique key and a patch."""
  updateVideoSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVideoSourceInput!
  ): UpdateVideoSourcePayload

  """
  Updates a single `VideoSource` using its globally unique id and a patch.
  """
  updateVideoSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVideoSourceByNodeIdInput!
  ): UpdateVideoSourcePayload
}

type Nabidka implements Node {
  """Reads and enables pagination through a set of `NabidkaItem`."""
  nabidkaItemsByNiIdRodic(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NabidkaItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NabidkaItem`."""
    orderBy: [NabidkaItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NabidkaItemsConnection!
  nDo: Date!
  nId: BigInt!
  nLock: Boolean!
  nMaxPocetHod: Int!
  nOd: Date!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  nPocetHod: Int!
  nTimestamp: Datetime
  nTrener: BigInt!
  nVisible: Boolean!

  """Reads a single `User` that is related to this `Nabidka`."""
  userByNTrener: User
}

"""
A condition to be used against `Nabidka` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input NabidkaCondition {
  """Checks for equality with the object’s `nDo` field."""
  nDo: Date

  """Checks for equality with the object’s `nId` field."""
  nId: BigInt

  """Checks for equality with the object’s `nLock` field."""
  nLock: Boolean

  """Checks for equality with the object’s `nMaxPocetHod` field."""
  nMaxPocetHod: Int

  """Checks for equality with the object’s `nOd` field."""
  nOd: Date

  """Checks for equality with the object’s `nPocetHod` field."""
  nPocetHod: Int

  """Checks for equality with the object’s `nTimestamp` field."""
  nTimestamp: Datetime

  """Checks for equality with the object’s `nTrener` field."""
  nTrener: BigInt

  """Checks for equality with the object’s `nVisible` field."""
  nVisible: Boolean
}

"""An input for mutations affecting `Nabidka`"""
input NabidkaInput {
  nDo: Date!
  nId: BigInt
  nLock: Boolean
  nMaxPocetHod: Int
  nOd: Date!
  nPocetHod: Int
  nTimestamp: Datetime
  nTrener: BigInt!
  nVisible: Boolean
}

type NabidkaItem implements Node {
  """Reads a single `Nabidka` that is related to this `NabidkaItem`."""
  nabidkaByNiIdRodic: Nabidka
  niId: BigInt!
  niIdRodic: BigInt!
  niLock: Boolean!
  niPartner: BigInt!
  niPocetHod: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Pary` that is related to this `NabidkaItem`."""
  paryByNiPartner: Pary
}

"""
A condition to be used against `NabidkaItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input NabidkaItemCondition {
  """Checks for equality with the object’s `niId` field."""
  niId: BigInt

  """Checks for equality with the object’s `niIdRodic` field."""
  niIdRodic: BigInt

  """Checks for equality with the object’s `niLock` field."""
  niLock: Boolean

  """Checks for equality with the object’s `niPartner` field."""
  niPartner: BigInt

  """Checks for equality with the object’s `niPocetHod` field."""
  niPocetHod: Int
}

"""An input for mutations affecting `NabidkaItem`"""
input NabidkaItemInput {
  niId: BigInt
  niIdRodic: BigInt!
  niLock: Boolean
  niPartner: BigInt!
  niPocetHod: Int
}

"""
Represents an update to a `NabidkaItem`. Fields that are set will be updated.
"""
input NabidkaItemPatch {
  niId: BigInt
  niIdRodic: BigInt
  niLock: Boolean
  niPartner: BigInt
  niPocetHod: Int
}

"""A connection to a list of `NabidkaItem` values."""
type NabidkaItemsConnection {
  """
  A list of edges which contains the `NabidkaItem` and cursor to aid in pagination.
  """
  edges: [NabidkaItemsEdge!]!

  """A list of `NabidkaItem` objects."""
  nodes: [NabidkaItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `NabidkaItem` you could get from the connection."""
  totalCount: Int!
}

"""A `NabidkaItem` edge in the connection."""
type NabidkaItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NabidkaItem` at the end of the edge."""
  node: NabidkaItem!
}

"""Methods to use when ordering `NabidkaItem`."""
enum NabidkaItemsOrderBy {
  NATURAL
  NI_ID_ASC
  NI_ID_DESC
  NI_ID_RODIC_ASC
  NI_ID_RODIC_DESC
  NI_LOCK_ASC
  NI_LOCK_DESC
  NI_PARTNER_ASC
  NI_PARTNER_DESC
  NI_POCET_HOD_ASC
  NI_POCET_HOD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Nabidka`. Fields that are set will be updated.
"""
input NabidkaPatch {
  nDo: Date
  nId: BigInt
  nLock: Boolean
  nMaxPocetHod: Int
  nOd: Date
  nPocetHod: Int
  nTimestamp: Datetime
  nTrener: BigInt
  nVisible: Boolean
}

"""A connection to a list of `Nabidka` values."""
type NabidkasConnection {
  """
  A list of edges which contains the `Nabidka` and cursor to aid in pagination.
  """
  edges: [NabidkasEdge!]!

  """A list of `Nabidka` objects."""
  nodes: [Nabidka!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Nabidka` you could get from the connection."""
  totalCount: Int!
}

"""A `Nabidka` edge in the connection."""
type NabidkasEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Nabidka` at the end of the edge."""
  node: Nabidka!
}

"""Methods to use when ordering `Nabidka`."""
enum NabidkasOrderBy {
  N_DO_ASC
  N_DO_DESC
  N_ID_ASC
  N_ID_DESC
  N_LOCK_ASC
  N_LOCK_DESC
  N_MAX_POCET_HOD_ASC
  N_MAX_POCET_HOD_DESC
  N_OD_ASC
  N_OD_DESC
  N_POCET_HOD_ASC
  N_POCET_HOD_DESC
  N_TIMESTAMP_ASC
  N_TIMESTAMP_DESC
  N_TRENER_ASC
  N_TRENER_DESC
  N_VISIBLE_ASC
  N_VISIBLE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Page implements Node {
  content: JSON!
  createdAt: Datetime!
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  title: String!
  updatedAt: Datetime!
  url: String!
}

"""
A condition to be used against `Page` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PageCondition {
  """Checks for equality with the object’s `content` field."""
  content: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `url` field."""
  url: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""An input for mutations affecting `Page`"""
input PageInput {
  content: JSON!
  createdAt: Datetime
  id: Int
  title: String
  updatedAt: Datetime
  url: String!
}

"""Represents an update to a `Page`. Fields that are set will be updated."""
input PagePatch {
  content: JSON
  createdAt: Datetime
  id: Int
  title: String
  updatedAt: Datetime
  url: String
}

type PageRevision implements Node {
  content: JSON!
  createdAt: Datetime!
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  revNumber: Int!
  revOperation: String!
  revTimestamp: Datetime
  title: String!
  updatedAt: Datetime!
  url: String!
}

"""
A condition to be used against `PageRevision` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PageRevisionCondition {
  """Checks for equality with the object’s `content` field."""
  content: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `revNumber` field."""
  revNumber: Int

  """Checks for equality with the object’s `revOperation` field."""
  revOperation: String

  """Checks for equality with the object’s `revTimestamp` field."""
  revTimestamp: Datetime

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `url` field."""
  url: String
}

"""A connection to a list of `PageRevision` values."""
type PageRevisionsConnection {
  """
  A list of edges which contains the `PageRevision` and cursor to aid in pagination.
  """
  edges: [PageRevisionsEdge!]!

  """A list of `PageRevision` objects."""
  nodes: [PageRevision!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PageRevision` you could get from the connection."""
  totalCount: Int!
}

"""A `PageRevision` edge in the connection."""
type PageRevisionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PageRevision` at the end of the edge."""
  node: PageRevision!
}

"""Methods to use when ordering `PageRevision`."""
enum PageRevisionsOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REV_NUMBER_ASC
  REV_NUMBER_DESC
  REV_OPERATION_ASC
  REV_OPERATION_DESC
  REV_TIMESTAMP_ASC
  REV_TIMESTAMP_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  URL_ASC
  URL_DESC
}

"""A connection to a list of `Page` values."""
type PagesConnection {
  """
  A list of edges which contains the `Page` and cursor to aid in pagination.
  """
  edges: [PagesEdge!]!

  """A list of `Page` objects."""
  nodes: [Page!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Page` you could get from the connection."""
  totalCount: Int!
}

"""A `Page` edge in the connection."""
type PagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Page` at the end of the edge."""
  node: Page!
}

"""Methods to use when ordering `Page`."""
enum PagesOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  URL_ASC
  URL_DESC
}

type Parameter implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  paName: String!
  paValue: String!
}

"""
A condition to be used against `Parameter` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ParameterCondition {
  """Checks for equality with the object’s `paName` field."""
  paName: String

  """Checks for equality with the object’s `paValue` field."""
  paValue: String
}

"""An input for mutations affecting `Parameter`"""
input ParameterInput {
  paName: String!
  paValue: String!
}

"""
Represents an update to a `Parameter`. Fields that are set will be updated.
"""
input ParameterPatch {
  paName: String
  paValue: String
}

"""A connection to a list of `Parameter` values."""
type ParametersConnection {
  """
  A list of edges which contains the `Parameter` and cursor to aid in pagination.
  """
  edges: [ParametersEdge!]!

  """A list of `Parameter` objects."""
  nodes: [Parameter!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Parameter` you could get from the connection."""
  totalCount: Int!
}

"""A `Parameter` edge in the connection."""
type ParametersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Parameter` at the end of the edge."""
  node: Parameter!
}

"""Methods to use when ordering `Parameter`."""
enum ParametersOrderBy {
  NATURAL
  PA_NAME_ASC
  PA_NAME_DESC
  PA_VALUE_ASC
  PA_VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Pary` values."""
type PariesConnection {
  """
  A list of edges which contains the `Pary` and cursor to aid in pagination.
  """
  edges: [PariesEdge!]!

  """A list of `Pary` objects."""
  nodes: [Pary!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Pary` you could get from the connection."""
  totalCount: Int!
}

"""A `Pary` edge in the connection."""
type PariesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Pary` at the end of the edge."""
  node: Pary!
}

"""Methods to use when ordering `Pary`."""
enum PariesOrderBy {
  NATURAL
  P_ARCHIV_ASC
  P_ARCHIV_DESC
  P_HODNOCENI_ASC
  P_HODNOCENI_DESC
  P_ID_ASC
  P_ID_DESC
  P_ID_PARTNER_ASC
  P_ID_PARTNER_DESC
  P_ID_PARTNERKA_ASC
  P_ID_PARTNERKA_DESC
  P_LAT_BODY_ASC
  P_LAT_BODY_DESC
  P_LAT_FINALE_ASC
  P_LAT_FINALE_DESC
  P_LAT_TRIDA_ASC
  P_LAT_TRIDA_DESC
  P_STT_BODY_ASC
  P_STT_BODY_DESC
  P_STT_FINALE_ASC
  P_STT_FINALE_DESC
  P_STT_TRIDA_ASC
  P_STT_TRIDA_DESC
  P_TIMESTAMP_ADD_ASC
  P_TIMESTAMP_ADD_DESC
  P_TIMESTAMP_ARCHIVE_ASC
  P_TIMESTAMP_ARCHIVE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Pary implements Node {
  """Reads and enables pagination through a set of `NabidkaItem`."""
  nabidkaItemsByNiPartner(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NabidkaItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NabidkaItem`."""
    orderBy: [NabidkaItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NabidkaItemsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pArchiv: Boolean!
  pHodnoceni: Int!
  pId: BigInt!
  pIdPartner: BigInt!
  pIdPartnerka: BigInt
  pLatBody: Int!
  pLatFinale: Boolean!
  pLatTrida: ParyPLatTrida!
  pSttBody: Int!
  pSttFinale: Boolean!
  pSttTrida: ParyPSttTrida!
  pTimestampAdd: Datetime!
  pTimestampArchive: Datetime

  """Reads and enables pagination through a set of `RozpisItem`."""
  rozpisItemsByRiPartner(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RozpisItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RozpisItem`."""
    orderBy: [RozpisItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RozpisItemsConnection!

  """Reads a single `User` that is related to this `Pary`."""
  userByPIdPartner: User

  """Reads a single `User` that is related to this `Pary`."""
  userByPIdPartnerka: User
}

"""
A condition to be used against `Pary` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ParyCondition {
  """Checks for equality with the object’s `pArchiv` field."""
  pArchiv: Boolean

  """Checks for equality with the object’s `pHodnoceni` field."""
  pHodnoceni: Int

  """Checks for equality with the object’s `pId` field."""
  pId: BigInt

  """Checks for equality with the object’s `pIdPartner` field."""
  pIdPartner: BigInt

  """Checks for equality with the object’s `pIdPartnerka` field."""
  pIdPartnerka: BigInt

  """Checks for equality with the object’s `pLatBody` field."""
  pLatBody: Int

  """Checks for equality with the object’s `pLatFinale` field."""
  pLatFinale: Boolean

  """Checks for equality with the object’s `pLatTrida` field."""
  pLatTrida: ParyPLatTrida

  """Checks for equality with the object’s `pSttBody` field."""
  pSttBody: Int

  """Checks for equality with the object’s `pSttFinale` field."""
  pSttFinale: Boolean

  """Checks for equality with the object’s `pSttTrida` field."""
  pSttTrida: ParyPSttTrida

  """Checks for equality with the object’s `pTimestampAdd` field."""
  pTimestampAdd: Datetime

  """Checks for equality with the object’s `pTimestampArchive` field."""
  pTimestampArchive: Datetime
}

"""An input for mutations affecting `Pary`"""
input ParyInput {
  pArchiv: Boolean
  pHodnoceni: Int
  pId: BigInt
  pIdPartner: BigInt!
  pIdPartnerka: BigInt
  pLatBody: Int
  pLatFinale: Boolean
  pLatTrida: ParyPLatTrida
  pSttBody: Int
  pSttFinale: Boolean
  pSttTrida: ParyPSttTrida
  pTimestampAdd: Datetime
  pTimestampArchive: Datetime
}

type ParyNavrh implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pnId: BigInt!
  pnNavrhl: BigInt!
  pnPartner: BigInt!
  pnPartnerka: BigInt!

  """Reads a single `User` that is related to this `ParyNavrh`."""
  userByPnNavrhl: User

  """Reads a single `User` that is related to this `ParyNavrh`."""
  userByPnPartner: User

  """Reads a single `User` that is related to this `ParyNavrh`."""
  userByPnPartnerka: User
}

"""
A condition to be used against `ParyNavrh` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ParyNavrhCondition {
  """Checks for equality with the object’s `pnId` field."""
  pnId: BigInt

  """Checks for equality with the object’s `pnNavrhl` field."""
  pnNavrhl: BigInt

  """Checks for equality with the object’s `pnPartner` field."""
  pnPartner: BigInt

  """Checks for equality with the object’s `pnPartnerka` field."""
  pnPartnerka: BigInt
}

"""An input for mutations affecting `ParyNavrh`"""
input ParyNavrhInput {
  pnId: BigInt
  pnNavrhl: BigInt!
  pnPartner: BigInt!
  pnPartnerka: BigInt!
}

"""
Represents an update to a `ParyNavrh`. Fields that are set will be updated.
"""
input ParyNavrhPatch {
  pnId: BigInt
  pnNavrhl: BigInt
  pnPartner: BigInt
  pnPartnerka: BigInt
}

"""A connection to a list of `ParyNavrh` values."""
type ParyNavrhsConnection {
  """
  A list of edges which contains the `ParyNavrh` and cursor to aid in pagination.
  """
  edges: [ParyNavrhsEdge!]!

  """A list of `ParyNavrh` objects."""
  nodes: [ParyNavrh!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ParyNavrh` you could get from the connection."""
  totalCount: Int!
}

"""A `ParyNavrh` edge in the connection."""
type ParyNavrhsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ParyNavrh` at the end of the edge."""
  node: ParyNavrh!
}

"""Methods to use when ordering `ParyNavrh`."""
enum ParyNavrhsOrderBy {
  NATURAL
  PN_ID_ASC
  PN_ID_DESC
  PN_NAVRHL_ASC
  PN_NAVRHL_DESC
  PN_PARTNER_ASC
  PN_PARTNER_DESC
  PN_PARTNERKA_ASC
  PN_PARTNERKA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Represents an update to a `Pary`. Fields that are set will be updated."""
input ParyPatch {
  pArchiv: Boolean
  pHodnoceni: Int
  pId: BigInt
  pIdPartner: BigInt
  pIdPartnerka: BigInt
  pLatBody: Int
  pLatFinale: Boolean
  pLatTrida: ParyPLatTrida
  pSttBody: Int
  pSttFinale: Boolean
  pSttTrida: ParyPSttTrida
  pTimestampAdd: Datetime
  pTimestampArchive: Datetime
}

enum ParyPLatTrida {
  A
  B
  C
  D
  H
  M
  Z
}

enum ParyPSttTrida {
  A
  B
  C
  D
  H
  M
  Z
}

type Permission implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  peAkce: Int!
  peAktuality: Int!
  peAnkety: Int!
  peDescription: String!
  peDokumenty: Int!
  peGalerie: Int!
  peId: BigInt!
  peInzerce: Int!
  peKonzole: Int!
  peMain: Int!
  peNabidka: Int!
  peName: String!
  peNastenka: Int!
  peNovinky: Int!
  pePary: Int!
  pePermissions: Int!
  pePlatby: Int!
  peRozpis: Int!
  peSkupiny: Int!
  peUsers: Int!

  """Reads and enables pagination through a set of `User`."""
  usersByUGroup(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection!
}

"""
A condition to be used against `Permission` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PermissionCondition {
  """Checks for equality with the object’s `peAkce` field."""
  peAkce: Int

  """Checks for equality with the object’s `peAktuality` field."""
  peAktuality: Int

  """Checks for equality with the object’s `peAnkety` field."""
  peAnkety: Int

  """Checks for equality with the object’s `peDescription` field."""
  peDescription: String

  """Checks for equality with the object’s `peDokumenty` field."""
  peDokumenty: Int

  """Checks for equality with the object’s `peGalerie` field."""
  peGalerie: Int

  """Checks for equality with the object’s `peId` field."""
  peId: BigInt

  """Checks for equality with the object’s `peInzerce` field."""
  peInzerce: Int

  """Checks for equality with the object’s `peKonzole` field."""
  peKonzole: Int

  """Checks for equality with the object’s `peMain` field."""
  peMain: Int

  """Checks for equality with the object’s `peNabidka` field."""
  peNabidka: Int

  """Checks for equality with the object’s `peName` field."""
  peName: String

  """Checks for equality with the object’s `peNastenka` field."""
  peNastenka: Int

  """Checks for equality with the object’s `peNovinky` field."""
  peNovinky: Int

  """Checks for equality with the object’s `pePary` field."""
  pePary: Int

  """Checks for equality with the object’s `pePermissions` field."""
  pePermissions: Int

  """Checks for equality with the object’s `pePlatby` field."""
  pePlatby: Int

  """Checks for equality with the object’s `peRozpis` field."""
  peRozpis: Int

  """Checks for equality with the object’s `peSkupiny` field."""
  peSkupiny: Int

  """Checks for equality with the object’s `peUsers` field."""
  peUsers: Int
}

"""An input for mutations affecting `Permission`"""
input PermissionInput {
  peAkce: Int!
  peAktuality: Int!
  peAnkety: Int!
  peDescription: String!
  peDokumenty: Int!
  peGalerie: Int!
  peId: BigInt
  peInzerce: Int!
  peKonzole: Int!
  peMain: Int!
  peNabidka: Int!
  peName: String!
  peNastenka: Int!
  peNovinky: Int!
  pePary: Int!
  pePermissions: Int!
  pePlatby: Int!
  peRozpis: Int!
  peSkupiny: Int!
  peUsers: Int!
}

"""
Represents an update to a `Permission`. Fields that are set will be updated.
"""
input PermissionPatch {
  peAkce: Int
  peAktuality: Int
  peAnkety: Int
  peDescription: String
  peDokumenty: Int
  peGalerie: Int
  peId: BigInt
  peInzerce: Int
  peKonzole: Int
  peMain: Int
  peNabidka: Int
  peName: String
  peNastenka: Int
  peNovinky: Int
  pePary: Int
  pePermissions: Int
  pePlatby: Int
  peRozpis: Int
  peSkupiny: Int
  peUsers: Int
}

"""A connection to a list of `Permission` values."""
type PermissionsConnection {
  """
  A list of edges which contains the `Permission` and cursor to aid in pagination.
  """
  edges: [PermissionsEdge!]!

  """A list of `Permission` objects."""
  nodes: [Permission!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Permission` you could get from the connection."""
  totalCount: Int!
}

"""A `Permission` edge in the connection."""
type PermissionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Permission` at the end of the edge."""
  node: Permission!
}

"""Methods to use when ordering `Permission`."""
enum PermissionsOrderBy {
  NATURAL
  PE_AKCE_ASC
  PE_AKCE_DESC
  PE_AKTUALITY_ASC
  PE_AKTUALITY_DESC
  PE_ANKETY_ASC
  PE_ANKETY_DESC
  PE_DESCRIPTION_ASC
  PE_DESCRIPTION_DESC
  PE_DOKUMENTY_ASC
  PE_DOKUMENTY_DESC
  PE_GALERIE_ASC
  PE_GALERIE_DESC
  PE_ID_ASC
  PE_ID_DESC
  PE_INZERCE_ASC
  PE_INZERCE_DESC
  PE_KONZOLE_ASC
  PE_KONZOLE_DESC
  PE_MAIN_ASC
  PE_MAIN_DESC
  PE_NABIDKA_ASC
  PE_NABIDKA_DESC
  PE_NAME_ASC
  PE_NAME_DESC
  PE_NASTENKA_ASC
  PE_NASTENKA_DESC
  PE_NOVINKY_ASC
  PE_NOVINKY_DESC
  PE_PARY_ASC
  PE_PARY_DESC
  PE_PERMISSIONS_ASC
  PE_PERMISSIONS_DESC
  PE_PLATBY_ASC
  PE_PLATBY_DESC
  PE_ROZPIS_ASC
  PE_ROZPIS_DESC
  PE_SKUPINY_ASC
  PE_SKUPINY_DESC
  PE_USERS_ASC
  PE_USERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `PlatbyCategory` values."""
type PlatbyCategoriesConnection {
  """
  A list of edges which contains the `PlatbyCategory` and cursor to aid in pagination.
  """
  edges: [PlatbyCategoriesEdge!]!

  """A list of `PlatbyCategory` objects."""
  nodes: [PlatbyCategory!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PlatbyCategory` you could get from the connection."""
  totalCount: Int!
}

"""A `PlatbyCategory` edge in the connection."""
type PlatbyCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlatbyCategory` at the end of the edge."""
  node: PlatbyCategory!
}

"""Methods to use when ordering `PlatbyCategory`."""
enum PlatbyCategoriesOrderBy {
  NATURAL
  PC_AMOUNT_ASC
  PC_AMOUNT_DESC
  PC_ARCHIVE_ASC
  PC_ARCHIVE_DESC
  PC_DATE_DUE_ASC
  PC_DATE_DUE_DESC
  PC_ID_ASC
  PC_ID_DESC
  PC_NAME_ASC
  PC_NAME_DESC
  PC_SYMBOL_ASC
  PC_SYMBOL_DESC
  PC_USE_BASE_ASC
  PC_USE_BASE_DESC
  PC_USE_PREFIX_ASC
  PC_USE_PREFIX_DESC
  PC_VALID_FROM_ASC
  PC_VALID_FROM_DESC
  PC_VALID_TO_ASC
  PC_VALID_TO_DESC
  PC_VISIBLE_ASC
  PC_VISIBLE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type PlatbyCategory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pcAmount: BigFloat!
  pcArchive: Boolean!
  pcDateDue: Date!
  pcId: BigInt!
  pcName: String!
  pcSymbol: BigInt!
  pcUseBase: Boolean!
  pcUsePrefix: Boolean!
  pcValidFrom: Date!
  pcValidTo: Date!
  pcVisible: Boolean!

  """Reads and enables pagination through a set of `PlatbyCategoryGroup`."""
  platbyCategoryGroupsByPcgIdCategory(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyCategoryGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyCategoryGroup`."""
    orderBy: [PlatbyCategoryGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoryGroupsConnection!

  """Reads and enables pagination through a set of `PlatbyItem`."""
  platbyItemsByPiIdCategory(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsConnection!
}

"""
A condition to be used against `PlatbyCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PlatbyCategoryCondition {
  """Checks for equality with the object’s `pcAmount` field."""
  pcAmount: BigFloat

  """Checks for equality with the object’s `pcArchive` field."""
  pcArchive: Boolean

  """Checks for equality with the object’s `pcDateDue` field."""
  pcDateDue: Date

  """Checks for equality with the object’s `pcId` field."""
  pcId: BigInt

  """Checks for equality with the object’s `pcName` field."""
  pcName: String

  """Checks for equality with the object’s `pcSymbol` field."""
  pcSymbol: BigInt

  """Checks for equality with the object’s `pcUseBase` field."""
  pcUseBase: Boolean

  """Checks for equality with the object’s `pcUsePrefix` field."""
  pcUsePrefix: Boolean

  """Checks for equality with the object’s `pcValidFrom` field."""
  pcValidFrom: Date

  """Checks for equality with the object’s `pcValidTo` field."""
  pcValidTo: Date

  """Checks for equality with the object’s `pcVisible` field."""
  pcVisible: Boolean
}

type PlatbyCategoryGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pcgId: BigInt!
  pcgIdCategory: BigInt!
  pcgIdGroup: BigInt!

  """
  Reads a single `PlatbyCategory` that is related to this `PlatbyCategoryGroup`.
  """
  platbyCategoryByPcgIdCategory: PlatbyCategory

  """
  Reads a single `PlatbyGroup` that is related to this `PlatbyCategoryGroup`.
  """
  platbyGroupByPcgIdGroup: PlatbyGroup
}

"""
A condition to be used against `PlatbyCategoryGroup` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input PlatbyCategoryGroupCondition {
  """Checks for equality with the object’s `pcgId` field."""
  pcgId: BigInt

  """Checks for equality with the object’s `pcgIdCategory` field."""
  pcgIdCategory: BigInt

  """Checks for equality with the object’s `pcgIdGroup` field."""
  pcgIdGroup: BigInt
}

"""An input for mutations affecting `PlatbyCategoryGroup`"""
input PlatbyCategoryGroupInput {
  pcgId: BigInt
  pcgIdCategory: BigInt!
  pcgIdGroup: BigInt!
}

"""
Represents an update to a `PlatbyCategoryGroup`. Fields that are set will be updated.
"""
input PlatbyCategoryGroupPatch {
  pcgId: BigInt
  pcgIdCategory: BigInt
  pcgIdGroup: BigInt
}

"""A connection to a list of `PlatbyCategoryGroup` values."""
type PlatbyCategoryGroupsConnection {
  """
  A list of edges which contains the `PlatbyCategoryGroup` and cursor to aid in pagination.
  """
  edges: [PlatbyCategoryGroupsEdge!]!

  """A list of `PlatbyCategoryGroup` objects."""
  nodes: [PlatbyCategoryGroup!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PlatbyCategoryGroup` you could get from the connection.
  """
  totalCount: Int!
}

"""A `PlatbyCategoryGroup` edge in the connection."""
type PlatbyCategoryGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlatbyCategoryGroup` at the end of the edge."""
  node: PlatbyCategoryGroup!
}

"""Methods to use when ordering `PlatbyCategoryGroup`."""
enum PlatbyCategoryGroupsOrderBy {
  NATURAL
  PCG_ID_ASC
  PCG_ID_CATEGORY_ASC
  PCG_ID_CATEGORY_DESC
  PCG_ID_DESC
  PCG_ID_GROUP_ASC
  PCG_ID_GROUP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `PlatbyCategory`"""
input PlatbyCategoryInput {
  pcAmount: BigFloat!
  pcArchive: Boolean
  pcDateDue: Date!
  pcId: BigInt
  pcName: String!
  pcSymbol: BigInt!
  pcUseBase: Boolean
  pcUsePrefix: Boolean
  pcValidFrom: Date!
  pcValidTo: Date!
  pcVisible: Boolean
}

"""
Represents an update to a `PlatbyCategory`. Fields that are set will be updated.
"""
input PlatbyCategoryPatch {
  pcAmount: BigFloat
  pcArchive: Boolean
  pcDateDue: Date
  pcId: BigInt
  pcName: String
  pcSymbol: BigInt
  pcUseBase: Boolean
  pcUsePrefix: Boolean
  pcValidFrom: Date
  pcValidTo: Date
  pcVisible: Boolean
}

type PlatbyGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pgBase: BigInt!
  pgDescription: String!
  pgId: BigInt!
  pgName: String!
  pgType: BigFloat!

  """Reads and enables pagination through a set of `PlatbyCategoryGroup`."""
  platbyCategoryGroupsByPcgIdGroup(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyCategoryGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyCategoryGroup`."""
    orderBy: [PlatbyCategoryGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoryGroupsConnection!

  """Reads and enables pagination through a set of `PlatbyGroupSkupina`."""
  platbyGroupSkupinasByPgsIdGroup(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyGroupSkupinaCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyGroupSkupina`."""
    orderBy: [PlatbyGroupSkupinasOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyGroupSkupinasConnection!
}

"""
A condition to be used against `PlatbyGroup` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PlatbyGroupCondition {
  """Checks for equality with the object’s `pgBase` field."""
  pgBase: BigInt

  """Checks for equality with the object’s `pgDescription` field."""
  pgDescription: String

  """Checks for equality with the object’s `pgId` field."""
  pgId: BigInt

  """Checks for equality with the object’s `pgName` field."""
  pgName: String

  """Checks for equality with the object’s `pgType` field."""
  pgType: BigFloat
}

"""An input for mutations affecting `PlatbyGroup`"""
input PlatbyGroupInput {
  pgBase: BigInt
  pgDescription: String!
  pgId: BigInt
  pgName: String!
  pgType: BigFloat
}

"""
Represents an update to a `PlatbyGroup`. Fields that are set will be updated.
"""
input PlatbyGroupPatch {
  pgBase: BigInt
  pgDescription: String
  pgId: BigInt
  pgName: String
  pgType: BigFloat
}

"""A connection to a list of `PlatbyGroup` values."""
type PlatbyGroupsConnection {
  """
  A list of edges which contains the `PlatbyGroup` and cursor to aid in pagination.
  """
  edges: [PlatbyGroupsEdge!]!

  """A list of `PlatbyGroup` objects."""
  nodes: [PlatbyGroup!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PlatbyGroup` you could get from the connection."""
  totalCount: Int!
}

"""A `PlatbyGroup` edge in the connection."""
type PlatbyGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlatbyGroup` at the end of the edge."""
  node: PlatbyGroup!
}

type PlatbyGroupSkupina implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pgsId: BigInt!
  pgsIdGroup: BigInt!
  pgsIdSkupina: BigInt!

  """
  Reads a single `PlatbyGroup` that is related to this `PlatbyGroupSkupina`.
  """
  platbyGroupByPgsIdGroup: PlatbyGroup

  """Reads a single `Skupiny` that is related to this `PlatbyGroupSkupina`."""
  skupinyByPgsIdSkupina: Skupiny
}

"""
A condition to be used against `PlatbyGroupSkupina` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PlatbyGroupSkupinaCondition {
  """Checks for equality with the object’s `pgsId` field."""
  pgsId: BigInt

  """Checks for equality with the object’s `pgsIdGroup` field."""
  pgsIdGroup: BigInt

  """Checks for equality with the object’s `pgsIdSkupina` field."""
  pgsIdSkupina: BigInt
}

"""An input for mutations affecting `PlatbyGroupSkupina`"""
input PlatbyGroupSkupinaInput {
  pgsId: BigInt
  pgsIdGroup: BigInt!
  pgsIdSkupina: BigInt!
}

"""
Represents an update to a `PlatbyGroupSkupina`. Fields that are set will be updated.
"""
input PlatbyGroupSkupinaPatch {
  pgsId: BigInt
  pgsIdGroup: BigInt
  pgsIdSkupina: BigInt
}

"""A connection to a list of `PlatbyGroupSkupina` values."""
type PlatbyGroupSkupinasConnection {
  """
  A list of edges which contains the `PlatbyGroupSkupina` and cursor to aid in pagination.
  """
  edges: [PlatbyGroupSkupinasEdge!]!

  """A list of `PlatbyGroupSkupina` objects."""
  nodes: [PlatbyGroupSkupina!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PlatbyGroupSkupina` you could get from the connection.
  """
  totalCount: Int!
}

"""A `PlatbyGroupSkupina` edge in the connection."""
type PlatbyGroupSkupinasEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlatbyGroupSkupina` at the end of the edge."""
  node: PlatbyGroupSkupina!
}

"""Methods to use when ordering `PlatbyGroupSkupina`."""
enum PlatbyGroupSkupinasOrderBy {
  NATURAL
  PGS_ID_ASC
  PGS_ID_DESC
  PGS_ID_GROUP_ASC
  PGS_ID_GROUP_DESC
  PGS_ID_SKUPINA_ASC
  PGS_ID_SKUPINA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `PlatbyGroup`."""
enum PlatbyGroupsOrderBy {
  NATURAL
  PG_BASE_ASC
  PG_BASE_DESC
  PG_DESCRIPTION_ASC
  PG_DESCRIPTION_DESC
  PG_ID_ASC
  PG_ID_DESC
  PG_NAME_ASC
  PG_NAME_DESC
  PG_TYPE_ASC
  PG_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type PlatbyItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  piAmount: BigFloat!
  piDate: Date!
  piId: BigInt!
  piIdCategory: BigInt!
  piIdRaw: BigInt
  piIdUser: BigInt
  piPrefix: Int!

  """Reads a single `PlatbyCategory` that is related to this `PlatbyItem`."""
  platbyCategoryByPiIdCategory: PlatbyCategory

  """Reads a single `PlatbyRaw` that is related to this `PlatbyItem`."""
  platbyRawByPiIdRaw: PlatbyRaw

  """Reads a single `User` that is related to this `PlatbyItem`."""
  userByPiIdUser: User
}

"""
A condition to be used against `PlatbyItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PlatbyItemCondition {
  """Checks for equality with the object’s `piAmount` field."""
  piAmount: BigFloat

  """Checks for equality with the object’s `piDate` field."""
  piDate: Date

  """Checks for equality with the object’s `piId` field."""
  piId: BigInt

  """Checks for equality with the object’s `piIdCategory` field."""
  piIdCategory: BigInt

  """Checks for equality with the object’s `piIdRaw` field."""
  piIdRaw: BigInt

  """Checks for equality with the object’s `piIdUser` field."""
  piIdUser: BigInt

  """Checks for equality with the object’s `piPrefix` field."""
  piPrefix: Int
}

"""An input for mutations affecting `PlatbyItem`"""
input PlatbyItemInput {
  piAmount: BigFloat!
  piDate: Date!
  piId: BigInt
  piIdCategory: BigInt!
  piIdRaw: BigInt
  piIdUser: BigInt
  piPrefix: Int
}

"""
Represents an update to a `PlatbyItem`. Fields that are set will be updated.
"""
input PlatbyItemPatch {
  piAmount: BigFloat
  piDate: Date
  piId: BigInt
  piIdCategory: BigInt
  piIdRaw: BigInt
  piIdUser: BigInt
  piPrefix: Int
}

"""A connection to a list of `PlatbyItem` values."""
type PlatbyItemsConnection {
  """
  A list of edges which contains the `PlatbyItem` and cursor to aid in pagination.
  """
  edges: [PlatbyItemsEdge!]!

  """A list of `PlatbyItem` objects."""
  nodes: [PlatbyItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PlatbyItem` you could get from the connection."""
  totalCount: Int!
}

"""A `PlatbyItem` edge in the connection."""
type PlatbyItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlatbyItem` at the end of the edge."""
  node: PlatbyItem!
}

"""Methods to use when ordering `PlatbyItem`."""
enum PlatbyItemsOrderBy {
  NATURAL
  PI_AMOUNT_ASC
  PI_AMOUNT_DESC
  PI_DATE_ASC
  PI_DATE_DESC
  PI_ID_ASC
  PI_ID_CATEGORY_ASC
  PI_ID_CATEGORY_DESC
  PI_ID_DESC
  PI_ID_RAW_ASC
  PI_ID_RAW_DESC
  PI_ID_USER_ASC
  PI_ID_USER_DESC
  PI_PREFIX_ASC
  PI_PREFIX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type PlatbyRaw implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `PlatbyItem`."""
  platbyItemsByPiIdRaw(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsConnection!
  prDiscarded: Boolean!
  prHash: String!
  prId: BigInt!
  prRaw: String!
  prSorted: Boolean!
}

"""
A condition to be used against `PlatbyRaw` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PlatbyRawCondition {
  """Checks for equality with the object’s `prDiscarded` field."""
  prDiscarded: Boolean

  """Checks for equality with the object’s `prHash` field."""
  prHash: String

  """Checks for equality with the object’s `prId` field."""
  prId: BigInt

  """Checks for equality with the object’s `prRaw` field."""
  prRaw: String

  """Checks for equality with the object’s `prSorted` field."""
  prSorted: Boolean
}

"""An input for mutations affecting `PlatbyRaw`"""
input PlatbyRawInput {
  prDiscarded: Boolean
  prHash: String!
  prId: BigInt
  prRaw: String!
  prSorted: Boolean
}

"""
Represents an update to a `PlatbyRaw`. Fields that are set will be updated.
"""
input PlatbyRawPatch {
  prDiscarded: Boolean
  prHash: String
  prId: BigInt
  prRaw: String
  prSorted: Boolean
}

"""A connection to a list of `PlatbyRaw` values."""
type PlatbyRawsConnection {
  """
  A list of edges which contains the `PlatbyRaw` and cursor to aid in pagination.
  """
  edges: [PlatbyRawsEdge!]!

  """A list of `PlatbyRaw` objects."""
  nodes: [PlatbyRaw!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PlatbyRaw` you could get from the connection."""
  totalCount: Int!
}

"""A `PlatbyRaw` edge in the connection."""
type PlatbyRawsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlatbyRaw` at the end of the edge."""
  node: PlatbyRaw!
}

"""Methods to use when ordering `PlatbyRaw`."""
enum PlatbyRawsOrderBy {
  NATURAL
  PR_DISCARDED_ASC
  PR_DISCARDED_DESC
  PR_HASH_ASC
  PR_HASH_DESC
  PR_ID_ASC
  PR_ID_DESC
  PR_RAW_ASC
  PR_RAW_DESC
  PR_SORTED_ASC
  PR_SORTED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProspectDatum {
  email: String
  name: String
  phone: String
  surname: String
  yearofbirth: String
}

"""An input for mutations affecting `ProspectDatum`"""
input ProspectDatumInput {
  email: String
  name: String
  phone: String
  surname: String
  yearofbirth: String
}

"""All input for the `prospectFormDancer` mutation."""
input ProspectFormDancerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cohort: CrmCohort!
  note: String!
  origin: String!
  prospectData: ProspectDatumInput!
}

"""The output of our `prospectFormDancer` mutation."""
type ProspectFormDancerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `Pary`."""
  activeCouples(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): PariesConnection
  activeProspects(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): ActiveProspectsConnection
  akce(aId: BigInt!): Akce

  """Reads a single `Akce` using its globally unique `ID`."""
  akceByNodeId(
    """The globally unique `ID` to be used in selecting a single `Akce`."""
    nodeId: ID!
  ): Akce
  akceItem(aiId: BigInt!): AkceItem

  """Reads a single `AkceItem` using its globally unique `ID`."""
  akceItemByNodeId(
    """The globally unique `ID` to be used in selecting a single `AkceItem`."""
    nodeId: ID!
  ): AkceItem

  """Reads and enables pagination through a set of `AkceItem`."""
  akceItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AkceItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AkceItem`."""
    orderBy: [AkceItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AkceItemsConnection

  """Reads and enables pagination through a set of `Akce`."""
  akces(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AkceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Akce`."""
    orderBy: [AkcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AkcesConnection

  """Reads and enables pagination through a set of `Aktuality`."""
  aktualities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AktualityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesConnection
  aktuality(atId: BigInt!): Aktuality

  """Reads a single `Aktuality` using its globally unique `ID`."""
  aktualityByNodeId(
    """The globally unique `ID` to be used in selecting a single `Aktuality`."""
    nodeId: ID!
  ): Aktuality
  currentCoupleIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentCoupleIdsConnection

  """Reads and enables pagination through a set of `Permission`."""
  currentPermissions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): PermissionsConnection
  currentSessionId: String
  currentUserId: BigInt

  """Reads and enables pagination through a set of `Dokumenty`."""
  dokumenties(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DokumentyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Dokumenty`."""
    orderBy: [DokumentiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DokumentiesConnection
  dokumenty(dId: BigInt!): Dokumenty

  """Reads a single `Dokumenty` using its globally unique `ID`."""
  dokumentyByNodeId(
    """The globally unique `ID` to be used in selecting a single `Dokumenty`."""
    nodeId: ID!
  ): Dokumenty
  galerieDir(gdId: BigInt!): GalerieDir

  """Reads a single `GalerieDir` using its globally unique `ID`."""
  galerieDirByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GalerieDir`.
    """
    nodeId: ID!
  ): GalerieDir

  """Reads and enables pagination through a set of `GalerieDir`."""
  galerieDirs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieDirCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieDir`."""
    orderBy: [GalerieDirsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieDirsConnection
  galerieFoto(gfId: BigInt!): GalerieFoto

  """Reads a single `GalerieFoto` using its globally unique `ID`."""
  galerieFotoByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GalerieFoto`.
    """
    nodeId: ID!
  ): GalerieFoto

  """Reads and enables pagination through a set of `GalerieFoto`."""
  galerieFotos(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieFotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosConnection
  getCurrentCouple: Pary
  getCurrentUser: User

  """Reads and enables pagination through a set of `Member`."""
  members(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MemberCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [NATURAL]
  ): MembersConnection

  """Reads and enables pagination through a set of `RozpisItem`."""
  myLessons(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    endDate: Date

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    startDate: Date
  ): RozpisItemsConnection
  nabidka(nId: BigInt!): Nabidka

  """Reads a single `Nabidka` using its globally unique `ID`."""
  nabidkaByNodeId(
    """The globally unique `ID` to be used in selecting a single `Nabidka`."""
    nodeId: ID!
  ): Nabidka
  nabidkaItem(niId: BigInt!): NabidkaItem

  """Reads a single `NabidkaItem` using its globally unique `ID`."""
  nabidkaItemByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `NabidkaItem`.
    """
    nodeId: ID!
  ): NabidkaItem

  """Reads and enables pagination through a set of `NabidkaItem`."""
  nabidkaItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NabidkaItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NabidkaItem`."""
    orderBy: [NabidkaItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NabidkaItemsConnection

  """Reads and enables pagination through a set of `Nabidka`."""
  nabidkas(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NabidkaCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Nabidka`."""
    orderBy: [NabidkasOrderBy!] = [PRIMARY_KEY_ASC]
  ): NabidkasConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  page(id: Int!): Page

  """Reads a single `Page` using its globally unique `ID`."""
  pageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Page`."""
    nodeId: ID!
  ): Page
  pageByUrl(url: String!): Page
  pageRevision(id: Int!, revNumber: Int!): PageRevision

  """Reads a single `PageRevision` using its globally unique `ID`."""
  pageRevisionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PageRevision`.
    """
    nodeId: ID!
  ): PageRevision

  """Reads and enables pagination through a set of `PageRevision`."""
  pageRevisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageRevisionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PageRevision`."""
    orderBy: [PageRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageRevisionsConnection

  """Reads and enables pagination through a set of `Page`."""
  pages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PagesConnection
  parameter(paName: String!): Parameter

  """Reads a single `Parameter` using its globally unique `ID`."""
  parameterByNodeId(
    """The globally unique `ID` to be used in selecting a single `Parameter`."""
    nodeId: ID!
  ): Parameter

  """Reads and enables pagination through a set of `Parameter`."""
  parameters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParameterCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Parameter`."""
    orderBy: [ParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParametersConnection

  """Reads and enables pagination through a set of `Pary`."""
  paries(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Pary`."""
    orderBy: [PariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PariesConnection
  pary(pId: BigInt!): Pary

  """Reads a single `Pary` using its globally unique `ID`."""
  paryByNodeId(
    """The globally unique `ID` to be used in selecting a single `Pary`."""
    nodeId: ID!
  ): Pary
  paryNavrh(pnId: BigInt!): ParyNavrh

  """Reads a single `ParyNavrh` using its globally unique `ID`."""
  paryNavrhByNodeId(
    """The globally unique `ID` to be used in selecting a single `ParyNavrh`."""
    nodeId: ID!
  ): ParyNavrh

  """Reads and enables pagination through a set of `ParyNavrh`."""
  paryNavrhs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParyNavrhCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ParyNavrh`."""
    orderBy: [ParyNavrhsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParyNavrhsConnection
  permission(peId: BigInt!): Permission

  """Reads a single `Permission` using its globally unique `ID`."""
  permissionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Permission`.
    """
    nodeId: ID!
  ): Permission

  """Reads and enables pagination through a set of `Permission`."""
  permissions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionsConnection

  """Reads and enables pagination through a set of `PlatbyCategory`."""
  platbyCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyCategoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyCategory`."""
    orderBy: [PlatbyCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoriesConnection
  platbyCategory(pcId: BigInt!): PlatbyCategory

  """Reads a single `PlatbyCategory` using its globally unique `ID`."""
  platbyCategoryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PlatbyCategory`.
    """
    nodeId: ID!
  ): PlatbyCategory
  platbyCategoryGroup(pcgId: BigInt!): PlatbyCategoryGroup

  """Reads a single `PlatbyCategoryGroup` using its globally unique `ID`."""
  platbyCategoryGroupByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PlatbyCategoryGroup`.
    """
    nodeId: ID!
  ): PlatbyCategoryGroup

  """Reads and enables pagination through a set of `PlatbyCategoryGroup`."""
  platbyCategoryGroups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyCategoryGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyCategoryGroup`."""
    orderBy: [PlatbyCategoryGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoryGroupsConnection
  platbyGroup(pgId: BigInt!): PlatbyGroup

  """Reads a single `PlatbyGroup` using its globally unique `ID`."""
  platbyGroupByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PlatbyGroup`.
    """
    nodeId: ID!
  ): PlatbyGroup

  """Reads and enables pagination through a set of `PlatbyGroup`."""
  platbyGroups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyGroup`."""
    orderBy: [PlatbyGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyGroupsConnection
  platbyGroupSkupina(pgsId: BigInt!): PlatbyGroupSkupina

  """Reads a single `PlatbyGroupSkupina` using its globally unique `ID`."""
  platbyGroupSkupinaByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PlatbyGroupSkupina`.
    """
    nodeId: ID!
  ): PlatbyGroupSkupina

  """Reads and enables pagination through a set of `PlatbyGroupSkupina`."""
  platbyGroupSkupinas(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyGroupSkupinaCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyGroupSkupina`."""
    orderBy: [PlatbyGroupSkupinasOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyGroupSkupinasConnection
  platbyItem(piId: BigInt!): PlatbyItem

  """Reads a single `PlatbyItem` using its globally unique `ID`."""
  platbyItemByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PlatbyItem`.
    """
    nodeId: ID!
  ): PlatbyItem

  """Reads and enables pagination through a set of `PlatbyItem`."""
  platbyItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsConnection
  platbyRaw(prId: BigInt!): PlatbyRaw

  """Reads a single `PlatbyRaw` using its globally unique `ID`."""
  platbyRawByNodeId(
    """The globally unique `ID` to be used in selecting a single `PlatbyRaw`."""
    nodeId: ID!
  ): PlatbyRaw

  """Reads and enables pagination through a set of `PlatbyRaw`."""
  platbyRaws(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyRawCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyRaw`."""
    orderBy: [PlatbyRawsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyRawsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads and enables pagination through a set of `Nabidka`."""
  reservationsForRange(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    endDate: Date

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    startDate: Date
  ): NabidkasConnection
  rozpi(rId: BigInt!): Rozpi

  """Reads a single `Rozpi` using its globally unique `ID`."""
  rozpiByNodeId(
    """The globally unique `ID` to be used in selecting a single `Rozpi`."""
    nodeId: ID!
  ): Rozpi

  """Reads and enables pagination through a set of `Rozpi`."""
  rozpis(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RozpiCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Rozpi`."""
    orderBy: [RozpisOrderBy!] = [PRIMARY_KEY_ASC]
  ): RozpisConnection
  rozpisItem(riId: BigInt!): RozpisItem

  """Reads a single `RozpisItem` using its globally unique `ID`."""
  rozpisItemByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RozpisItem`.
    """
    nodeId: ID!
  ): RozpisItem

  """Reads and enables pagination through a set of `RozpisItem`."""
  rozpisItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RozpisItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RozpisItem`."""
    orderBy: [RozpisItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RozpisItemsConnection

  """Reads and enables pagination through a set of `Rozpi`."""
  schedulesForRange(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    endDate: Date

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    startDate: Date
  ): RozpisConnection
  session(ssId: String!): Session

  """Reads a single `Session` using its globally unique `ID`."""
  sessionByNodeId(
    """The globally unique `ID` to be used in selecting a single `Session`."""
    nodeId: ID!
  ): Session

  """Reads and enables pagination through a set of `Session`."""
  sessions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SessionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SessionsConnection

  """Reads and enables pagination through a set of `Skupiny`."""
  skupinies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Skupiny`."""
    orderBy: [SkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SkupiniesConnection
  skupiny(sId: BigInt!): Skupiny

  """Reads a single `Skupiny` using its globally unique `ID`."""
  skupinyByNodeId(
    """The globally unique `ID` to be used in selecting a single `Skupiny`."""
    nodeId: ID!
  ): Skupiny

  """Reads and enables pagination through a set of `Video`."""
  titleVideos(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): VideosConnection

  """Reads and enables pagination through a set of `User`."""
  trainers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UsersConnection
  upozorneni(upId: BigInt!): Upozorneni

  """Reads a single `Upozorneni` using its globally unique `ID`."""
  upozorneniByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Upozorneni`.
    """
    nodeId: ID!
  ): Upozorneni

  """Reads and enables pagination through a set of `Upozorneni`."""
  upozornenis(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisConnection

  """Reads and enables pagination through a set of `UpozorneniSkupiny`."""
  upozorneniSkupinies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniSkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesConnection
  upozorneniSkupiny(upsId: BigInt!): UpozorneniSkupiny

  """Reads a single `UpozorneniSkupiny` using its globally unique `ID`."""
  upozorneniSkupinyByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UpozorneniSkupiny`.
    """
    nodeId: ID!
  ): UpozorneniSkupiny
  user(uId: BigInt!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
  video(vId: BigInt!): Video

  """Reads a single `Video` using its globally unique `ID`."""
  videoByNodeId(
    """The globally unique `ID` to be used in selecting a single `Video`."""
    nodeId: ID!
  ): Video
  videoList(vlId: BigInt!): VideoList

  """Reads a single `VideoList` using its globally unique `ID`."""
  videoListByNodeId(
    """The globally unique `ID` to be used in selecting a single `VideoList`."""
    nodeId: ID!
  ): VideoList

  """Reads and enables pagination through a set of `VideoList`."""
  videoLists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VideoListCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `VideoList`."""
    orderBy: [VideoListsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VideoListsConnection

  """Reads and enables pagination through a set of `Video`."""
  videos(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VideoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Video`."""
    orderBy: [VideosOrderBy!] = [PRIMARY_KEY_ASC]
  ): VideosConnection
  videoSource(vsId: BigInt!): VideoSource

  """Reads a single `VideoSource` using its globally unique `ID`."""
  videoSourceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `VideoSource`.
    """
    nodeId: ID!
  ): VideoSource

  """Reads and enables pagination through a set of `VideoSource`."""
  videoSources(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VideoSourceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `VideoSource`."""
    orderBy: [VideoSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): VideoSourcesConnection
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  login: String!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Rozpi implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rDatum: Date!
  rId: BigInt!
  rKde: String!
  rLock: Boolean!

  """Reads and enables pagination through a set of `RozpisItem`."""
  rozpisItemsByRiIdRodic(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RozpisItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RozpisItem`."""
    orderBy: [RozpisItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RozpisItemsConnection!
  rTimestamp: Datetime
  rTrener: BigInt!
  rVisible: Boolean!

  """Reads a single `User` that is related to this `Rozpi`."""
  userByRTrener: User
}

"""
A condition to be used against `Rozpi` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RozpiCondition {
  """Checks for equality with the object’s `rDatum` field."""
  rDatum: Date

  """Checks for equality with the object’s `rId` field."""
  rId: BigInt

  """Checks for equality with the object’s `rKde` field."""
  rKde: String

  """Checks for equality with the object’s `rLock` field."""
  rLock: Boolean

  """Checks for equality with the object’s `rTimestamp` field."""
  rTimestamp: Datetime

  """Checks for equality with the object’s `rTrener` field."""
  rTrener: BigInt

  """Checks for equality with the object’s `rVisible` field."""
  rVisible: Boolean
}

"""An input for mutations affecting `Rozpi`"""
input RozpiInput {
  rDatum: Date!
  rId: BigInt
  rKde: String!
  rLock: Boolean
  rTimestamp: Datetime
  rTrener: BigInt!
  rVisible: Boolean
}

"""
Represents an update to a `Rozpi`. Fields that are set will be updated.
"""
input RozpiPatch {
  rDatum: Date
  rId: BigInt
  rKde: String
  rLock: Boolean
  rTimestamp: Datetime
  rTrener: BigInt
  rVisible: Boolean
}

"""A connection to a list of `Rozpi` values."""
type RozpisConnection {
  """
  A list of edges which contains the `Rozpi` and cursor to aid in pagination.
  """
  edges: [RozpisEdge!]!

  """A list of `Rozpi` objects."""
  nodes: [Rozpi!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Rozpi` you could get from the connection."""
  totalCount: Int!
}

"""A `Rozpi` edge in the connection."""
type RozpisEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Rozpi` at the end of the edge."""
  node: Rozpi!
}

type RozpisItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Pary` that is related to this `RozpisItem`."""
  paryByRiPartner: Pary
  riDo: Time!
  riId: BigInt!
  riIdRodic: BigInt!
  riLock: Boolean!
  riOd: Time!
  riPartner: BigInt

  """Reads a single `Rozpi` that is related to this `RozpisItem`."""
  rozpiByRiIdRodic: Rozpi
}

"""
A condition to be used against `RozpisItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RozpisItemCondition {
  """Checks for equality with the object’s `riDo` field."""
  riDo: Time

  """Checks for equality with the object’s `riId` field."""
  riId: BigInt

  """Checks for equality with the object’s `riIdRodic` field."""
  riIdRodic: BigInt

  """Checks for equality with the object’s `riLock` field."""
  riLock: Boolean

  """Checks for equality with the object’s `riOd` field."""
  riOd: Time

  """Checks for equality with the object’s `riPartner` field."""
  riPartner: BigInt
}

"""An input for mutations affecting `RozpisItem`"""
input RozpisItemInput {
  riDo: Time!
  riId: BigInt
  riIdRodic: BigInt!
  riLock: Boolean
  riOd: Time!
  riPartner: BigInt
}

"""
Represents an update to a `RozpisItem`. Fields that are set will be updated.
"""
input RozpisItemPatch {
  riDo: Time
  riId: BigInt
  riIdRodic: BigInt
  riLock: Boolean
  riOd: Time
  riPartner: BigInt
}

"""A connection to a list of `RozpisItem` values."""
type RozpisItemsConnection {
  """
  A list of edges which contains the `RozpisItem` and cursor to aid in pagination.
  """
  edges: [RozpisItemsEdge!]!

  """A list of `RozpisItem` objects."""
  nodes: [RozpisItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RozpisItem` you could get from the connection."""
  totalCount: Int!
}

"""A `RozpisItem` edge in the connection."""
type RozpisItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RozpisItem` at the end of the edge."""
  node: RozpisItem!
}

"""Methods to use when ordering `RozpisItem`."""
enum RozpisItemsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RI_DO_ASC
  RI_DO_DESC
  RI_ID_ASC
  RI_ID_DESC
  RI_ID_RODIC_ASC
  RI_ID_RODIC_DESC
  RI_LOCK_ASC
  RI_LOCK_DESC
  RI_OD_ASC
  RI_OD_DESC
  RI_PARTNER_ASC
  RI_PARTNER_DESC
}

"""Methods to use when ordering `Rozpi`."""
enum RozpisOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  R_DATUM_ASC
  R_DATUM_DESC
  R_ID_ASC
  R_ID_DESC
  R_KDE_ASC
  R_KDE_DESC
  R_LOCK_ASC
  R_LOCK_DESC
  R_TIMESTAMP_ASC
  R_TIMESTAMP_DESC
  R_TRENER_ASC
  R_TRENER_DESC
  R_VISIBLE_ASC
  R_VISIBLE_DESC
}

type Session implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  ssId: String!
  ssLifetime: BigInt!
  ssUpdatedAt: Datetime!
  ssUser: BigInt

  """Reads a single `User` that is related to this `Session`."""
  userBySsUser: User
}

"""
A condition to be used against `Session` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SessionCondition {
  """Checks for equality with the object’s `ssId` field."""
  ssId: String

  """Checks for equality with the object’s `ssLifetime` field."""
  ssLifetime: BigInt

  """Checks for equality with the object’s `ssUpdatedAt` field."""
  ssUpdatedAt: Datetime

  """Checks for equality with the object’s `ssUser` field."""
  ssUser: BigInt
}

"""An input for mutations affecting `Session`"""
input SessionInput {
  ssId: String!
  ssLifetime: BigInt!
  ssUpdatedAt: Datetime
  ssUser: BigInt
}

"""
Represents an update to a `Session`. Fields that are set will be updated.
"""
input SessionPatch {
  ssId: String
  ssLifetime: BigInt
  ssUpdatedAt: Datetime
  ssUser: BigInt
}

"""A connection to a list of `Session` values."""
type SessionsConnection {
  """
  A list of edges which contains the `Session` and cursor to aid in pagination.
  """
  edges: [SessionsEdge!]!

  """A list of `Session` objects."""
  nodes: [Session!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Session` you could get from the connection."""
  totalCount: Int!
}

"""A `Session` edge in the connection."""
type SessionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Session` at the end of the edge."""
  node: Session!
}

"""Methods to use when ordering `Session`."""
enum SessionsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SS_ID_ASC
  SS_ID_DESC
  SS_LIFETIME_ASC
  SS_LIFETIME_DESC
  SS_UPDATED_AT_ASC
  SS_UPDATED_AT_DESC
  SS_USER_ASC
  SS_USER_DESC
}

"""A connection to a list of `Skupiny` values."""
type SkupiniesConnection {
  """
  A list of edges which contains the `Skupiny` and cursor to aid in pagination.
  """
  edges: [SkupiniesEdge!]!

  """A list of `Skupiny` objects."""
  nodes: [Skupiny!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Skupiny` you could get from the connection."""
  totalCount: Int!
}

"""A `Skupiny` edge in the connection."""
type SkupiniesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Skupiny` at the end of the edge."""
  node: Skupiny!
}

"""Methods to use when ordering `Skupiny`."""
enum SkupiniesOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  S_COLOR_RGB_ASC
  S_COLOR_RGB_DESC
  S_COLOR_TEXT_ASC
  S_COLOR_TEXT_DESC
  S_DESCRIPTION_ASC
  S_DESCRIPTION_DESC
  S_ID_ASC
  S_ID_DESC
  S_LOCATION_ASC
  S_LOCATION_DESC
  S_NAME_ASC
  S_NAME_DESC
  S_VISIBLE_ASC
  S_VISIBLE_DESC
}

type Skupiny implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `PlatbyGroupSkupina`."""
  platbyGroupSkupinasByPgsIdSkupina(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyGroupSkupinaCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyGroupSkupina`."""
    orderBy: [PlatbyGroupSkupinasOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyGroupSkupinasConnection!
  sColorRgb: String!
  sColorText: String!
  sDescription: String!
  sId: BigInt!
  sLocation: String!
  sName: String!
  sVisible: Boolean!

  """Reads and enables pagination through a set of `UpozorneniSkupiny`."""
  upozorneniSkupiniesByUpsIdSkupina(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniSkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByUSkupina(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection!
}

"""
A condition to be used against `Skupiny` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SkupinyCondition {
  """Checks for equality with the object’s `sColorRgb` field."""
  sColorRgb: String

  """Checks for equality with the object’s `sColorText` field."""
  sColorText: String

  """Checks for equality with the object’s `sDescription` field."""
  sDescription: String

  """Checks for equality with the object’s `sId` field."""
  sId: BigInt

  """Checks for equality with the object’s `sLocation` field."""
  sLocation: String

  """Checks for equality with the object’s `sName` field."""
  sName: String

  """Checks for equality with the object’s `sVisible` field."""
  sVisible: Boolean
}

"""An input for mutations affecting `Skupiny`"""
input SkupinyInput {
  sColorRgb: String!
  sColorText: String!
  sDescription: String!
  sId: BigInt
  sLocation: String
  sName: String!
  sVisible: Boolean
}

"""
Represents an update to a `Skupiny`. Fields that are set will be updated.
"""
input SkupinyPatch {
  sColorRgb: String
  sColorText: String
  sDescription: String
  sId: BigInt
  sLocation: String
  sName: String
  sVisible: Boolean
}

"""
The exact time of day, does not include the date. May or may not have a timezone offset.
"""
scalar Time

"""All input for the `updateAkceByNodeId` mutation."""
input UpdateAkceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Akce` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Akce` being updated.
  """
  patch: AkcePatch!
}

"""All input for the `updateAkce` mutation."""
input UpdateAkceInput {
  aId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Akce` being updated.
  """
  patch: AkcePatch!
}

"""All input for the `updateAkceItemByNodeId` mutation."""
input UpdateAkceItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AkceItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AkceItem` being updated.
  """
  patch: AkceItemPatch!
}

"""All input for the `updateAkceItem` mutation."""
input UpdateAkceItemInput {
  aiId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AkceItem` being updated.
  """
  patch: AkceItemPatch!
}

"""The output of our update `AkceItem` mutation."""
type UpdateAkceItemPayload {
  """Reads a single `Akce` that is related to this `AkceItem`."""
  akceByAiIdRodic: Akce

  """The `AkceItem` that was updated by this mutation."""
  akceItem: AkceItem

  """An edge for our `AkceItem`. May be used by Relay 1."""
  akceItemEdge(
    """The method to use when ordering `AkceItem`."""
    orderBy: [AkceItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AkceItemsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `AkceItem`."""
  userByAiUser: User
}

"""The output of our update `Akce` mutation."""
type UpdateAkcePayload {
  """The `Akce` that was updated by this mutation."""
  akce: Akce

  """An edge for our `Akce`. May be used by Relay 1."""
  akceEdge(
    """The method to use when ordering `Akce`."""
    orderBy: [AkcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AkcesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateAktualityByNodeId` mutation."""
input UpdateAktualityByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Aktuality` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Aktuality` being updated.
  """
  patch: AktualityPatch!
}

"""All input for the `updateAktuality` mutation."""
input UpdateAktualityInput {
  atId: BigInt!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Aktuality` being updated.
  """
  patch: AktualityPatch!
}

"""The output of our update `Aktuality` mutation."""
type UpdateAktualityPayload {
  """The `Aktuality` that was updated by this mutation."""
  aktuality: Aktuality

  """An edge for our `Aktuality`. May be used by Relay 1."""
  aktualityEdge(
    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `GalerieFoto` that is related to this `Aktuality`."""
  galerieFotoByAtFotoMain: GalerieFoto

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Aktuality`."""
  userByAtKdo: User
}

"""All input for the `updateDokumentyByNodeId` mutation."""
input UpdateDokumentyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Dokumenty` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Dokumenty` being updated.
  """
  patch: DokumentyPatch!
}

"""All input for the `updateDokumenty` mutation."""
input UpdateDokumentyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dId: BigInt!

  """
  An object where the defined keys will be set on the `Dokumenty` being updated.
  """
  patch: DokumentyPatch!
}

"""The output of our update `Dokumenty` mutation."""
type UpdateDokumentyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dokumenty` that was updated by this mutation."""
  dokumenty: Dokumenty

  """An edge for our `Dokumenty`. May be used by Relay 1."""
  dokumentyEdge(
    """The method to use when ordering `Dokumenty`."""
    orderBy: [DokumentiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DokumentiesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Dokumenty`."""
  userByDKdo: User
}

"""All input for the `updateGalerieDirByNodeId` mutation."""
input UpdateGalerieDirByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GalerieDir` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GalerieDir` being updated.
  """
  patch: GalerieDirPatch!
}

"""All input for the `updateGalerieDir` mutation."""
input UpdateGalerieDirInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gdId: BigInt!

  """
  An object where the defined keys will be set on the `GalerieDir` being updated.
  """
  patch: GalerieDirPatch!
}

"""The output of our update `GalerieDir` mutation."""
type UpdateGalerieDirPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GalerieDir` that was updated by this mutation."""
  galerieDir: GalerieDir

  """An edge for our `GalerieDir`. May be used by Relay 1."""
  galerieDirEdge(
    """The method to use when ordering `GalerieDir`."""
    orderBy: [GalerieDirsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieDirsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGalerieFotoByNodeId` mutation."""
input UpdateGalerieFotoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GalerieFoto` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GalerieFoto` being updated.
  """
  patch: GalerieFotoPatch!
}

"""All input for the `updateGalerieFoto` mutation."""
input UpdateGalerieFotoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gfId: BigInt!

  """
  An object where the defined keys will be set on the `GalerieFoto` being updated.
  """
  patch: GalerieFotoPatch!
}

"""The output of our update `GalerieFoto` mutation."""
type UpdateGalerieFotoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `GalerieDir` that is related to this `GalerieFoto`."""
  galerieDirByGfIdRodic: GalerieDir

  """The `GalerieFoto` that was updated by this mutation."""
  galerieFoto: GalerieFoto

  """An edge for our `GalerieFoto`. May be used by Relay 1."""
  galerieFotoEdge(
    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `GalerieFoto`."""
  userByGfKdo: User
}

"""All input for the `updateNabidkaByNodeId` mutation."""
input UpdateNabidkaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Nabidka` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Nabidka` being updated.
  """
  patch: NabidkaPatch!
}

"""All input for the `updateNabidka` mutation."""
input UpdateNabidkaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  nId: BigInt!

  """
  An object where the defined keys will be set on the `Nabidka` being updated.
  """
  patch: NabidkaPatch!
}

"""All input for the `updateNabidkaItemByNodeId` mutation."""
input UpdateNabidkaItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NabidkaItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NabidkaItem` being updated.
  """
  patch: NabidkaItemPatch!
}

"""All input for the `updateNabidkaItem` mutation."""
input UpdateNabidkaItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  niId: BigInt!

  """
  An object where the defined keys will be set on the `NabidkaItem` being updated.
  """
  patch: NabidkaItemPatch!
}

"""The output of our update `NabidkaItem` mutation."""
type UpdateNabidkaItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Nabidka` that is related to this `NabidkaItem`."""
  nabidkaByNiIdRodic: Nabidka

  """The `NabidkaItem` that was updated by this mutation."""
  nabidkaItem: NabidkaItem

  """An edge for our `NabidkaItem`. May be used by Relay 1."""
  nabidkaItemEdge(
    """The method to use when ordering `NabidkaItem`."""
    orderBy: [NabidkaItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NabidkaItemsEdge

  """Reads a single `Pary` that is related to this `NabidkaItem`."""
  paryByNiPartner: Pary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `Nabidka` mutation."""
type UpdateNabidkaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Nabidka` that was updated by this mutation."""
  nabidka: Nabidka

  """An edge for our `Nabidka`. May be used by Relay 1."""
  nabidkaEdge(
    """The method to use when ordering `Nabidka`."""
    orderBy: [NabidkasOrderBy!] = [PRIMARY_KEY_ASC]
  ): NabidkasEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Nabidka`."""
  userByNTrener: User
}

"""All input for the `updatePageByNodeId` mutation."""
input UpdatePageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Page` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Page` being updated.
  """
  patch: PagePatch!
}

"""All input for the `updatePageByUrl` mutation."""
input UpdatePageByUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Page` being updated.
  """
  patch: PagePatch!
  url: String!
}

"""All input for the `updatePage` mutation."""
input UpdatePageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Page` being updated.
  """
  patch: PagePatch!
}

"""The output of our update `Page` mutation."""
type UpdatePagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Page` that was updated by this mutation."""
  page: Page

  """An edge for our `Page`. May be used by Relay 1."""
  pageEdge(
    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateParameterByNodeId` mutation."""
input UpdateParameterByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Parameter` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Parameter` being updated.
  """
  patch: ParameterPatch!
}

"""All input for the `updateParameter` mutation."""
input UpdateParameterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  paName: String!

  """
  An object where the defined keys will be set on the `Parameter` being updated.
  """
  patch: ParameterPatch!
}

"""The output of our update `Parameter` mutation."""
type UpdateParameterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Parameter` that was updated by this mutation."""
  parameter: Parameter

  """An edge for our `Parameter`. May be used by Relay 1."""
  parameterEdge(
    """The method to use when ordering `Parameter`."""
    orderBy: [ParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParametersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateParyByNodeId` mutation."""
input UpdateParyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Pary` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Pary` being updated.
  """
  patch: ParyPatch!
}

"""All input for the `updatePary` mutation."""
input UpdateParyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Pary` being updated.
  """
  patch: ParyPatch!
  pId: BigInt!
}

"""All input for the `updateParyNavrhByNodeId` mutation."""
input UpdateParyNavrhByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ParyNavrh` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ParyNavrh` being updated.
  """
  patch: ParyNavrhPatch!
}

"""All input for the `updateParyNavrh` mutation."""
input UpdateParyNavrhInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ParyNavrh` being updated.
  """
  patch: ParyNavrhPatch!
  pnId: BigInt!
}

"""The output of our update `ParyNavrh` mutation."""
type UpdateParyNavrhPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ParyNavrh` that was updated by this mutation."""
  paryNavrh: ParyNavrh

  """An edge for our `ParyNavrh`. May be used by Relay 1."""
  paryNavrhEdge(
    """The method to use when ordering `ParyNavrh`."""
    orderBy: [ParyNavrhsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParyNavrhsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `ParyNavrh`."""
  userByPnNavrhl: User

  """Reads a single `User` that is related to this `ParyNavrh`."""
  userByPnPartner: User

  """Reads a single `User` that is related to this `ParyNavrh`."""
  userByPnPartnerka: User
}

"""The output of our update `Pary` mutation."""
type UpdateParyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pary` that was updated by this mutation."""
  pary: Pary

  """An edge for our `Pary`. May be used by Relay 1."""
  paryEdge(
    """The method to use when ordering `Pary`."""
    orderBy: [PariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PariesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Pary`."""
  userByPIdPartner: User

  """Reads a single `User` that is related to this `Pary`."""
  userByPIdPartnerka: User
}

"""All input for the `updatePermissionByNodeId` mutation."""
input UpdatePermissionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Permission` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Permission` being updated.
  """
  patch: PermissionPatch!
}

"""All input for the `updatePermission` mutation."""
input UpdatePermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Permission` being updated.
  """
  patch: PermissionPatch!
  peId: BigInt!
}

"""The output of our update `Permission` mutation."""
type UpdatePermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Permission` that was updated by this mutation."""
  permission: Permission

  """An edge for our `Permission`. May be used by Relay 1."""
  permissionEdge(
    """The method to use when ordering `Permission`."""
    orderBy: [PermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePlatbyCategoryByNodeId` mutation."""
input UpdatePlatbyCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlatbyCategory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PlatbyCategory` being updated.
  """
  patch: PlatbyCategoryPatch!
}

"""All input for the `updatePlatbyCategoryGroupByNodeId` mutation."""
input UpdatePlatbyCategoryGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlatbyCategoryGroup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PlatbyCategoryGroup` being updated.
  """
  patch: PlatbyCategoryGroupPatch!
}

"""All input for the `updatePlatbyCategoryGroup` mutation."""
input UpdatePlatbyCategoryGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PlatbyCategoryGroup` being updated.
  """
  patch: PlatbyCategoryGroupPatch!
  pcgId: BigInt!
}

"""The output of our update `PlatbyCategoryGroup` mutation."""
type UpdatePlatbyCategoryGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `PlatbyCategory` that is related to this `PlatbyCategoryGroup`.
  """
  platbyCategoryByPcgIdCategory: PlatbyCategory

  """The `PlatbyCategoryGroup` that was updated by this mutation."""
  platbyCategoryGroup: PlatbyCategoryGroup

  """An edge for our `PlatbyCategoryGroup`. May be used by Relay 1."""
  platbyCategoryGroupEdge(
    """The method to use when ordering `PlatbyCategoryGroup`."""
    orderBy: [PlatbyCategoryGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoryGroupsEdge

  """
  Reads a single `PlatbyGroup` that is related to this `PlatbyCategoryGroup`.
  """
  platbyGroupByPcgIdGroup: PlatbyGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePlatbyCategory` mutation."""
input UpdatePlatbyCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PlatbyCategory` being updated.
  """
  patch: PlatbyCategoryPatch!
  pcId: BigInt!
}

"""The output of our update `PlatbyCategory` mutation."""
type UpdatePlatbyCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlatbyCategory` that was updated by this mutation."""
  platbyCategory: PlatbyCategory

  """An edge for our `PlatbyCategory`. May be used by Relay 1."""
  platbyCategoryEdge(
    """The method to use when ordering `PlatbyCategory`."""
    orderBy: [PlatbyCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePlatbyGroupByNodeId` mutation."""
input UpdatePlatbyGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlatbyGroup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PlatbyGroup` being updated.
  """
  patch: PlatbyGroupPatch!
}

"""All input for the `updatePlatbyGroup` mutation."""
input UpdatePlatbyGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PlatbyGroup` being updated.
  """
  patch: PlatbyGroupPatch!
  pgId: BigInt!
}

"""The output of our update `PlatbyGroup` mutation."""
type UpdatePlatbyGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlatbyGroup` that was updated by this mutation."""
  platbyGroup: PlatbyGroup

  """An edge for our `PlatbyGroup`. May be used by Relay 1."""
  platbyGroupEdge(
    """The method to use when ordering `PlatbyGroup`."""
    orderBy: [PlatbyGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePlatbyGroupSkupinaByNodeId` mutation."""
input UpdatePlatbyGroupSkupinaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlatbyGroupSkupina` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PlatbyGroupSkupina` being updated.
  """
  patch: PlatbyGroupSkupinaPatch!
}

"""All input for the `updatePlatbyGroupSkupina` mutation."""
input UpdatePlatbyGroupSkupinaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PlatbyGroupSkupina` being updated.
  """
  patch: PlatbyGroupSkupinaPatch!
  pgsId: BigInt!
}

"""The output of our update `PlatbyGroupSkupina` mutation."""
type UpdatePlatbyGroupSkupinaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `PlatbyGroup` that is related to this `PlatbyGroupSkupina`.
  """
  platbyGroupByPgsIdGroup: PlatbyGroup

  """The `PlatbyGroupSkupina` that was updated by this mutation."""
  platbyGroupSkupina: PlatbyGroupSkupina

  """An edge for our `PlatbyGroupSkupina`. May be used by Relay 1."""
  platbyGroupSkupinaEdge(
    """The method to use when ordering `PlatbyGroupSkupina`."""
    orderBy: [PlatbyGroupSkupinasOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyGroupSkupinasEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Skupiny` that is related to this `PlatbyGroupSkupina`."""
  skupinyByPgsIdSkupina: Skupiny
}

"""All input for the `updatePlatbyItemByNodeId` mutation."""
input UpdatePlatbyItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlatbyItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PlatbyItem` being updated.
  """
  patch: PlatbyItemPatch!
}

"""All input for the `updatePlatbyItem` mutation."""
input UpdatePlatbyItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PlatbyItem` being updated.
  """
  patch: PlatbyItemPatch!
  piId: BigInt!
}

"""The output of our update `PlatbyItem` mutation."""
type UpdatePlatbyItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `PlatbyCategory` that is related to this `PlatbyItem`."""
  platbyCategoryByPiIdCategory: PlatbyCategory

  """The `PlatbyItem` that was updated by this mutation."""
  platbyItem: PlatbyItem

  """An edge for our `PlatbyItem`. May be used by Relay 1."""
  platbyItemEdge(
    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsEdge

  """Reads a single `PlatbyRaw` that is related to this `PlatbyItem`."""
  platbyRawByPiIdRaw: PlatbyRaw

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PlatbyItem`."""
  userByPiIdUser: User
}

"""All input for the `updatePlatbyRawByNodeId` mutation."""
input UpdatePlatbyRawByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlatbyRaw` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PlatbyRaw` being updated.
  """
  patch: PlatbyRawPatch!
}

"""All input for the `updatePlatbyRaw` mutation."""
input UpdatePlatbyRawInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PlatbyRaw` being updated.
  """
  patch: PlatbyRawPatch!
  prId: BigInt!
}

"""The output of our update `PlatbyRaw` mutation."""
type UpdatePlatbyRawPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlatbyRaw` that was updated by this mutation."""
  platbyRaw: PlatbyRaw

  """An edge for our `PlatbyRaw`. May be used by Relay 1."""
  platbyRawEdge(
    """The method to use when ordering `PlatbyRaw`."""
    orderBy: [PlatbyRawsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyRawsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateRozpiByNodeId` mutation."""
input UpdateRozpiByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Rozpi` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Rozpi` being updated.
  """
  patch: RozpiPatch!
}

"""All input for the `updateRozpi` mutation."""
input UpdateRozpiInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Rozpi` being updated.
  """
  patch: RozpiPatch!
  rId: BigInt!
}

"""The output of our update `Rozpi` mutation."""
type UpdateRozpiPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Rozpi` that was updated by this mutation."""
  rozpi: Rozpi

  """An edge for our `Rozpi`. May be used by Relay 1."""
  rozpiEdge(
    """The method to use when ordering `Rozpi`."""
    orderBy: [RozpisOrderBy!] = [PRIMARY_KEY_ASC]
  ): RozpisEdge

  """Reads a single `User` that is related to this `Rozpi`."""
  userByRTrener: User
}

"""All input for the `updateRozpisItemByNodeId` mutation."""
input UpdateRozpisItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RozpisItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RozpisItem` being updated.
  """
  patch: RozpisItemPatch!
}

"""All input for the `updateRozpisItem` mutation."""
input UpdateRozpisItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RozpisItem` being updated.
  """
  patch: RozpisItemPatch!
  riId: BigInt!
}

"""The output of our update `RozpisItem` mutation."""
type UpdateRozpisItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Pary` that is related to this `RozpisItem`."""
  paryByRiPartner: Pary

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Rozpi` that is related to this `RozpisItem`."""
  rozpiByRiIdRodic: Rozpi

  """The `RozpisItem` that was updated by this mutation."""
  rozpisItem: RozpisItem

  """An edge for our `RozpisItem`. May be used by Relay 1."""
  rozpisItemEdge(
    """The method to use when ordering `RozpisItem`."""
    orderBy: [RozpisItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RozpisItemsEdge
}

"""All input for the `updateSessionByNodeId` mutation."""
input UpdateSessionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Session` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Session` being updated.
  """
  patch: SessionPatch!
}

"""All input for the `updateSession` mutation."""
input UpdateSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Session` being updated.
  """
  patch: SessionPatch!
  ssId: String!
}

"""The output of our update `Session` mutation."""
type UpdateSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Session` that was updated by this mutation."""
  session: Session

  """An edge for our `Session`. May be used by Relay 1."""
  sessionEdge(
    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SessionsEdge

  """Reads a single `User` that is related to this `Session`."""
  userBySsUser: User
}

"""All input for the `updateSkupinyByNodeId` mutation."""
input UpdateSkupinyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Skupiny` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Skupiny` being updated.
  """
  patch: SkupinyPatch!
}

"""All input for the `updateSkupiny` mutation."""
input UpdateSkupinyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Skupiny` being updated.
  """
  patch: SkupinyPatch!
  sId: BigInt!
}

"""The output of our update `Skupiny` mutation."""
type UpdateSkupinyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Skupiny` that was updated by this mutation."""
  skupiny: Skupiny

  """An edge for our `Skupiny`. May be used by Relay 1."""
  skupinyEdge(
    """The method to use when ordering `Skupiny`."""
    orderBy: [SkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SkupiniesEdge
}

"""All input for the `updateUpozorneniByNodeId` mutation."""
input UpdateUpozorneniByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Upozorneni` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Upozorneni` being updated.
  """
  patch: UpozorneniPatch!
}

"""All input for the `updateUpozorneni` mutation."""
input UpdateUpozorneniInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Upozorneni` being updated.
  """
  patch: UpozorneniPatch!
  upId: BigInt!
}

"""The output of our update `Upozorneni` mutation."""
type UpdateUpozorneniPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Upozorneni` that was updated by this mutation."""
  upozorneni: Upozorneni

  """An edge for our `Upozorneni`. May be used by Relay 1."""
  upozorneniEdge(
    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisEdge

  """Reads a single `User` that is related to this `Upozorneni`."""
  userByUpKdo: User
}

"""All input for the `updateUpozorneniSkupinyByNodeId` mutation."""
input UpdateUpozorneniSkupinyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UpozorneniSkupiny` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UpozorneniSkupiny` being updated.
  """
  patch: UpozorneniSkupinyPatch!
}

"""All input for the `updateUpozorneniSkupiny` mutation."""
input UpdateUpozorneniSkupinyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UpozorneniSkupiny` being updated.
  """
  patch: UpozorneniSkupinyPatch!
  upsId: BigInt!
}

"""The output of our update `UpozorneniSkupiny` mutation."""
type UpdateUpozorneniSkupinyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Skupiny` that is related to this `UpozorneniSkupiny`."""
  skupinyByUpsIdSkupina: Skupiny

  """
  Reads a single `Upozorneni` that is related to this `UpozorneniSkupiny`.
  """
  upozorneniByUpsIdRodic: Upozorneni

  """The `UpozorneniSkupiny` that was updated by this mutation."""
  upozorneniSkupiny: UpozorneniSkupiny

  """An edge for our `UpozorneniSkupiny`. May be used by Relay 1."""
  upozorneniSkupinyEdge(
    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  uId: BigInt!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Permission` that is related to this `User`."""
  permissionByUGroup: Permission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Skupiny` that is related to this `User`."""
  skupinyByUSkupina: Skupiny

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateVideoByNodeId` mutation."""
input UpdateVideoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Video` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Video` being updated.
  """
  patch: VideoPatch!
}

"""All input for the `updateVideo` mutation."""
input UpdateVideoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Video` being updated.
  """
  patch: VideoPatch!
  vId: BigInt!
}

"""All input for the `updateVideoListByNodeId` mutation."""
input UpdateVideoListByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `VideoList` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `VideoList` being updated.
  """
  patch: VideoListPatch!
}

"""All input for the `updateVideoList` mutation."""
input UpdateVideoListInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `VideoList` being updated.
  """
  patch: VideoListPatch!
  vlId: BigInt!
}

"""The output of our update `VideoList` mutation."""
type UpdateVideoListPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `VideoList` that was updated by this mutation."""
  videoList: VideoList

  """An edge for our `VideoList`. May be used by Relay 1."""
  videoListEdge(
    """The method to use when ordering `VideoList`."""
    orderBy: [VideoListsOrderBy!] = [PRIMARY_KEY_ASC]
  ): VideoListsEdge
}

"""The output of our update `Video` mutation."""
type UpdateVideoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Video` that was updated by this mutation."""
  video: Video

  """An edge for our `Video`. May be used by Relay 1."""
  videoEdge(
    """The method to use when ordering `Video`."""
    orderBy: [VideosOrderBy!] = [PRIMARY_KEY_ASC]
  ): VideosEdge
}

"""All input for the `updateVideoSourceByNodeId` mutation."""
input UpdateVideoSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `VideoSource` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `VideoSource` being updated.
  """
  patch: VideoSourcePatch!
}

"""All input for the `updateVideoSource` mutation."""
input UpdateVideoSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `VideoSource` being updated.
  """
  patch: VideoSourcePatch!
  vsId: BigInt!
}

"""The output of our update `VideoSource` mutation."""
type UpdateVideoSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `VideoSource` that was updated by this mutation."""
  videoSource: VideoSource

  """An edge for our `VideoSource`. May be used by Relay 1."""
  videoSourceEdge(
    """The method to use when ordering `VideoSource`."""
    orderBy: [VideoSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): VideoSourcesEdge
}

type Upozorneni implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  upBarvy: BigInt!
  upId: BigInt!
  upKdo: BigInt
  upLock: Boolean!
  upNadpis: String!

  """Reads and enables pagination through a set of `UpozorneniSkupiny`."""
  upozorneniSkupiniesByUpsIdRodic(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniSkupinyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UpozorneniSkupiny`."""
    orderBy: [UpozorneniSkupiniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozorneniSkupiniesConnection!
  upText: String!
  upTimestamp: Datetime
  upTimestampAdd: Datetime!

  """Reads a single `User` that is related to this `Upozorneni`."""
  userByUpKdo: User
}

"""
A condition to be used against `Upozorneni` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UpozorneniCondition {
  """Checks for equality with the object’s `upBarvy` field."""
  upBarvy: BigInt

  """Checks for equality with the object’s `upId` field."""
  upId: BigInt

  """Checks for equality with the object’s `upKdo` field."""
  upKdo: BigInt

  """Checks for equality with the object’s `upLock` field."""
  upLock: Boolean

  """Checks for equality with the object’s `upNadpis` field."""
  upNadpis: String

  """Checks for equality with the object’s `upText` field."""
  upText: String

  """Checks for equality with the object’s `upTimestamp` field."""
  upTimestamp: Datetime

  """Checks for equality with the object’s `upTimestampAdd` field."""
  upTimestampAdd: Datetime
}

"""An input for mutations affecting `Upozorneni`"""
input UpozorneniInput {
  upBarvy: BigInt
  upId: BigInt
  upKdo: BigInt
  upLock: Boolean
  upNadpis: String!
  upText: String!
  upTimestamp: Datetime
  upTimestampAdd: Datetime
}

"""
Represents an update to a `Upozorneni`. Fields that are set will be updated.
"""
input UpozorneniPatch {
  upBarvy: BigInt
  upId: BigInt
  upKdo: BigInt
  upLock: Boolean
  upNadpis: String
  upText: String
  upTimestamp: Datetime
  upTimestampAdd: Datetime
}

"""A connection to a list of `Upozorneni` values."""
type UpozornenisConnection {
  """
  A list of edges which contains the `Upozorneni` and cursor to aid in pagination.
  """
  edges: [UpozornenisEdge!]!

  """A list of `Upozorneni` objects."""
  nodes: [Upozorneni!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Upozorneni` you could get from the connection."""
  totalCount: Int!
}

"""A `Upozorneni` edge in the connection."""
type UpozornenisEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Upozorneni` at the end of the edge."""
  node: Upozorneni!
}

"""A connection to a list of `UpozorneniSkupiny` values."""
type UpozorneniSkupiniesConnection {
  """
  A list of edges which contains the `UpozorneniSkupiny` and cursor to aid in pagination.
  """
  edges: [UpozorneniSkupiniesEdge!]!

  """A list of `UpozorneniSkupiny` objects."""
  nodes: [UpozorneniSkupiny!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UpozorneniSkupiny` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UpozorneniSkupiny` edge in the connection."""
type UpozorneniSkupiniesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UpozorneniSkupiny` at the end of the edge."""
  node: UpozorneniSkupiny!
}

"""Methods to use when ordering `UpozorneniSkupiny`."""
enum UpozorneniSkupiniesOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPS_COLOR_ASC
  UPS_COLOR_DESC
  UPS_ID_ASC
  UPS_ID_DESC
  UPS_ID_RODIC_ASC
  UPS_ID_RODIC_DESC
  UPS_ID_SKUPINA_ASC
  UPS_ID_SKUPINA_DESC
  UPS_POPIS_ASC
  UPS_POPIS_DESC
}

type UpozorneniSkupiny implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Skupiny` that is related to this `UpozorneniSkupiny`."""
  skupinyByUpsIdSkupina: Skupiny

  """
  Reads a single `Upozorneni` that is related to this `UpozorneniSkupiny`.
  """
  upozorneniByUpsIdRodic: Upozorneni
  upsColor: String!
  upsId: BigInt!
  upsIdRodic: BigInt!
  upsIdSkupina: BigInt!
  upsPopis: String!
}

"""
A condition to be used against `UpozorneniSkupiny` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UpozorneniSkupinyCondition {
  """Checks for equality with the object’s `upsColor` field."""
  upsColor: String

  """Checks for equality with the object’s `upsId` field."""
  upsId: BigInt

  """Checks for equality with the object’s `upsIdRodic` field."""
  upsIdRodic: BigInt

  """Checks for equality with the object’s `upsIdSkupina` field."""
  upsIdSkupina: BigInt

  """Checks for equality with the object’s `upsPopis` field."""
  upsPopis: String
}

"""An input for mutations affecting `UpozorneniSkupiny`"""
input UpozorneniSkupinyInput {
  upsColor: String!
  upsId: BigInt
  upsIdRodic: BigInt!
  upsIdSkupina: BigInt!
  upsPopis: String!
}

"""
Represents an update to a `UpozorneniSkupiny`. Fields that are set will be updated.
"""
input UpozorneniSkupinyPatch {
  upsColor: String
  upsId: BigInt
  upsIdRodic: BigInt
  upsIdSkupina: BigInt
  upsPopis: String
}

"""Methods to use when ordering `Upozorneni`."""
enum UpozornenisOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UP_BARVY_ASC
  UP_BARVY_DESC
  UP_ID_ASC
  UP_ID_DESC
  UP_KDO_ASC
  UP_KDO_DESC
  UP_LOCK_ASC
  UP_LOCK_DESC
  UP_NADPIS_ASC
  UP_NADPIS_DESC
  UP_TEXT_ASC
  UP_TEXT_DESC
  UP_TIMESTAMP_ADD_ASC
  UP_TIMESTAMP_ADD_DESC
  UP_TIMESTAMP_ASC
  UP_TIMESTAMP_DESC
}

type User implements Node {
  """Reads and enables pagination through a set of `AkceItem`."""
  akceItemsByAiUser(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AkceItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AkceItem`."""
    orderBy: [AkceItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AkceItemsConnection!

  """Reads and enables pagination through a set of `Aktuality`."""
  aktualitiesByAtKdo(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AktualityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Aktuality`."""
    orderBy: [AktualitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AktualitiesConnection!

  """Reads and enables pagination through a set of `Dokumenty`."""
  dokumentiesByDKdo(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DokumentyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Dokumenty`."""
    orderBy: [DokumentiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DokumentiesConnection!

  """Reads and enables pagination through a set of `GalerieFoto`."""
  galerieFotosByGfKdo(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GalerieFotoCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GalerieFoto`."""
    orderBy: [GalerieFotosOrderBy!] = [PRIMARY_KEY_ASC]
  ): GalerieFotosConnection!

  """Reads and enables pagination through a set of `Nabidka`."""
  nabidkasByNTrener(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NabidkaCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Nabidka`."""
    orderBy: [NabidkasOrderBy!] = [PRIMARY_KEY_ASC]
  ): NabidkasConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Pary`."""
  pariesByPIdPartner(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Pary`."""
    orderBy: [PariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PariesConnection!

  """Reads and enables pagination through a set of `Pary`."""
  pariesByPIdPartnerka(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Pary`."""
    orderBy: [PariesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PariesConnection!

  """Reads and enables pagination through a set of `ParyNavrh`."""
  paryNavrhsByPnNavrhl(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParyNavrhCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ParyNavrh`."""
    orderBy: [ParyNavrhsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParyNavrhsConnection!

  """Reads and enables pagination through a set of `ParyNavrh`."""
  paryNavrhsByPnPartner(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParyNavrhCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ParyNavrh`."""
    orderBy: [ParyNavrhsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParyNavrhsConnection!

  """Reads and enables pagination through a set of `ParyNavrh`."""
  paryNavrhsByPnPartnerka(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParyNavrhCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ParyNavrh`."""
    orderBy: [ParyNavrhsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParyNavrhsConnection!

  """Reads a single `Permission` that is related to this `User`."""
  permissionByUGroup: Permission

  """Reads and enables pagination through a set of `PlatbyItem`."""
  platbyItemsByPiIdUser(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlatbyItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlatbyItem`."""
    orderBy: [PlatbyItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlatbyItemsConnection!

  """Reads and enables pagination through a set of `Rozpi`."""
  rozpisByRTrener(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RozpiCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Rozpi`."""
    orderBy: [RozpisOrderBy!] = [PRIMARY_KEY_ASC]
  ): RozpisConnection!

  """Reads and enables pagination through a set of `Session`."""
  sessionsBySsUser(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SessionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SessionsConnection!

  """Reads a single `Skupiny` that is related to this `User`."""
  skupinyByUSkupina: Skupiny
  uBan: Boolean!
  uCity: String!
  uConfirmed: Boolean!
  uConscriptionNumber: String!
  uCreatedAt: Datetime!
  uDancer: Boolean!
  uDistrict: String!
  uEmail: String!
  uGdprSignedAt: Datetime
  uGroup: BigInt!
  uId: BigInt!
  uJmeno: String!
  uLevel: Int!
  uLock: Boolean!
  uLogin: String!
  uMemberSince: Datetime
  uMemberUntil: Datetime
  uNarozeni: Date!
  uNationality: String!
  uOrientationNumber: String!
  uPass: String!
  uPohlavi: String!
  uPostalCode: String!
  uPoznamky: String!

  """Reads and enables pagination through a set of `Upozorneni`."""
  upozornenisByUpKdo(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UpozorneniCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Upozorneni`."""
    orderBy: [UpozornenisOrderBy!] = [PRIMARY_KEY_ASC]
  ): UpozornenisConnection!
  uPrijmeni: String!
  uRodneCislo: String
  uSkupina: BigInt!
  uStreet: String!
  uSystem: Boolean!
  uTeacher: Boolean!
  uTelefon: String!
  uTimestamp: Datetime!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `uBan` field."""
  uBan: Boolean

  """Checks for equality with the object’s `uCity` field."""
  uCity: String

  """Checks for equality with the object’s `uConfirmed` field."""
  uConfirmed: Boolean

  """Checks for equality with the object’s `uConscriptionNumber` field."""
  uConscriptionNumber: String

  """Checks for equality with the object’s `uCreatedAt` field."""
  uCreatedAt: Datetime

  """Checks for equality with the object’s `uDancer` field."""
  uDancer: Boolean

  """Checks for equality with the object’s `uDistrict` field."""
  uDistrict: String

  """Checks for equality with the object’s `uEmail` field."""
  uEmail: String

  """Checks for equality with the object’s `uGdprSignedAt` field."""
  uGdprSignedAt: Datetime

  """Checks for equality with the object’s `uGroup` field."""
  uGroup: BigInt

  """Checks for equality with the object’s `uId` field."""
  uId: BigInt

  """Checks for equality with the object’s `uJmeno` field."""
  uJmeno: String

  """Checks for equality with the object’s `uLevel` field."""
  uLevel: Int

  """Checks for equality with the object’s `uLock` field."""
  uLock: Boolean

  """Checks for equality with the object’s `uLogin` field."""
  uLogin: String

  """Checks for equality with the object’s `uMemberSince` field."""
  uMemberSince: Datetime

  """Checks for equality with the object’s `uMemberUntil` field."""
  uMemberUntil: Datetime

  """Checks for equality with the object’s `uNarozeni` field."""
  uNarozeni: Date

  """Checks for equality with the object’s `uNationality` field."""
  uNationality: String

  """Checks for equality with the object’s `uOrientationNumber` field."""
  uOrientationNumber: String

  """Checks for equality with the object’s `uPass` field."""
  uPass: String

  """Checks for equality with the object’s `uPohlavi` field."""
  uPohlavi: String

  """Checks for equality with the object’s `uPostalCode` field."""
  uPostalCode: String

  """Checks for equality with the object’s `uPoznamky` field."""
  uPoznamky: String

  """Checks for equality with the object’s `uPrijmeni` field."""
  uPrijmeni: String

  """Checks for equality with the object’s `uRodneCislo` field."""
  uRodneCislo: String

  """Checks for equality with the object’s `uSkupina` field."""
  uSkupina: BigInt

  """Checks for equality with the object’s `uStreet` field."""
  uStreet: String

  """Checks for equality with the object’s `uSystem` field."""
  uSystem: Boolean

  """Checks for equality with the object’s `uTeacher` field."""
  uTeacher: Boolean

  """Checks for equality with the object’s `uTelefon` field."""
  uTelefon: String

  """Checks for equality with the object’s `uTimestamp` field."""
  uTimestamp: Datetime
}

"""An input for mutations affecting `User`"""
input UserInput {
  uBan: Boolean
  uCity: String!
  uConfirmed: Boolean
  uConscriptionNumber: String
  uCreatedAt: Datetime
  uDancer: Boolean
  uDistrict: String
  uEmail: String!
  uGdprSignedAt: Datetime
  uGroup: BigInt
  uId: BigInt
  uJmeno: String!
  uLevel: Int
  uLock: Boolean
  uLogin: String!
  uMemberSince: Datetime
  uMemberUntil: Datetime
  uNarozeni: Date!
  uNationality: String!
  uOrientationNumber: String
  uPass: String!
  uPohlavi: String!
  uPostalCode: String!
  uPoznamky: String
  uPrijmeni: String!
  uRodneCislo: String
  uSkupina: BigInt
  uStreet: String!
  uSystem: Boolean
  uTeacher: Boolean
  uTelefon: String!
  uTimestamp: Datetime
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  uBan: Boolean
  uCity: String
  uConfirmed: Boolean
  uConscriptionNumber: String
  uCreatedAt: Datetime
  uDancer: Boolean
  uDistrict: String
  uEmail: String
  uGdprSignedAt: Datetime
  uGroup: BigInt
  uId: BigInt
  uJmeno: String
  uLevel: Int
  uLock: Boolean
  uLogin: String
  uMemberSince: Datetime
  uMemberUntil: Datetime
  uNarozeni: Date
  uNationality: String
  uOrientationNumber: String
  uPass: String
  uPohlavi: String
  uPostalCode: String
  uPoznamky: String
  uPrijmeni: String
  uRodneCislo: String
  uSkupina: BigInt
  uStreet: String
  uSystem: Boolean
  uTeacher: Boolean
  uTelefon: String
  uTimestamp: Datetime
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  U_BAN_ASC
  U_BAN_DESC
  U_CITY_ASC
  U_CITY_DESC
  U_CONFIRMED_ASC
  U_CONFIRMED_DESC
  U_CONSCRIPTION_NUMBER_ASC
  U_CONSCRIPTION_NUMBER_DESC
  U_CREATED_AT_ASC
  U_CREATED_AT_DESC
  U_DANCER_ASC
  U_DANCER_DESC
  U_DISTRICT_ASC
  U_DISTRICT_DESC
  U_EMAIL_ASC
  U_EMAIL_DESC
  U_GDPR_SIGNED_AT_ASC
  U_GDPR_SIGNED_AT_DESC
  U_GROUP_ASC
  U_GROUP_DESC
  U_ID_ASC
  U_ID_DESC
  U_JMENO_ASC
  U_JMENO_DESC
  U_LEVEL_ASC
  U_LEVEL_DESC
  U_LOCK_ASC
  U_LOCK_DESC
  U_LOGIN_ASC
  U_LOGIN_DESC
  U_MEMBER_SINCE_ASC
  U_MEMBER_SINCE_DESC
  U_MEMBER_UNTIL_ASC
  U_MEMBER_UNTIL_DESC
  U_NAROZENI_ASC
  U_NAROZENI_DESC
  U_NATIONALITY_ASC
  U_NATIONALITY_DESC
  U_ORIENTATION_NUMBER_ASC
  U_ORIENTATION_NUMBER_DESC
  U_PASS_ASC
  U_PASS_DESC
  U_POHLAVI_ASC
  U_POHLAVI_DESC
  U_POSTAL_CODE_ASC
  U_POSTAL_CODE_DESC
  U_POZNAMKY_ASC
  U_POZNAMKY_DESC
  U_PRIJMENI_ASC
  U_PRIJMENI_DESC
  U_RODNE_CISLO_ASC
  U_RODNE_CISLO_DESC
  U_SKUPINA_ASC
  U_SKUPINA_DESC
  U_STREET_ASC
  U_STREET_DESC
  U_SYSTEM_ASC
  U_SYSTEM_DESC
  U_TEACHER_ASC
  U_TEACHER_DESC
  U_TELEFON_ASC
  U_TELEFON_DESC
  U_TIMESTAMP_ASC
  U_TIMESTAMP_DESC
}

type Video implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  vAuthor: String!
  vCreatedAt: Datetime!
  vDescription: String!
  vId: BigInt!
  vPlaylist: String
  vTitle: String!
  vUpdatedAt: Datetime!
  vUri: String!
}

"""
A condition to be used against `Video` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input VideoCondition {
  """Checks for equality with the object’s `vAuthor` field."""
  vAuthor: String

  """Checks for equality with the object’s `vCreatedAt` field."""
  vCreatedAt: Datetime

  """Checks for equality with the object’s `vDescription` field."""
  vDescription: String

  """Checks for equality with the object’s `vId` field."""
  vId: BigInt

  """Checks for equality with the object’s `vPlaylist` field."""
  vPlaylist: String

  """Checks for equality with the object’s `vTitle` field."""
  vTitle: String

  """Checks for equality with the object’s `vUpdatedAt` field."""
  vUpdatedAt: Datetime

  """Checks for equality with the object’s `vUri` field."""
  vUri: String
}

"""An input for mutations affecting `Video`"""
input VideoInput {
  vAuthor: String!
  vCreatedAt: Datetime
  vDescription: String!
  vId: BigInt
  vPlaylist: String
  vTitle: String!
  vUpdatedAt: Datetime
  vUri: String!
}

type VideoList implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  vlCount: BigInt!
  vlCreatedAt: Datetime!
  vlDescription: String!
  vlId: BigInt!
  vlLastChecked: Datetime
  vlTitle: String!
  vlUrl: String!
}

"""
A condition to be used against `VideoList` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input VideoListCondition {
  """Checks for equality with the object’s `vlCount` field."""
  vlCount: BigInt

  """Checks for equality with the object’s `vlCreatedAt` field."""
  vlCreatedAt: Datetime

  """Checks for equality with the object’s `vlDescription` field."""
  vlDescription: String

  """Checks for equality with the object’s `vlId` field."""
  vlId: BigInt

  """Checks for equality with the object’s `vlLastChecked` field."""
  vlLastChecked: Datetime

  """Checks for equality with the object’s `vlTitle` field."""
  vlTitle: String

  """Checks for equality with the object’s `vlUrl` field."""
  vlUrl: String
}

"""An input for mutations affecting `VideoList`"""
input VideoListInput {
  vlCount: BigInt!
  vlCreatedAt: Datetime!
  vlDescription: String!
  vlId: BigInt
  vlLastChecked: Datetime
  vlTitle: String!
  vlUrl: String!
}

"""
Represents an update to a `VideoList`. Fields that are set will be updated.
"""
input VideoListPatch {
  vlCount: BigInt
  vlCreatedAt: Datetime
  vlDescription: String
  vlId: BigInt
  vlLastChecked: Datetime
  vlTitle: String
  vlUrl: String
}

"""A connection to a list of `VideoList` values."""
type VideoListsConnection {
  """
  A list of edges which contains the `VideoList` and cursor to aid in pagination.
  """
  edges: [VideoListsEdge!]!

  """A list of `VideoList` objects."""
  nodes: [VideoList!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `VideoList` you could get from the connection."""
  totalCount: Int!
}

"""A `VideoList` edge in the connection."""
type VideoListsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `VideoList` at the end of the edge."""
  node: VideoList!
}

"""Methods to use when ordering `VideoList`."""
enum VideoListsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  VL_COUNT_ASC
  VL_COUNT_DESC
  VL_CREATED_AT_ASC
  VL_CREATED_AT_DESC
  VL_DESCRIPTION_ASC
  VL_DESCRIPTION_DESC
  VL_ID_ASC
  VL_ID_DESC
  VL_LAST_CHECKED_ASC
  VL_LAST_CHECKED_DESC
  VL_TITLE_ASC
  VL_TITLE_DESC
  VL_URL_ASC
  VL_URL_DESC
}

"""
Represents an update to a `Video`. Fields that are set will be updated.
"""
input VideoPatch {
  vAuthor: String
  vCreatedAt: Datetime
  vDescription: String
  vId: BigInt
  vPlaylist: String
  vTitle: String
  vUpdatedAt: Datetime
  vUri: String
}

"""A connection to a list of `Video` values."""
type VideosConnection {
  """
  A list of edges which contains the `Video` and cursor to aid in pagination.
  """
  edges: [VideosEdge!]!

  """A list of `Video` objects."""
  nodes: [Video!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Video` you could get from the connection."""
  totalCount: Int!
}

"""A `Video` edge in the connection."""
type VideosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Video` at the end of the edge."""
  node: Video!
}

"""Methods to use when ordering `Video`."""
enum VideosOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  V_AUTHOR_ASC
  V_AUTHOR_DESC
  V_CREATED_AT_ASC
  V_CREATED_AT_DESC
  V_DESCRIPTION_ASC
  V_DESCRIPTION_DESC
  V_ID_ASC
  V_ID_DESC
  V_PLAYLIST_ASC
  V_PLAYLIST_DESC
  V_TITLE_ASC
  V_TITLE_DESC
  V_UPDATED_AT_ASC
  V_UPDATED_AT_DESC
  V_URI_ASC
  V_URI_DESC
}

type VideoSource implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  vsCreatedAt: Datetime!
  vsDescription: String
  vsId: BigInt!
  vsLastChecked: Datetime
  vsTitle: String
  vsUrl: String!
}

"""
A condition to be used against `VideoSource` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input VideoSourceCondition {
  """Checks for equality with the object’s `vsCreatedAt` field."""
  vsCreatedAt: Datetime

  """Checks for equality with the object’s `vsDescription` field."""
  vsDescription: String

  """Checks for equality with the object’s `vsId` field."""
  vsId: BigInt

  """Checks for equality with the object’s `vsLastChecked` field."""
  vsLastChecked: Datetime

  """Checks for equality with the object’s `vsTitle` field."""
  vsTitle: String

  """Checks for equality with the object’s `vsUrl` field."""
  vsUrl: String
}

"""An input for mutations affecting `VideoSource`"""
input VideoSourceInput {
  vsCreatedAt: Datetime
  vsDescription: String
  vsId: BigInt
  vsLastChecked: Datetime
  vsTitle: String
  vsUrl: String!
}

"""
Represents an update to a `VideoSource`. Fields that are set will be updated.
"""
input VideoSourcePatch {
  vsCreatedAt: Datetime
  vsDescription: String
  vsId: BigInt
  vsLastChecked: Datetime
  vsTitle: String
  vsUrl: String
}

"""A connection to a list of `VideoSource` values."""
type VideoSourcesConnection {
  """
  A list of edges which contains the `VideoSource` and cursor to aid in pagination.
  """
  edges: [VideoSourcesEdge!]!

  """A list of `VideoSource` objects."""
  nodes: [VideoSource!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `VideoSource` you could get from the connection."""
  totalCount: Int!
}

"""A `VideoSource` edge in the connection."""
type VideoSourcesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `VideoSource` at the end of the edge."""
  node: VideoSource!
}

"""Methods to use when ordering `VideoSource`."""
enum VideoSourcesOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  VS_CREATED_AT_ASC
  VS_CREATED_AT_DESC
  VS_DESCRIPTION_ASC
  VS_DESCRIPTION_DESC
  VS_ID_ASC
  VS_ID_DESC
  VS_LAST_CHECKED_ASC
  VS_LAST_CHECKED_DESC
  VS_TITLE_ASC
  VS_TITLE_DESC
  VS_URL_ASC
  VS_URL_DESC
}
