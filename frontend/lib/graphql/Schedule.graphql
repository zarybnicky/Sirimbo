fragment ScheduleBasic on Rozpi {
  __typename
  rDatum
  rId
  rKde
  rLock
  rTrener
  rVisible
  userByRTrener {
    uJmeno
    uId
    uPrijmeni
  }
}

fragment ScheduleItemBasic on RozpisItem {
  __typename
  riOd
  riDo
  riId
  riLock
  riPartner
  paryByRiPartner {
    pId
    userByPIdPartner {
      uJmeno
      uId
      uPrijmeni
    }
    userByPIdPartnerka {
      uId
      uJmeno
      uPrijmeni
    }
  }
}

fragment ScheduleItem on RozpisItem {
  ...ScheduleItemBasic
  rozpiByRiIdRodic {
    ...ScheduleBasic
  }
}

fragment Schedule on Rozpi {
  ...ScheduleBasic
  rozpisItemsByRiIdRodic(orderBy: [RI_OD_ASC]) {
    nodes {
      ...ScheduleItemBasic
    }
  }
}

query ScheduleRange($startDate: Date!, $endDate: Date!) {
  schedulesForRange(startDate: $startDate, endDate: $endDate) {
    nodes {
      ...Schedule
    }
  }
}

query ScheduleList($limit: Int, $offset: Int) {
  rozpis(first: $limit, offset: $offset, orderBy: [R_DATUM_DESC]) {
    totalCount
    nodes {
      ...Schedule
    }
  }
}

query MyLessons($startDate: Date, $endDate: Date) {
  currentCoupleIds {
    nodes
  }
  currentSessionId
  currentUserId
  myLessons(startDate: $startDate, endDate: $endDate) {
    nodes {
      ...ScheduleItem
    }
  }
}

query Schedule($id: BigInt!) {
  rozpi(rId: $id) {
    ...Schedule
  }
}

mutation ToggleScheduleVisible($id: BigInt!, $visible: Boolean!) {
  updateRozpi(input: {rId: $id, patch: {rVisible: $visible}}) {
    rozpi {
      rId
    }
  }
}

mutation CreateSchedule($input: RozpiInput!) {
  createRozpi(input: {rozpi: $input}) {
    __typename
  }
}

mutation UpdateSchedule($id: BigInt!, $patch: RozpiPatch!) {
  updateRozpi(input: {rId: $id, patch: $patch}) {
    __typename
  }
}

mutation DeleteSchedule($id: BigInt!) {
  deleteRozpi(input: {rId: $id}) {
    __typename
  }
}
