/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { CouplePartialFragmentDoc } from './CurrentUser';
import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type ReservationItemBasicFragment = { __typename: 'NabidkaItem', niPartner: string, niPocetHod: number, niLock: boolean, id: string, paryByNiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null };

export type ReservationBasicFragment = { __typename?: 'Nabidka', nOd: string, nDo: string, nPocetHod: number, nMaxPocetHod: number, nLock: boolean, nTimestamp: string | null, nVisible: boolean, nTrener: string, id: string, userByNTrener: { __typename?: 'User', fullName: string | null, uJmeno: string, uPrijmeni: string, id: string } | null };

export type ReservationFragment = { __typename?: 'Nabidka', nOd: string, nDo: string, nPocetHod: number, nMaxPocetHod: number, nLock: boolean, nTimestamp: string | null, nVisible: boolean, nTrener: string, id: string, nabidkaItemsByNiIdRodic: { __typename?: 'NabidkaItemsConnection', nodes: Array<{ __typename: 'NabidkaItem', niPartner: string, niPocetHod: number, niLock: boolean, id: string, paryByNiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null }> }, userByNTrener: { __typename?: 'User', fullName: string | null, uJmeno: string, uPrijmeni: string, id: string } | null };

export type MyReservationFragment = { __typename?: 'Nabidka', myLessons: number | null, freeLessons: number | null, nOd: string, nDo: string, nPocetHod: number, nMaxPocetHod: number, nLock: boolean, nTimestamp: string | null, nVisible: boolean, nTrener: string, id: string, nabidkaItemsByNiIdRodic: { __typename?: 'NabidkaItemsConnection', nodes: Array<{ __typename: 'NabidkaItem', niPartner: string, niPocetHod: number, niLock: boolean, id: string, paryByNiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null }> }, userByNTrener: { __typename?: 'User', fullName: string | null, uJmeno: string, uPrijmeni: string, id: string } | null };

export type ReservationListQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type ReservationListQuery = { __typename?: 'Query', nabidkas: { __typename?: 'NabidkasConnection', totalCount: number, nodes: Array<{ __typename?: 'Nabidka', nOd: string, nDo: string, nPocetHod: number, nMaxPocetHod: number, nLock: boolean, nTimestamp: string | null, nVisible: boolean, nTrener: string, id: string, userByNTrener: { __typename?: 'User', fullName: string | null, uJmeno: string, uPrijmeni: string, id: string } | null }> } | null };

export type ReservationDetailListQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type ReservationDetailListQuery = { __typename?: 'Query', nabidkas: { __typename?: 'NabidkasConnection', totalCount: number, nodes: Array<{ __typename?: 'Nabidka', nOd: string, nDo: string, nPocetHod: number, nMaxPocetHod: number, nLock: boolean, nTimestamp: string | null, nVisible: boolean, nTrener: string, id: string, nabidkaItemsByNiIdRodic: { __typename?: 'NabidkaItemsConnection', nodes: Array<{ __typename: 'NabidkaItem', niPartner: string, niPocetHod: number, niLock: boolean, id: string, paryByNiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null }> }, userByNTrener: { __typename?: 'User', fullName: string | null, uJmeno: string, uPrijmeni: string, id: string } | null }> } | null };

export type ReservationQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type ReservationQuery = { __typename?: 'Query', nabidka: { __typename?: 'Nabidka', nOd: string, nDo: string, nPocetHod: number, nMaxPocetHod: number, nLock: boolean, nTimestamp: string | null, nVisible: boolean, nTrener: string, id: string, nabidkaItemsByNiIdRodic: { __typename?: 'NabidkaItemsConnection', nodes: Array<{ __typename: 'NabidkaItem', niPartner: string, niPocetHod: number, niLock: boolean, id: string, paryByNiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null }> }, userByNTrener: { __typename?: 'User', fullName: string | null, uJmeno: string, uPrijmeni: string, id: string } | null } | null };

export type ReservationRangeQueryVariables = Types.Exact<{
  startDate: Types.Scalars['Date'];
  endDate: Types.Scalars['Date'];
}>;


export type ReservationRangeQuery = { __typename?: 'Query', reservationsForRange: { __typename?: 'NabidkasConnection', nodes: Array<{ __typename?: 'Nabidka', myLessons: number | null, freeLessons: number | null, nOd: string, nDo: string, nPocetHod: number, nMaxPocetHod: number, nLock: boolean, nTimestamp: string | null, nVisible: boolean, nTrener: string, id: string, nabidkaItemsByNiIdRodic: { __typename?: 'NabidkaItemsConnection', nodes: Array<{ __typename: 'NabidkaItem', niPartner: string, niPocetHod: number, niLock: boolean, id: string, paryByNiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null }> }, userByNTrener: { __typename?: 'User', fullName: string | null, uJmeno: string, uPrijmeni: string, id: string } | null }> } | null };

export type SetDesiredLessonsMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  lessonCount: Types.Scalars['Int'];
}>;


export type SetDesiredLessonsMutation = { __typename?: 'Mutation', reservationSetDesiredLessons: { __typename?: 'ReservationSetDesiredLessonsPayload', reservation: { __typename?: 'Nabidka', myLessons: number | null, freeLessons: number | null } | null } | null };

export type ToggleReservationVisibleMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  visible: Types.Scalars['Boolean'];
}>;


export type ToggleReservationVisibleMutation = { __typename?: 'Mutation', updateNabidka: { __typename?: 'UpdateNabidkaPayload', nabidka: { __typename?: 'Nabidka', id: string } | null } | null };

export type CreateReservationMutationVariables = Types.Exact<{
  input: Types.NabidkaInput;
}>;


export type CreateReservationMutation = { __typename?: 'Mutation', createNabidka: { __typename?: 'CreateNabidkaPayload', nabidka: { __typename?: 'Nabidka', id: string } | null } | null };

export type UpdateReservationMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.NabidkaPatch;
}>;


export type UpdateReservationMutation = { __typename?: 'Mutation', updateNabidka: { __typename: 'UpdateNabidkaPayload' } | null };

export type DeleteReservationMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteReservationMutation = { __typename?: 'Mutation', deleteNabidka: { __typename: 'DeleteNabidkaPayload' } | null };

export const ReservationBasicFragmentDoc = `
    fragment ReservationBasic on Nabidka {
  id: nId
  nOd
  nDo
  nPocetHod
  nMaxPocetHod
  nLock
  nTimestamp
  nVisible
  nTrener
  userByNTrener {
    fullName
    uJmeno
    uPrijmeni
    id: uId
  }
}
    `;
export const ReservationItemBasicFragmentDoc = `
    fragment ReservationItemBasic on NabidkaItem {
  __typename
  id: niId
  niPartner
  niPocetHod
  niLock
  paryByNiPartner {
    ...CouplePartial
  }
}
    ${CouplePartialFragmentDoc}`;
export const ReservationFragmentDoc = `
    fragment Reservation on Nabidka {
  ...ReservationBasic
  nabidkaItemsByNiIdRodic(orderBy: [NI_POCET_HOD_DESC]) {
    nodes {
      ...ReservationItemBasic
    }
  }
}
    ${ReservationBasicFragmentDoc}
${ReservationItemBasicFragmentDoc}`;
export const MyReservationFragmentDoc = `
    fragment MyReservation on Nabidka {
  ...Reservation
  myLessons
  freeLessons
}
    ${ReservationFragmentDoc}`;
export const ReservationListDocument = `
    query ReservationList($limit: Int, $offset: Int) {
  nabidkas(first: $limit, offset: $offset, orderBy: [N_OD_DESC]) {
    nodes {
      ...ReservationBasic
    }
    totalCount
  }
}
    ${ReservationBasicFragmentDoc}`;
export const useReservationListQuery = <
      TData = ReservationListQuery,
      TError = unknown
    >(
      variables?: ReservationListQueryVariables,
      options?: UseQueryOptions<ReservationListQuery, TError, TData>
    ) =>
    useQuery<ReservationListQuery, TError, TData>(
      variables === undefined ? ['ReservationList'] : ['ReservationList', variables],
      fetcher<ReservationListQuery, ReservationListQueryVariables>(ReservationListDocument, variables),
      options
    );

useReservationListQuery.getKey = (variables?: ReservationListQueryVariables) => variables === undefined ? ['ReservationList'] : ['ReservationList', variables];
;

useReservationListQuery.fetcher = (variables?: ReservationListQueryVariables, options?: RequestInit['headers']) => fetcher<ReservationListQuery, ReservationListQueryVariables>(ReservationListDocument, variables, options);
export const ReservationDetailListDocument = `
    query ReservationDetailList($limit: Int, $offset: Int) {
  nabidkas(first: $limit, offset: $offset, orderBy: [N_OD_DESC]) {
    nodes {
      ...Reservation
    }
    totalCount
  }
}
    ${ReservationFragmentDoc}`;
export const useReservationDetailListQuery = <
      TData = ReservationDetailListQuery,
      TError = unknown
    >(
      variables?: ReservationDetailListQueryVariables,
      options?: UseQueryOptions<ReservationDetailListQuery, TError, TData>
    ) =>
    useQuery<ReservationDetailListQuery, TError, TData>(
      variables === undefined ? ['ReservationDetailList'] : ['ReservationDetailList', variables],
      fetcher<ReservationDetailListQuery, ReservationDetailListQueryVariables>(ReservationDetailListDocument, variables),
      options
    );

useReservationDetailListQuery.getKey = (variables?: ReservationDetailListQueryVariables) => variables === undefined ? ['ReservationDetailList'] : ['ReservationDetailList', variables];
;

useReservationDetailListQuery.fetcher = (variables?: ReservationDetailListQueryVariables, options?: RequestInit['headers']) => fetcher<ReservationDetailListQuery, ReservationDetailListQueryVariables>(ReservationDetailListDocument, variables, options);
export const ReservationDocument = `
    query Reservation($id: BigInt!) {
  nabidka(nId: $id) {
    ...Reservation
  }
}
    ${ReservationFragmentDoc}`;
export const useReservationQuery = <
      TData = ReservationQuery,
      TError = unknown
    >(
      variables: ReservationQueryVariables,
      options?: UseQueryOptions<ReservationQuery, TError, TData>
    ) =>
    useQuery<ReservationQuery, TError, TData>(
      ['Reservation', variables],
      fetcher<ReservationQuery, ReservationQueryVariables>(ReservationDocument, variables),
      options
    );

useReservationQuery.getKey = (variables: ReservationQueryVariables) => ['Reservation', variables];
;

useReservationQuery.fetcher = (variables: ReservationQueryVariables, options?: RequestInit['headers']) => fetcher<ReservationQuery, ReservationQueryVariables>(ReservationDocument, variables, options);
export const ReservationRangeDocument = `
    query ReservationRange($startDate: Date!, $endDate: Date!) {
  reservationsForRange(startDate: $startDate, endDate: $endDate) {
    nodes {
      ...MyReservation
    }
  }
}
    ${MyReservationFragmentDoc}`;
export const useReservationRangeQuery = <
      TData = ReservationRangeQuery,
      TError = unknown
    >(
      variables: ReservationRangeQueryVariables,
      options?: UseQueryOptions<ReservationRangeQuery, TError, TData>
    ) =>
    useQuery<ReservationRangeQuery, TError, TData>(
      ['ReservationRange', variables],
      fetcher<ReservationRangeQuery, ReservationRangeQueryVariables>(ReservationRangeDocument, variables),
      options
    );

useReservationRangeQuery.getKey = (variables: ReservationRangeQueryVariables) => ['ReservationRange', variables];
;

useReservationRangeQuery.fetcher = (variables: ReservationRangeQueryVariables, options?: RequestInit['headers']) => fetcher<ReservationRangeQuery, ReservationRangeQueryVariables>(ReservationRangeDocument, variables, options);
export const SetDesiredLessonsDocument = `
    mutation SetDesiredLessons($id: BigInt!, $lessonCount: Int!) {
  reservationSetDesiredLessons(
    input: {reservationId: $id, lessonCount: $lessonCount}
  ) {
    reservation {
      myLessons
      freeLessons
    }
  }
}
    `;
export const useSetDesiredLessonsMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SetDesiredLessonsMutation, TError, SetDesiredLessonsMutationVariables, TContext>) =>
    useMutation<SetDesiredLessonsMutation, TError, SetDesiredLessonsMutationVariables, TContext>(
      ['SetDesiredLessons'],
      (variables?: SetDesiredLessonsMutationVariables) => fetcher<SetDesiredLessonsMutation, SetDesiredLessonsMutationVariables>(SetDesiredLessonsDocument, variables)(),
      options
    );
useSetDesiredLessonsMutation.getKey = () => ['SetDesiredLessons'];

useSetDesiredLessonsMutation.fetcher = (variables: SetDesiredLessonsMutationVariables, options?: RequestInit['headers']) => fetcher<SetDesiredLessonsMutation, SetDesiredLessonsMutationVariables>(SetDesiredLessonsDocument, variables, options);
export const ToggleReservationVisibleDocument = `
    mutation ToggleReservationVisible($id: BigInt!, $visible: Boolean!) {
  updateNabidka(input: {nId: $id, patch: {nVisible: $visible}}) {
    nabidka {
      id: nId
    }
  }
}
    `;
export const useToggleReservationVisibleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ToggleReservationVisibleMutation, TError, ToggleReservationVisibleMutationVariables, TContext>) =>
    useMutation<ToggleReservationVisibleMutation, TError, ToggleReservationVisibleMutationVariables, TContext>(
      ['ToggleReservationVisible'],
      (variables?: ToggleReservationVisibleMutationVariables) => fetcher<ToggleReservationVisibleMutation, ToggleReservationVisibleMutationVariables>(ToggleReservationVisibleDocument, variables)(),
      options
    );
useToggleReservationVisibleMutation.getKey = () => ['ToggleReservationVisible'];

useToggleReservationVisibleMutation.fetcher = (variables: ToggleReservationVisibleMutationVariables, options?: RequestInit['headers']) => fetcher<ToggleReservationVisibleMutation, ToggleReservationVisibleMutationVariables>(ToggleReservationVisibleDocument, variables, options);
export const CreateReservationDocument = `
    mutation CreateReservation($input: NabidkaInput!) {
  createNabidka(input: {nabidka: $input}) {
    nabidka {
      id: nId
    }
  }
}
    `;
export const useCreateReservationMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateReservationMutation, TError, CreateReservationMutationVariables, TContext>) =>
    useMutation<CreateReservationMutation, TError, CreateReservationMutationVariables, TContext>(
      ['CreateReservation'],
      (variables?: CreateReservationMutationVariables) => fetcher<CreateReservationMutation, CreateReservationMutationVariables>(CreateReservationDocument, variables)(),
      options
    );
useCreateReservationMutation.getKey = () => ['CreateReservation'];

useCreateReservationMutation.fetcher = (variables: CreateReservationMutationVariables, options?: RequestInit['headers']) => fetcher<CreateReservationMutation, CreateReservationMutationVariables>(CreateReservationDocument, variables, options);
export const UpdateReservationDocument = `
    mutation UpdateReservation($id: BigInt!, $patch: NabidkaPatch!) {
  updateNabidka(input: {nId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateReservationMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateReservationMutation, TError, UpdateReservationMutationVariables, TContext>) =>
    useMutation<UpdateReservationMutation, TError, UpdateReservationMutationVariables, TContext>(
      ['UpdateReservation'],
      (variables?: UpdateReservationMutationVariables) => fetcher<UpdateReservationMutation, UpdateReservationMutationVariables>(UpdateReservationDocument, variables)(),
      options
    );
useUpdateReservationMutation.getKey = () => ['UpdateReservation'];

useUpdateReservationMutation.fetcher = (variables: UpdateReservationMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateReservationMutation, UpdateReservationMutationVariables>(UpdateReservationDocument, variables, options);
export const DeleteReservationDocument = `
    mutation DeleteReservation($id: BigInt!) {
  deleteNabidka(input: {nId: $id}) {
    __typename
  }
}
    `;
export const useDeleteReservationMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteReservationMutation, TError, DeleteReservationMutationVariables, TContext>) =>
    useMutation<DeleteReservationMutation, TError, DeleteReservationMutationVariables, TContext>(
      ['DeleteReservation'],
      (variables?: DeleteReservationMutationVariables) => fetcher<DeleteReservationMutation, DeleteReservationMutationVariables>(DeleteReservationDocument, variables)(),
      options
    );
useDeleteReservationMutation.getKey = () => ['DeleteReservation'];

useDeleteReservationMutation.fetcher = (variables: DeleteReservationMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteReservationMutation, DeleteReservationMutationVariables>(DeleteReservationDocument, variables, options);