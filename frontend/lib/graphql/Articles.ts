/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type ArticleFragment = { __typename: 'Aktuality', atId: string, atPreview: string, atJmeno: string, atText: string, atFoto: string | null, atFotoMain: string | null, atTimestamp: string | null, atTimestampAdd: string | null, galerieFotoByAtFotoMain: { __typename?: 'GalerieFoto', gfPath: string } | null };

export type ArticleQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type ArticleQuery = { __typename?: 'Query', aktuality: { __typename: 'Aktuality', atId: string, atPreview: string, atJmeno: string, atText: string, atFoto: string | null, atFotoMain: string | null, atTimestamp: string | null, atTimestampAdd: string | null, galerieFotoByAtFotoMain: { __typename?: 'GalerieFoto', gfPath: string } | null } | null };

export type ArticlesQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type ArticlesQuery = { __typename?: 'Query', aktualities: { __typename?: 'AktualitiesConnection', totalCount: number, nodes: Array<{ __typename: 'Aktuality', atId: string, atPreview: string, atJmeno: string, atText: string, atFoto: string | null, atFotoMain: string | null, atTimestamp: string | null, atTimestampAdd: string | null, galerieFotoByAtFotoMain: { __typename?: 'GalerieFoto', gfPath: string } | null }> } | null };

export type CreateArticleMutationVariables = Types.Exact<{
  input: Types.AktualityInput;
}>;


export type CreateArticleMutation = { __typename?: 'Mutation', createAktuality: { __typename: 'CreateAktualityPayload' } | null };

export type UpdateArticleMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.AktualityPatch;
}>;


export type UpdateArticleMutation = { __typename?: 'Mutation', updateAktuality: { __typename: 'UpdateAktualityPayload' } | null };

export type DeleteArticleMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteArticleMutation = { __typename?: 'Mutation', deleteAktuality: { __typename: 'DeleteAktualityPayload' } | null };

export const ArticleFragmentDoc = `
    fragment Article on Aktuality {
  __typename
  atId
  atPreview
  atJmeno
  atText
  atFoto
  atFotoMain
  atTimestamp
  atTimestampAdd
  galerieFotoByAtFotoMain {
    gfPath
  }
}
    `;
export const ArticleDocument = `
    query Article($id: BigInt!) {
  aktuality(atId: $id) {
    ...Article
  }
}
    ${ArticleFragmentDoc}`;
export const useArticleQuery = <
      TData = ArticleQuery,
      TError = unknown
    >(
      variables: ArticleQueryVariables,
      options?: UseQueryOptions<ArticleQuery, TError, TData>
    ) =>
    useQuery<ArticleQuery, TError, TData>(
      ['Article', variables],
      fetcher<ArticleQuery, ArticleQueryVariables>(ArticleDocument, variables),
      options
    );

useArticleQuery.getKey = (variables: ArticleQueryVariables) => ['Article', variables];
;

useArticleQuery.fetcher = (variables: ArticleQueryVariables, options?: RequestInit['headers']) => fetcher<ArticleQuery, ArticleQueryVariables>(ArticleDocument, variables, options);
export const ArticlesDocument = `
    query Articles($limit: Int, $offset: Int) {
  aktualities(first: $limit, offset: $offset, orderBy: [AT_TIMESTAMP_ADD_DESC]) {
    totalCount
    nodes {
      ...Article
    }
  }
}
    ${ArticleFragmentDoc}`;
export const useArticlesQuery = <
      TData = ArticlesQuery,
      TError = unknown
    >(
      variables?: ArticlesQueryVariables,
      options?: UseQueryOptions<ArticlesQuery, TError, TData>
    ) =>
    useQuery<ArticlesQuery, TError, TData>(
      variables === undefined ? ['Articles'] : ['Articles', variables],
      fetcher<ArticlesQuery, ArticlesQueryVariables>(ArticlesDocument, variables),
      options
    );

useArticlesQuery.getKey = (variables?: ArticlesQueryVariables) => variables === undefined ? ['Articles'] : ['Articles', variables];
;

useArticlesQuery.fetcher = (variables?: ArticlesQueryVariables, options?: RequestInit['headers']) => fetcher<ArticlesQuery, ArticlesQueryVariables>(ArticlesDocument, variables, options);
export const CreateArticleDocument = `
    mutation CreateArticle($input: AktualityInput!) {
  createAktuality(input: {aktuality: $input}) {
    __typename
  }
}
    `;
export const useCreateArticleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateArticleMutation, TError, CreateArticleMutationVariables, TContext>) =>
    useMutation<CreateArticleMutation, TError, CreateArticleMutationVariables, TContext>(
      ['CreateArticle'],
      (variables?: CreateArticleMutationVariables) => fetcher<CreateArticleMutation, CreateArticleMutationVariables>(CreateArticleDocument, variables)(),
      options
    );
useCreateArticleMutation.getKey = () => ['CreateArticle'];

useCreateArticleMutation.fetcher = (variables: CreateArticleMutationVariables, options?: RequestInit['headers']) => fetcher<CreateArticleMutation, CreateArticleMutationVariables>(CreateArticleDocument, variables, options);
export const UpdateArticleDocument = `
    mutation UpdateArticle($id: BigInt!, $patch: AktualityPatch!) {
  updateAktuality(input: {atId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateArticleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateArticleMutation, TError, UpdateArticleMutationVariables, TContext>) =>
    useMutation<UpdateArticleMutation, TError, UpdateArticleMutationVariables, TContext>(
      ['UpdateArticle'],
      (variables?: UpdateArticleMutationVariables) => fetcher<UpdateArticleMutation, UpdateArticleMutationVariables>(UpdateArticleDocument, variables)(),
      options
    );
useUpdateArticleMutation.getKey = () => ['UpdateArticle'];

useUpdateArticleMutation.fetcher = (variables: UpdateArticleMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateArticleMutation, UpdateArticleMutationVariables>(UpdateArticleDocument, variables, options);
export const DeleteArticleDocument = `
    mutation DeleteArticle($id: BigInt!) {
  deleteAktuality(input: {atId: $id}) {
    __typename
  }
}
    `;
export const useDeleteArticleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteArticleMutation, TError, DeleteArticleMutationVariables, TContext>) =>
    useMutation<DeleteArticleMutation, TError, DeleteArticleMutationVariables, TContext>(
      ['DeleteArticle'],
      (variables?: DeleteArticleMutationVariables) => fetcher<DeleteArticleMutation, DeleteArticleMutationVariables>(DeleteArticleDocument, variables)(),
      options
    );
useDeleteArticleMutation.getKey = () => ['DeleteArticle'];

useDeleteArticleMutation.fetcher = (variables: DeleteArticleMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteArticleMutation, DeleteArticleMutationVariables>(DeleteArticleDocument, variables, options);