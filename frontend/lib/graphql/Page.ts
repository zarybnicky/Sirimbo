/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type PageFragment = { __typename: 'Page', id: number, url: string, title: string, content: { [key: string]: any }, createdAt: string, updatedAt: string };

export type PageQueryVariables = Types.Exact<{
  url: Types.Scalars['String'];
}>;


export type PageQuery = { __typename?: 'Query', pageByUrl: { __typename?: 'Page', content: { [key: string]: any } } | null };

export type PageByIdQueryVariables = Types.Exact<{
  id: Types.Scalars['Int'];
}>;


export type PageByIdQuery = { __typename?: 'Query', page: { __typename: 'Page', id: number, url: string, title: string, content: { [key: string]: any }, createdAt: string, updatedAt: string } | null };

export type PageListQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type PageListQuery = { __typename?: 'Query', pages: { __typename?: 'PagesConnection', nodes: Array<{ __typename: 'Page', id: number, url: string, title: string, content: { [key: string]: any }, createdAt: string, updatedAt: string }> } | null };

export type PageRevisionsQueryVariables = Types.Exact<{
  id: Types.Scalars['Int'];
}>;


export type PageRevisionsQuery = { __typename?: 'Query', pageRevisions: { __typename?: 'PageRevisionsConnection', nodes: Array<{ __typename?: 'PageRevision', revNumber: number, revOperation: string, revTimestamp: string | null, id: number, url: string, title: string, content: { [key: string]: any }, createdAt: string, updatedAt: string }> } | null };

export type CreatePageMutationVariables = Types.Exact<{
  input: Types.PageInput;
}>;


export type CreatePageMutation = { __typename?: 'Mutation', createPage: { __typename?: 'CreatePagePayload', page: { __typename: 'Page', id: number, url: string, title: string, content: { [key: string]: any }, createdAt: string, updatedAt: string } | null } | null };

export type UpdatePageMutationVariables = Types.Exact<{
  id: Types.Scalars['Int'];
  patch: Types.PagePatch;
}>;


export type UpdatePageMutation = { __typename?: 'Mutation', updatePage: { __typename?: 'UpdatePagePayload', page: { __typename: 'Page', id: number, url: string, title: string, content: { [key: string]: any }, createdAt: string, updatedAt: string } | null } | null };

export const PageFragmentDoc = `
    fragment Page on Page {
  __typename
  id
  url
  title
  content
  createdAt
  updatedAt
}
    `;
export const PageDocument = `
    query Page($url: String!) {
  pageByUrl(url: $url) {
    content
  }
}
    `;
export const usePageQuery = <
      TData = PageQuery,
      TError = unknown
    >(
      variables: PageQueryVariables,
      options?: UseQueryOptions<PageQuery, TError, TData>
    ) =>
    useQuery<PageQuery, TError, TData>(
      ['Page', variables],
      fetcher<PageQuery, PageQueryVariables>(PageDocument, variables),
      options
    );

usePageQuery.getKey = (variables: PageQueryVariables) => ['Page', variables];
;

usePageQuery.fetcher = (variables: PageQueryVariables, options?: RequestInit['headers']) => fetcher<PageQuery, PageQueryVariables>(PageDocument, variables, options);
export const PageByIdDocument = `
    query PageById($id: Int!) {
  page(id: $id) {
    ...Page
  }
}
    ${PageFragmentDoc}`;
export const usePageByIdQuery = <
      TData = PageByIdQuery,
      TError = unknown
    >(
      variables: PageByIdQueryVariables,
      options?: UseQueryOptions<PageByIdQuery, TError, TData>
    ) =>
    useQuery<PageByIdQuery, TError, TData>(
      ['PageById', variables],
      fetcher<PageByIdQuery, PageByIdQueryVariables>(PageByIdDocument, variables),
      options
    );

usePageByIdQuery.getKey = (variables: PageByIdQueryVariables) => ['PageById', variables];
;

usePageByIdQuery.fetcher = (variables: PageByIdQueryVariables, options?: RequestInit['headers']) => fetcher<PageByIdQuery, PageByIdQueryVariables>(PageByIdDocument, variables, options);
export const PageListDocument = `
    query PageList {
  pages(orderBy: URL_ASC) {
    nodes {
      ...Page
    }
  }
}
    ${PageFragmentDoc}`;
export const usePageListQuery = <
      TData = PageListQuery,
      TError = unknown
    >(
      variables?: PageListQueryVariables,
      options?: UseQueryOptions<PageListQuery, TError, TData>
    ) =>
    useQuery<PageListQuery, TError, TData>(
      variables === undefined ? ['PageList'] : ['PageList', variables],
      fetcher<PageListQuery, PageListQueryVariables>(PageListDocument, variables),
      options
    );

usePageListQuery.getKey = (variables?: PageListQueryVariables) => variables === undefined ? ['PageList'] : ['PageList', variables];
;

usePageListQuery.fetcher = (variables?: PageListQueryVariables, options?: RequestInit['headers']) => fetcher<PageListQuery, PageListQueryVariables>(PageListDocument, variables, options);
export const PageRevisionsDocument = `
    query PageRevisions($id: Int!) {
  pageRevisions(condition: {id: $id}) {
    nodes {
      revNumber
      revOperation
      revTimestamp
      id
      url
      title
      content
      createdAt
      updatedAt
    }
  }
}
    `;
export const usePageRevisionsQuery = <
      TData = PageRevisionsQuery,
      TError = unknown
    >(
      variables: PageRevisionsQueryVariables,
      options?: UseQueryOptions<PageRevisionsQuery, TError, TData>
    ) =>
    useQuery<PageRevisionsQuery, TError, TData>(
      ['PageRevisions', variables],
      fetcher<PageRevisionsQuery, PageRevisionsQueryVariables>(PageRevisionsDocument, variables),
      options
    );

usePageRevisionsQuery.getKey = (variables: PageRevisionsQueryVariables) => ['PageRevisions', variables];
;

usePageRevisionsQuery.fetcher = (variables: PageRevisionsQueryVariables, options?: RequestInit['headers']) => fetcher<PageRevisionsQuery, PageRevisionsQueryVariables>(PageRevisionsDocument, variables, options);
export const CreatePageDocument = `
    mutation CreatePage($input: PageInput!) {
  createPage(input: {page: $input}) {
    page {
      ...Page
    }
  }
}
    ${PageFragmentDoc}`;
export const useCreatePageMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreatePageMutation, TError, CreatePageMutationVariables, TContext>) =>
    useMutation<CreatePageMutation, TError, CreatePageMutationVariables, TContext>(
      ['CreatePage'],
      (variables?: CreatePageMutationVariables) => fetcher<CreatePageMutation, CreatePageMutationVariables>(CreatePageDocument, variables)(),
      options
    );
useCreatePageMutation.getKey = () => ['CreatePage'];

useCreatePageMutation.fetcher = (variables: CreatePageMutationVariables, options?: RequestInit['headers']) => fetcher<CreatePageMutation, CreatePageMutationVariables>(CreatePageDocument, variables, options);
export const UpdatePageDocument = `
    mutation UpdatePage($id: Int!, $patch: PagePatch!) {
  updatePage(input: {id: $id, patch: $patch}) {
    page {
      ...Page
    }
  }
}
    ${PageFragmentDoc}`;
export const useUpdatePageMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdatePageMutation, TError, UpdatePageMutationVariables, TContext>) =>
    useMutation<UpdatePageMutation, TError, UpdatePageMutationVariables, TContext>(
      ['UpdatePage'],
      (variables?: UpdatePageMutationVariables) => fetcher<UpdatePageMutation, UpdatePageMutationVariables>(UpdatePageDocument, variables)(),
      options
    );
useUpdatePageMutation.getKey = () => ['UpdatePage'];

useUpdatePageMutation.fetcher = (variables: UpdatePageMutationVariables, options?: RequestInit['headers']) => fetcher<UpdatePageMutation, UpdatePageMutationVariables>(UpdatePageDocument, variables, options);