/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type MenuQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type MenuQuery = { __typename?: 'Query', parameter: { __typename?: 'Parameter', paValue: string } | null };

export type ParameterListQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type ParameterListQuery = { __typename?: 'Query', parameters: { __typename?: 'ParametersConnection', totalCount: number, nodes: Array<{ __typename?: 'Parameter', paName: string, paValue: string }> } | null };

export type CreateParameterMutationVariables = Types.Exact<{
  input: Types.ParameterInput;
}>;


export type CreateParameterMutation = { __typename?: 'Mutation', createParameter: { __typename: 'CreateParameterPayload' } | null };

export type UpdateParameterMutationVariables = Types.Exact<{
  id: Types.Scalars['String'];
  value: Types.Scalars['String'];
}>;


export type UpdateParameterMutation = { __typename?: 'Mutation', updateParameter: { __typename: 'UpdateParameterPayload' } | null };

export type DeleteParameterMutationVariables = Types.Exact<{
  id: Types.Scalars['String'];
}>;


export type DeleteParameterMutation = { __typename?: 'Mutation', deleteParameter: { __typename: 'DeleteParameterPayload' } | null };


export const MenuDocument = `
    query Menu {
  parameter(paName: "menu") {
    paValue
  }
}
    `;
export const useMenuQuery = <
      TData = MenuQuery,
      TError = unknown
    >(
      variables?: MenuQueryVariables,
      options?: UseQueryOptions<MenuQuery, TError, TData>
    ) =>
    useQuery<MenuQuery, TError, TData>(
      variables === undefined ? ['Menu'] : ['Menu', variables],
      fetcher<MenuQuery, MenuQueryVariables>(MenuDocument, variables),
      options
    );

useMenuQuery.getKey = (variables?: MenuQueryVariables) => variables === undefined ? ['Menu'] : ['Menu', variables];
;

useMenuQuery.fetcher = (variables?: MenuQueryVariables, options?: RequestInit['headers']) => fetcher<MenuQuery, MenuQueryVariables>(MenuDocument, variables, options);
export const ParameterListDocument = `
    query ParameterList {
  parameters {
    totalCount
    nodes {
      paName
      paValue
    }
  }
}
    `;
export const useParameterListQuery = <
      TData = ParameterListQuery,
      TError = unknown
    >(
      variables?: ParameterListQueryVariables,
      options?: UseQueryOptions<ParameterListQuery, TError, TData>
    ) =>
    useQuery<ParameterListQuery, TError, TData>(
      variables === undefined ? ['ParameterList'] : ['ParameterList', variables],
      fetcher<ParameterListQuery, ParameterListQueryVariables>(ParameterListDocument, variables),
      options
    );

useParameterListQuery.getKey = (variables?: ParameterListQueryVariables) => variables === undefined ? ['ParameterList'] : ['ParameterList', variables];
;

useParameterListQuery.fetcher = (variables?: ParameterListQueryVariables, options?: RequestInit['headers']) => fetcher<ParameterListQuery, ParameterListQueryVariables>(ParameterListDocument, variables, options);
export const CreateParameterDocument = `
    mutation CreateParameter($input: ParameterInput!) {
  createParameter(input: {parameter: $input}) {
    __typename
  }
}
    `;
export const useCreateParameterMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateParameterMutation, TError, CreateParameterMutationVariables, TContext>) =>
    useMutation<CreateParameterMutation, TError, CreateParameterMutationVariables, TContext>(
      ['CreateParameter'],
      (variables?: CreateParameterMutationVariables) => fetcher<CreateParameterMutation, CreateParameterMutationVariables>(CreateParameterDocument, variables)(),
      options
    );
useCreateParameterMutation.getKey = () => ['CreateParameter'];

useCreateParameterMutation.fetcher = (variables: CreateParameterMutationVariables, options?: RequestInit['headers']) => fetcher<CreateParameterMutation, CreateParameterMutationVariables>(CreateParameterDocument, variables, options);
export const UpdateParameterDocument = `
    mutation UpdateParameter($id: String!, $value: String!) {
  updateParameter(input: {paName: $id, patch: {paValue: $value}}) {
    __typename
  }
}
    `;
export const useUpdateParameterMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateParameterMutation, TError, UpdateParameterMutationVariables, TContext>) =>
    useMutation<UpdateParameterMutation, TError, UpdateParameterMutationVariables, TContext>(
      ['UpdateParameter'],
      (variables?: UpdateParameterMutationVariables) => fetcher<UpdateParameterMutation, UpdateParameterMutationVariables>(UpdateParameterDocument, variables)(),
      options
    );
useUpdateParameterMutation.getKey = () => ['UpdateParameter'];

useUpdateParameterMutation.fetcher = (variables: UpdateParameterMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateParameterMutation, UpdateParameterMutationVariables>(UpdateParameterDocument, variables, options);
export const DeleteParameterDocument = `
    mutation DeleteParameter($id: String!) {
  deleteParameter(input: {paName: $id}) {
    __typename
  }
}
    `;
export const useDeleteParameterMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteParameterMutation, TError, DeleteParameterMutationVariables, TContext>) =>
    useMutation<DeleteParameterMutation, TError, DeleteParameterMutationVariables, TContext>(
      ['DeleteParameter'],
      (variables?: DeleteParameterMutationVariables) => fetcher<DeleteParameterMutation, DeleteParameterMutationVariables>(DeleteParameterDocument, variables)(),
      options
    );
useDeleteParameterMutation.getKey = () => ['DeleteParameter'];

useDeleteParameterMutation.fetcher = (variables: DeleteParameterMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteParameterMutation, DeleteParameterMutationVariables>(DeleteParameterDocument, variables, options);