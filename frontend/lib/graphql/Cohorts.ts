/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { UserPublicFragmentDoc } from './User';
import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type CohortBasicFragment = { __typename: 'Skupiny', sName: string, sLocation: string, sVisible: boolean, sColorRgb: string, ordering: number, id: string };

export type CohortFragment = { __typename: 'Skupiny', sDescription: string, internalInfo: string, cohortGroup: string | null, sName: string, sLocation: string, sVisible: boolean, sColorRgb: string, ordering: number, id: string };

export type CohortWithMembersFragment = { __typename: 'Skupiny', sDescription: string, internalInfo: string, cohortGroup: string | null, sName: string, sLocation: string, sVisible: boolean, sColorRgb: string, ordering: number, id: string, usersByUSkupina: { __typename?: 'UsersConnection', nodes: Array<{ __typename?: 'User', uJmeno: string, uPrijmeni: string, uRodneCislo: string | null, uTelefon: string, uEmail: string, id: string }> } };

export type CohortListQueryVariables = Types.Exact<{
  visible?: Types.InputMaybe<Types.Scalars['Boolean']>;
}>;


export type CohortListQuery = { __typename?: 'Query', skupinies: { __typename?: 'SkupiniesConnection', nodes: Array<{ __typename: 'Skupiny', sDescription: string, internalInfo: string, cohortGroup: string | null, sName: string, sLocation: string, sVisible: boolean, sColorRgb: string, ordering: number, id: string }> } | null };

export type CohortListWithMembersQueryVariables = Types.Exact<{
  visible?: Types.InputMaybe<Types.Scalars['Boolean']>;
}>;


export type CohortListWithMembersQuery = { __typename?: 'Query', skupinies: { __typename?: 'SkupiniesConnection', nodes: Array<{ __typename: 'Skupiny', sDescription: string, internalInfo: string, cohortGroup: string | null, sName: string, sLocation: string, sVisible: boolean, sColorRgb: string, ordering: number, id: string, usersByUSkupina: { __typename?: 'UsersConnection', nodes: Array<{ __typename?: 'User', uJmeno: string, uPrijmeni: string, uRodneCislo: string | null, uTelefon: string, uEmail: string, id: string }> } }> } | null };

export type CohortQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type CohortQuery = { __typename?: 'Query', skupiny: { __typename: 'Skupiny', sDescription: string, internalInfo: string, cohortGroup: string | null, sName: string, sLocation: string, sVisible: boolean, sColorRgb: string, ordering: number, id: string } | null };

export type CreateCohortMutationVariables = Types.Exact<{
  input: Types.SkupinyInput;
}>;


export type CreateCohortMutation = { __typename?: 'Mutation', createSkupiny: { __typename?: 'CreateSkupinyPayload', skupiny: { __typename?: 'Skupiny', id: string } | null } | null };

export type UpdateCohortMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.SkupinyPatch;
}>;


export type UpdateCohortMutation = { __typename?: 'Mutation', updateSkupiny: { __typename: 'UpdateSkupinyPayload' } | null };

export type DeleteCohortMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteCohortMutation = { __typename?: 'Mutation', deleteSkupiny: { __typename: 'DeleteSkupinyPayload' } | null };

export const CohortBasicFragmentDoc = `
    fragment CohortBasic on Skupiny {
  __typename
  id: sId
  sName
  sLocation
  sVisible
  sColorRgb
  ordering
}
    `;
export const CohortFragmentDoc = `
    fragment Cohort on Skupiny {
  ...CohortBasic
  __typename
  sDescription
  internalInfo
  cohortGroup
}
    ${CohortBasicFragmentDoc}`;
export const CohortWithMembersFragmentDoc = `
    fragment CohortWithMembers on Skupiny {
  ...Cohort
  usersByUSkupina(
    condition: {uBan: false, uSystem: false, uConfirmed: true}
    orderBy: [U_PRIJMENI_ASC, U_JMENO_ASC]
  ) {
    nodes {
      ...UserPublic
    }
  }
}
    ${CohortFragmentDoc}
${UserPublicFragmentDoc}`;
export const CohortListDocument = `
    query CohortList($visible: Boolean) {
  skupinies(condition: {sVisible: $visible}, orderBy: [ORDERING_ASC]) {
    nodes {
      ...Cohort
    }
  }
}
    ${CohortFragmentDoc}`;
export const useCohortListQuery = <
      TData = CohortListQuery,
      TError = unknown
    >(
      variables?: CohortListQueryVariables,
      options?: UseQueryOptions<CohortListQuery, TError, TData>
    ) =>
    useQuery<CohortListQuery, TError, TData>(
      variables === undefined ? ['CohortList'] : ['CohortList', variables],
      fetcher<CohortListQuery, CohortListQueryVariables>(CohortListDocument, variables),
      options
    );

useCohortListQuery.getKey = (variables?: CohortListQueryVariables) => variables === undefined ? ['CohortList'] : ['CohortList', variables];
;

useCohortListQuery.fetcher = (variables?: CohortListQueryVariables, options?: RequestInit['headers']) => fetcher<CohortListQuery, CohortListQueryVariables>(CohortListDocument, variables, options);
export const CohortListWithMembersDocument = `
    query CohortListWithMembers($visible: Boolean) {
  skupinies(condition: {sVisible: $visible}, orderBy: [ORDERING_ASC]) {
    nodes {
      ...CohortWithMembers
    }
  }
}
    ${CohortWithMembersFragmentDoc}`;
export const useCohortListWithMembersQuery = <
      TData = CohortListWithMembersQuery,
      TError = unknown
    >(
      variables?: CohortListWithMembersQueryVariables,
      options?: UseQueryOptions<CohortListWithMembersQuery, TError, TData>
    ) =>
    useQuery<CohortListWithMembersQuery, TError, TData>(
      variables === undefined ? ['CohortListWithMembers'] : ['CohortListWithMembers', variables],
      fetcher<CohortListWithMembersQuery, CohortListWithMembersQueryVariables>(CohortListWithMembersDocument, variables),
      options
    );

useCohortListWithMembersQuery.getKey = (variables?: CohortListWithMembersQueryVariables) => variables === undefined ? ['CohortListWithMembers'] : ['CohortListWithMembers', variables];
;

useCohortListWithMembersQuery.fetcher = (variables?: CohortListWithMembersQueryVariables, options?: RequestInit['headers']) => fetcher<CohortListWithMembersQuery, CohortListWithMembersQueryVariables>(CohortListWithMembersDocument, variables, options);
export const CohortDocument = `
    query Cohort($id: BigInt!) {
  skupiny(sId: $id) {
    ...Cohort
  }
}
    ${CohortFragmentDoc}`;
export const useCohortQuery = <
      TData = CohortQuery,
      TError = unknown
    >(
      variables: CohortQueryVariables,
      options?: UseQueryOptions<CohortQuery, TError, TData>
    ) =>
    useQuery<CohortQuery, TError, TData>(
      ['Cohort', variables],
      fetcher<CohortQuery, CohortQueryVariables>(CohortDocument, variables),
      options
    );

useCohortQuery.getKey = (variables: CohortQueryVariables) => ['Cohort', variables];
;

useCohortQuery.fetcher = (variables: CohortQueryVariables, options?: RequestInit['headers']) => fetcher<CohortQuery, CohortQueryVariables>(CohortDocument, variables, options);
export const CreateCohortDocument = `
    mutation CreateCohort($input: SkupinyInput!) {
  createSkupiny(input: {skupiny: $input}) {
    skupiny {
      id: sId
    }
  }
}
    `;
export const useCreateCohortMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateCohortMutation, TError, CreateCohortMutationVariables, TContext>) =>
    useMutation<CreateCohortMutation, TError, CreateCohortMutationVariables, TContext>(
      ['CreateCohort'],
      (variables?: CreateCohortMutationVariables) => fetcher<CreateCohortMutation, CreateCohortMutationVariables>(CreateCohortDocument, variables)(),
      options
    );
useCreateCohortMutation.getKey = () => ['CreateCohort'];

useCreateCohortMutation.fetcher = (variables: CreateCohortMutationVariables, options?: RequestInit['headers']) => fetcher<CreateCohortMutation, CreateCohortMutationVariables>(CreateCohortDocument, variables, options);
export const UpdateCohortDocument = `
    mutation UpdateCohort($id: BigInt!, $patch: SkupinyPatch!) {
  updateSkupiny(input: {sId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateCohortMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateCohortMutation, TError, UpdateCohortMutationVariables, TContext>) =>
    useMutation<UpdateCohortMutation, TError, UpdateCohortMutationVariables, TContext>(
      ['UpdateCohort'],
      (variables?: UpdateCohortMutationVariables) => fetcher<UpdateCohortMutation, UpdateCohortMutationVariables>(UpdateCohortDocument, variables)(),
      options
    );
useUpdateCohortMutation.getKey = () => ['UpdateCohort'];

useUpdateCohortMutation.fetcher = (variables: UpdateCohortMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateCohortMutation, UpdateCohortMutationVariables>(UpdateCohortDocument, variables, options);
export const DeleteCohortDocument = `
    mutation DeleteCohort($id: BigInt!) {
  deleteSkupiny(input: {sId: $id}) {
    __typename
  }
}
    `;
export const useDeleteCohortMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteCohortMutation, TError, DeleteCohortMutationVariables, TContext>) =>
    useMutation<DeleteCohortMutation, TError, DeleteCohortMutationVariables, TContext>(
      ['DeleteCohort'],
      (variables?: DeleteCohortMutationVariables) => fetcher<DeleteCohortMutation, DeleteCohortMutationVariables>(DeleteCohortDocument, variables)(),
      options
    );
useDeleteCohortMutation.getKey = () => ['DeleteCohort'];

useDeleteCohortMutation.fetcher = (variables: DeleteCohortMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteCohortMutation, DeleteCohortMutationVariables>(DeleteCohortDocument, variables, options);