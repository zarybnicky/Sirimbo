/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type AnnouncementFragment = { __typename: 'Upozorneni', upKdo: string | null, upLock: boolean, upNadpis: string, upText: string, upTimestamp: string | null, upTimestampAdd: string, scheduledSince: string | null, scheduledUntil: string | null, id: string, userByUpKdo: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, upozorneniSkupiniesByUpsIdRodic: { __typename?: 'UpozorneniSkupiniesConnection', nodes: Array<{ __typename?: 'UpozorneniSkupiny', skupinyByUpsIdSkupina: { __typename?: 'Skupiny', sName: string, sDescription: string, sColorText: string, sColorRgb: string, id: string } | null }> } };

export type MyAnnouncementsQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type MyAnnouncementsQuery = { __typename?: 'Query', myAnnouncements: { __typename?: 'UpozornenisConnection', totalCount: number, nodes: Array<{ __typename: 'Upozorneni', upKdo: string | null, upLock: boolean, upNadpis: string, upText: string, upTimestamp: string | null, upTimestampAdd: string, scheduledSince: string | null, scheduledUntil: string | null, id: string, userByUpKdo: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, upozorneniSkupiniesByUpsIdRodic: { __typename?: 'UpozorneniSkupiniesConnection', nodes: Array<{ __typename?: 'UpozorneniSkupiny', skupinyByUpsIdSkupina: { __typename?: 'Skupiny', sName: string, sDescription: string, sColorText: string, sColorRgb: string, id: string } | null }> } }> } | null };

export type AnnouncementListQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type AnnouncementListQuery = { __typename?: 'Query', upozornenis: { __typename?: 'UpozornenisConnection', totalCount: number, nodes: Array<{ __typename: 'Upozorneni', upKdo: string | null, upLock: boolean, upNadpis: string, upText: string, upTimestamp: string | null, upTimestampAdd: string, scheduledSince: string | null, scheduledUntil: string | null, id: string, userByUpKdo: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, upozorneniSkupiniesByUpsIdRodic: { __typename?: 'UpozorneniSkupiniesConnection', nodes: Array<{ __typename?: 'UpozorneniSkupiny', skupinyByUpsIdSkupina: { __typename?: 'Skupiny', sName: string, sDescription: string, sColorText: string, sColorRgb: string, id: string } | null }> } }> } | null };

export type AnnouncementQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type AnnouncementQuery = { __typename?: 'Query', upozorneni: { __typename: 'Upozorneni', upKdo: string | null, upLock: boolean, upNadpis: string, upText: string, upTimestamp: string | null, upTimestampAdd: string, scheduledSince: string | null, scheduledUntil: string | null, id: string, userByUpKdo: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, upozorneniSkupiniesByUpsIdRodic: { __typename?: 'UpozorneniSkupiniesConnection', nodes: Array<{ __typename?: 'UpozorneniSkupiny', skupinyByUpsIdSkupina: { __typename?: 'Skupiny', sName: string, sDescription: string, sColorText: string, sColorRgb: string, id: string } | null }> } } | null };

export type CreateAnnouncementMutationVariables = Types.Exact<{
  input: Types.UpozorneniInput;
}>;


export type CreateAnnouncementMutation = { __typename?: 'Mutation', createUpozorneni: { __typename?: 'CreateUpozorneniPayload', upozorneni: { __typename?: 'Upozorneni', id: string } | null } | null };

export type UpdateAnnouncementMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.UpozorneniPatch;
}>;


export type UpdateAnnouncementMutation = { __typename?: 'Mutation', updateUpozorneni: { __typename: 'UpdateUpozorneniPayload' } | null };

export type DeleteAnnouncementMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteAnnouncementMutation = { __typename?: 'Mutation', deleteUpozorneni: { __typename: 'DeleteUpozorneniPayload' } | null };

export const AnnouncementFragmentDoc = `
    fragment Announcement on Upozorneni {
  __typename
  id: upId
  upKdo
  upLock
  upNadpis
  upText
  upTimestamp
  upTimestampAdd
  userByUpKdo {
    id: uId
    uJmeno
    uPrijmeni
  }
  upozorneniSkupiniesByUpsIdRodic {
    nodes {
      skupinyByUpsIdSkupina {
        id: sId
        sName
        sDescription
        sColorText
        sColorRgb
      }
    }
  }
  scheduledSince
  scheduledUntil
}
    `;
export const MyAnnouncementsDocument = `
    query MyAnnouncements($limit: Int, $offset: Int) {
  myAnnouncements(first: $limit, offset: $offset) {
    totalCount
    nodes {
      ...Announcement
    }
  }
}
    ${AnnouncementFragmentDoc}`;
export const useMyAnnouncementsQuery = <
      TData = MyAnnouncementsQuery,
      TError = unknown
    >(
      variables?: MyAnnouncementsQueryVariables,
      options?: UseQueryOptions<MyAnnouncementsQuery, TError, TData>
    ) =>
    useQuery<MyAnnouncementsQuery, TError, TData>(
      variables === undefined ? ['MyAnnouncements'] : ['MyAnnouncements', variables],
      fetcher<MyAnnouncementsQuery, MyAnnouncementsQueryVariables>(MyAnnouncementsDocument, variables),
      options
    );

useMyAnnouncementsQuery.getKey = (variables?: MyAnnouncementsQueryVariables) => variables === undefined ? ['MyAnnouncements'] : ['MyAnnouncements', variables];
;

useMyAnnouncementsQuery.fetcher = (variables?: MyAnnouncementsQueryVariables, options?: RequestInit['headers']) => fetcher<MyAnnouncementsQuery, MyAnnouncementsQueryVariables>(MyAnnouncementsDocument, variables, options);
export const AnnouncementListDocument = `
    query AnnouncementList($limit: Int, $offset: Int) {
  upozornenis(first: $limit, offset: $offset, orderBy: [UP_TIMESTAMP_ADD_DESC]) {
    totalCount
    nodes {
      ...Announcement
    }
  }
}
    ${AnnouncementFragmentDoc}`;
export const useAnnouncementListQuery = <
      TData = AnnouncementListQuery,
      TError = unknown
    >(
      variables?: AnnouncementListQueryVariables,
      options?: UseQueryOptions<AnnouncementListQuery, TError, TData>
    ) =>
    useQuery<AnnouncementListQuery, TError, TData>(
      variables === undefined ? ['AnnouncementList'] : ['AnnouncementList', variables],
      fetcher<AnnouncementListQuery, AnnouncementListQueryVariables>(AnnouncementListDocument, variables),
      options
    );

useAnnouncementListQuery.getKey = (variables?: AnnouncementListQueryVariables) => variables === undefined ? ['AnnouncementList'] : ['AnnouncementList', variables];
;

useAnnouncementListQuery.fetcher = (variables?: AnnouncementListQueryVariables, options?: RequestInit['headers']) => fetcher<AnnouncementListQuery, AnnouncementListQueryVariables>(AnnouncementListDocument, variables, options);
export const AnnouncementDocument = `
    query Announcement($id: BigInt!) {
  upozorneni(upId: $id) {
    ...Announcement
  }
}
    ${AnnouncementFragmentDoc}`;
export const useAnnouncementQuery = <
      TData = AnnouncementQuery,
      TError = unknown
    >(
      variables: AnnouncementQueryVariables,
      options?: UseQueryOptions<AnnouncementQuery, TError, TData>
    ) =>
    useQuery<AnnouncementQuery, TError, TData>(
      ['Announcement', variables],
      fetcher<AnnouncementQuery, AnnouncementQueryVariables>(AnnouncementDocument, variables),
      options
    );

useAnnouncementQuery.getKey = (variables: AnnouncementQueryVariables) => ['Announcement', variables];
;

useAnnouncementQuery.fetcher = (variables: AnnouncementQueryVariables, options?: RequestInit['headers']) => fetcher<AnnouncementQuery, AnnouncementQueryVariables>(AnnouncementDocument, variables, options);
export const CreateAnnouncementDocument = `
    mutation CreateAnnouncement($input: UpozorneniInput!) {
  createUpozorneni(input: {upozorneni: $input}) {
    upozorneni {
      id: upId
    }
  }
}
    `;
export const useCreateAnnouncementMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateAnnouncementMutation, TError, CreateAnnouncementMutationVariables, TContext>) =>
    useMutation<CreateAnnouncementMutation, TError, CreateAnnouncementMutationVariables, TContext>(
      ['CreateAnnouncement'],
      (variables?: CreateAnnouncementMutationVariables) => fetcher<CreateAnnouncementMutation, CreateAnnouncementMutationVariables>(CreateAnnouncementDocument, variables)(),
      options
    );
useCreateAnnouncementMutation.getKey = () => ['CreateAnnouncement'];

useCreateAnnouncementMutation.fetcher = (variables: CreateAnnouncementMutationVariables, options?: RequestInit['headers']) => fetcher<CreateAnnouncementMutation, CreateAnnouncementMutationVariables>(CreateAnnouncementDocument, variables, options);
export const UpdateAnnouncementDocument = `
    mutation UpdateAnnouncement($id: BigInt!, $patch: UpozorneniPatch!) {
  updateUpozorneni(input: {upId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateAnnouncementMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateAnnouncementMutation, TError, UpdateAnnouncementMutationVariables, TContext>) =>
    useMutation<UpdateAnnouncementMutation, TError, UpdateAnnouncementMutationVariables, TContext>(
      ['UpdateAnnouncement'],
      (variables?: UpdateAnnouncementMutationVariables) => fetcher<UpdateAnnouncementMutation, UpdateAnnouncementMutationVariables>(UpdateAnnouncementDocument, variables)(),
      options
    );
useUpdateAnnouncementMutation.getKey = () => ['UpdateAnnouncement'];

useUpdateAnnouncementMutation.fetcher = (variables: UpdateAnnouncementMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateAnnouncementMutation, UpdateAnnouncementMutationVariables>(UpdateAnnouncementDocument, variables, options);
export const DeleteAnnouncementDocument = `
    mutation DeleteAnnouncement($id: BigInt!) {
  deleteUpozorneni(input: {upId: $id}) {
    __typename
  }
}
    `;
export const useDeleteAnnouncementMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteAnnouncementMutation, TError, DeleteAnnouncementMutationVariables, TContext>) =>
    useMutation<DeleteAnnouncementMutation, TError, DeleteAnnouncementMutationVariables, TContext>(
      ['DeleteAnnouncement'],
      (variables?: DeleteAnnouncementMutationVariables) => fetcher<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>(DeleteAnnouncementDocument, variables)(),
      options
    );
useDeleteAnnouncementMutation.getKey = () => ['DeleteAnnouncement'];

useDeleteAnnouncementMutation.fetcher = (variables: DeleteAnnouncementMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>(DeleteAnnouncementDocument, variables, options);