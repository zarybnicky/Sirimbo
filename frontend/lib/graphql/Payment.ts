/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type PaymentGroupFragment = { __typename: 'PlatbyGroup', pgName: string, pgType: any, pgDescription: string, pgBase: string, id: string };

export type PaymentGroupListQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type PaymentGroupListQuery = { __typename?: 'Query', platbyGroups: { __typename?: 'PlatbyGroupsConnection', totalCount: number, nodes: Array<{ __typename: 'PlatbyGroup', pgName: string, pgType: any, pgDescription: string, pgBase: string, id: string }> } | null };

export type PaymentGroupQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type PaymentGroupQuery = { __typename?: 'Query', platbyGroup: { __typename: 'PlatbyGroup', pgName: string, pgType: any, pgDescription: string, pgBase: string, id: string } | null };

export type CreatePaymentGroupMutationVariables = Types.Exact<{
  input: Types.PlatbyGroupInput;
}>;


export type CreatePaymentGroupMutation = { __typename?: 'Mutation', createPlatbyGroup: { __typename?: 'CreatePlatbyGroupPayload', platbyGroup: { __typename?: 'PlatbyGroup', id: string } | null } | null };

export type UpdatePaymentGroupMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.PlatbyGroupPatch;
}>;


export type UpdatePaymentGroupMutation = { __typename?: 'Mutation', updatePlatbyGroup: { __typename: 'UpdatePlatbyGroupPayload' } | null };

export type DeletePaymentGroupMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeletePaymentGroupMutation = { __typename?: 'Mutation', deletePlatbyGroup: { __typename: 'DeletePlatbyGroupPayload' } | null };

export type PaymentItemFragment = { __typename: 'PlatbyItem', piIdCategory: string, piIdRaw: string | null, piIdUser: string | null, piAmount: any, piPrefix: number, piDate: string, id: string, userByPiIdUser: { __typename?: 'User', uId: string, uJmeno: string, uPrijmeni: string } | null, platbyCategoryByPiIdCategory: { __typename?: 'PlatbyCategory', pcId: string, pcName: string } | null };

export type PaymentItemListQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type PaymentItemListQuery = { __typename?: 'Query', platbyItems: { __typename?: 'PlatbyItemsConnection', totalCount: number, nodes: Array<{ __typename: 'PlatbyItem', piIdCategory: string, piIdRaw: string | null, piIdUser: string | null, piAmount: any, piPrefix: number, piDate: string, id: string, userByPiIdUser: { __typename?: 'User', uId: string, uJmeno: string, uPrijmeni: string } | null, platbyCategoryByPiIdCategory: { __typename?: 'PlatbyCategory', pcId: string, pcName: string } | null }> } | null };

export type PaymentItemQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type PaymentItemQuery = { __typename?: 'Query', platbyItem: { __typename: 'PlatbyItem', piIdCategory: string, piIdRaw: string | null, piIdUser: string | null, piAmount: any, piPrefix: number, piDate: string, id: string, userByPiIdUser: { __typename?: 'User', uId: string, uJmeno: string, uPrijmeni: string } | null, platbyCategoryByPiIdCategory: { __typename?: 'PlatbyCategory', pcId: string, pcName: string } | null } | null };

export type CreatePaymentItemMutationVariables = Types.Exact<{
  input: Types.PlatbyItemInput;
}>;


export type CreatePaymentItemMutation = { __typename?: 'Mutation', createPlatbyItem: { __typename?: 'CreatePlatbyItemPayload', platbyItem: { __typename?: 'PlatbyItem', id: string } | null } | null };

export type UpdatePaymentItemMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.PlatbyItemPatch;
}>;


export type UpdatePaymentItemMutation = { __typename?: 'Mutation', updatePlatbyItem: { __typename: 'UpdatePlatbyItemPayload' } | null };

export type DeletePaymentItemMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeletePaymentItemMutation = { __typename?: 'Mutation', deletePlatbyItem: { __typename: 'DeletePlatbyItemPayload' } | null };

export type PaymentCategoryFragment = { __typename: 'PlatbyCategory', pcName: string, pcSymbol: string, pcAmount: any, pcDateDue: string, pcValidFrom: string, pcValidTo: string, pcUsePrefix: boolean, pcUseBase: boolean, pcArchive: boolean, pcVisible: boolean, id: string };

export type PaymentCategoryListQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type PaymentCategoryListQuery = { __typename?: 'Query', platbyCategories: { __typename?: 'PlatbyCategoriesConnection', totalCount: number, nodes: Array<{ __typename: 'PlatbyCategory', pcName: string, pcSymbol: string, pcAmount: any, pcDateDue: string, pcValidFrom: string, pcValidTo: string, pcUsePrefix: boolean, pcUseBase: boolean, pcArchive: boolean, pcVisible: boolean, id: string }> } | null };

export type PaymentCategoryQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type PaymentCategoryQuery = { __typename?: 'Query', platbyCategory: { __typename: 'PlatbyCategory', pcName: string, pcSymbol: string, pcAmount: any, pcDateDue: string, pcValidFrom: string, pcValidTo: string, pcUsePrefix: boolean, pcUseBase: boolean, pcArchive: boolean, pcVisible: boolean, id: string } | null };

export type CreatePaymentCategoryMutationVariables = Types.Exact<{
  input: Types.PlatbyCategoryInput;
}>;


export type CreatePaymentCategoryMutation = { __typename?: 'Mutation', createPlatbyCategory: { __typename?: 'CreatePlatbyCategoryPayload', platbyCategory: { __typename?: 'PlatbyCategory', id: string } | null } | null };

export type UpdatePaymentCategoryMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.PlatbyCategoryPatch;
}>;


export type UpdatePaymentCategoryMutation = { __typename?: 'Mutation', updatePlatbyCategory: { __typename: 'UpdatePlatbyCategoryPayload' } | null };

export type DeletePaymentCategoryMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeletePaymentCategoryMutation = { __typename?: 'Mutation', deletePlatbyCategory: { __typename: 'DeletePlatbyCategoryPayload' } | null };

export const PaymentGroupFragmentDoc = `
    fragment PaymentGroup on PlatbyGroup {
  __typename
  id: pgId
  pgName
  pgType
  pgDescription
  pgBase
}
    `;
export const PaymentItemFragmentDoc = `
    fragment PaymentItem on PlatbyItem {
  __typename
  id: piId
  piIdCategory
  piIdRaw
  piIdUser
  piAmount
  piPrefix
  piDate
  userByPiIdUser {
    uId
    uJmeno
    uPrijmeni
  }
  platbyCategoryByPiIdCategory {
    pcId
    pcName
  }
}
    `;
export const PaymentCategoryFragmentDoc = `
    fragment PaymentCategory on PlatbyCategory {
  __typename
  id: pcId
  pcName
  pcSymbol
  pcAmount
  pcDateDue
  pcValidFrom
  pcValidTo
  pcUsePrefix
  pcUseBase
  pcArchive
  pcVisible
}
    `;
export const PaymentGroupListDocument = `
    query PaymentGroupList {
  platbyGroups {
    totalCount
    nodes {
      ...PaymentGroup
    }
  }
}
    ${PaymentGroupFragmentDoc}`;
export const usePaymentGroupListQuery = <
      TData = PaymentGroupListQuery,
      TError = unknown
    >(
      variables?: PaymentGroupListQueryVariables,
      options?: UseQueryOptions<PaymentGroupListQuery, TError, TData>
    ) =>
    useQuery<PaymentGroupListQuery, TError, TData>(
      variables === undefined ? ['PaymentGroupList'] : ['PaymentGroupList', variables],
      fetcher<PaymentGroupListQuery, PaymentGroupListQueryVariables>(PaymentGroupListDocument, variables),
      options
    );

usePaymentGroupListQuery.getKey = (variables?: PaymentGroupListQueryVariables) => variables === undefined ? ['PaymentGroupList'] : ['PaymentGroupList', variables];
;

usePaymentGroupListQuery.fetcher = (variables?: PaymentGroupListQueryVariables, options?: RequestInit['headers']) => fetcher<PaymentGroupListQuery, PaymentGroupListQueryVariables>(PaymentGroupListDocument, variables, options);
export const PaymentGroupDocument = `
    query PaymentGroup($id: BigInt!) {
  platbyGroup(pgId: $id) {
    ...PaymentGroup
  }
}
    ${PaymentGroupFragmentDoc}`;
export const usePaymentGroupQuery = <
      TData = PaymentGroupQuery,
      TError = unknown
    >(
      variables: PaymentGroupQueryVariables,
      options?: UseQueryOptions<PaymentGroupQuery, TError, TData>
    ) =>
    useQuery<PaymentGroupQuery, TError, TData>(
      ['PaymentGroup', variables],
      fetcher<PaymentGroupQuery, PaymentGroupQueryVariables>(PaymentGroupDocument, variables),
      options
    );

usePaymentGroupQuery.getKey = (variables: PaymentGroupQueryVariables) => ['PaymentGroup', variables];
;

usePaymentGroupQuery.fetcher = (variables: PaymentGroupQueryVariables, options?: RequestInit['headers']) => fetcher<PaymentGroupQuery, PaymentGroupQueryVariables>(PaymentGroupDocument, variables, options);
export const CreatePaymentGroupDocument = `
    mutation CreatePaymentGroup($input: PlatbyGroupInput!) {
  createPlatbyGroup(input: {platbyGroup: $input}) {
    platbyGroup {
      id: pgId
    }
  }
}
    `;
export const useCreatePaymentGroupMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreatePaymentGroupMutation, TError, CreatePaymentGroupMutationVariables, TContext>) =>
    useMutation<CreatePaymentGroupMutation, TError, CreatePaymentGroupMutationVariables, TContext>(
      ['CreatePaymentGroup'],
      (variables?: CreatePaymentGroupMutationVariables) => fetcher<CreatePaymentGroupMutation, CreatePaymentGroupMutationVariables>(CreatePaymentGroupDocument, variables)(),
      options
    );
useCreatePaymentGroupMutation.getKey = () => ['CreatePaymentGroup'];

useCreatePaymentGroupMutation.fetcher = (variables: CreatePaymentGroupMutationVariables, options?: RequestInit['headers']) => fetcher<CreatePaymentGroupMutation, CreatePaymentGroupMutationVariables>(CreatePaymentGroupDocument, variables, options);
export const UpdatePaymentGroupDocument = `
    mutation UpdatePaymentGroup($id: BigInt!, $patch: PlatbyGroupPatch!) {
  updatePlatbyGroup(input: {pgId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdatePaymentGroupMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdatePaymentGroupMutation, TError, UpdatePaymentGroupMutationVariables, TContext>) =>
    useMutation<UpdatePaymentGroupMutation, TError, UpdatePaymentGroupMutationVariables, TContext>(
      ['UpdatePaymentGroup'],
      (variables?: UpdatePaymentGroupMutationVariables) => fetcher<UpdatePaymentGroupMutation, UpdatePaymentGroupMutationVariables>(UpdatePaymentGroupDocument, variables)(),
      options
    );
useUpdatePaymentGroupMutation.getKey = () => ['UpdatePaymentGroup'];

useUpdatePaymentGroupMutation.fetcher = (variables: UpdatePaymentGroupMutationVariables, options?: RequestInit['headers']) => fetcher<UpdatePaymentGroupMutation, UpdatePaymentGroupMutationVariables>(UpdatePaymentGroupDocument, variables, options);
export const DeletePaymentGroupDocument = `
    mutation DeletePaymentGroup($id: BigInt!) {
  deletePlatbyGroup(input: {pgId: $id}) {
    __typename
  }
}
    `;
export const useDeletePaymentGroupMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeletePaymentGroupMutation, TError, DeletePaymentGroupMutationVariables, TContext>) =>
    useMutation<DeletePaymentGroupMutation, TError, DeletePaymentGroupMutationVariables, TContext>(
      ['DeletePaymentGroup'],
      (variables?: DeletePaymentGroupMutationVariables) => fetcher<DeletePaymentGroupMutation, DeletePaymentGroupMutationVariables>(DeletePaymentGroupDocument, variables)(),
      options
    );
useDeletePaymentGroupMutation.getKey = () => ['DeletePaymentGroup'];

useDeletePaymentGroupMutation.fetcher = (variables: DeletePaymentGroupMutationVariables, options?: RequestInit['headers']) => fetcher<DeletePaymentGroupMutation, DeletePaymentGroupMutationVariables>(DeletePaymentGroupDocument, variables, options);
export const PaymentItemListDocument = `
    query PaymentItemList {
  platbyItems {
    totalCount
    nodes {
      ...PaymentItem
    }
  }
}
    ${PaymentItemFragmentDoc}`;
export const usePaymentItemListQuery = <
      TData = PaymentItemListQuery,
      TError = unknown
    >(
      variables?: PaymentItemListQueryVariables,
      options?: UseQueryOptions<PaymentItemListQuery, TError, TData>
    ) =>
    useQuery<PaymentItemListQuery, TError, TData>(
      variables === undefined ? ['PaymentItemList'] : ['PaymentItemList', variables],
      fetcher<PaymentItemListQuery, PaymentItemListQueryVariables>(PaymentItemListDocument, variables),
      options
    );

usePaymentItemListQuery.getKey = (variables?: PaymentItemListQueryVariables) => variables === undefined ? ['PaymentItemList'] : ['PaymentItemList', variables];
;

usePaymentItemListQuery.fetcher = (variables?: PaymentItemListQueryVariables, options?: RequestInit['headers']) => fetcher<PaymentItemListQuery, PaymentItemListQueryVariables>(PaymentItemListDocument, variables, options);
export const PaymentItemDocument = `
    query PaymentItem($id: BigInt!) {
  platbyItem(piId: $id) {
    ...PaymentItem
  }
}
    ${PaymentItemFragmentDoc}`;
export const usePaymentItemQuery = <
      TData = PaymentItemQuery,
      TError = unknown
    >(
      variables: PaymentItemQueryVariables,
      options?: UseQueryOptions<PaymentItemQuery, TError, TData>
    ) =>
    useQuery<PaymentItemQuery, TError, TData>(
      ['PaymentItem', variables],
      fetcher<PaymentItemQuery, PaymentItemQueryVariables>(PaymentItemDocument, variables),
      options
    );

usePaymentItemQuery.getKey = (variables: PaymentItemQueryVariables) => ['PaymentItem', variables];
;

usePaymentItemQuery.fetcher = (variables: PaymentItemQueryVariables, options?: RequestInit['headers']) => fetcher<PaymentItemQuery, PaymentItemQueryVariables>(PaymentItemDocument, variables, options);
export const CreatePaymentItemDocument = `
    mutation CreatePaymentItem($input: PlatbyItemInput!) {
  createPlatbyItem(input: {platbyItem: $input}) {
    platbyItem {
      id: piId
    }
  }
}
    `;
export const useCreatePaymentItemMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreatePaymentItemMutation, TError, CreatePaymentItemMutationVariables, TContext>) =>
    useMutation<CreatePaymentItemMutation, TError, CreatePaymentItemMutationVariables, TContext>(
      ['CreatePaymentItem'],
      (variables?: CreatePaymentItemMutationVariables) => fetcher<CreatePaymentItemMutation, CreatePaymentItemMutationVariables>(CreatePaymentItemDocument, variables)(),
      options
    );
useCreatePaymentItemMutation.getKey = () => ['CreatePaymentItem'];

useCreatePaymentItemMutation.fetcher = (variables: CreatePaymentItemMutationVariables, options?: RequestInit['headers']) => fetcher<CreatePaymentItemMutation, CreatePaymentItemMutationVariables>(CreatePaymentItemDocument, variables, options);
export const UpdatePaymentItemDocument = `
    mutation UpdatePaymentItem($id: BigInt!, $patch: PlatbyItemPatch!) {
  updatePlatbyItem(input: {piId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdatePaymentItemMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdatePaymentItemMutation, TError, UpdatePaymentItemMutationVariables, TContext>) =>
    useMutation<UpdatePaymentItemMutation, TError, UpdatePaymentItemMutationVariables, TContext>(
      ['UpdatePaymentItem'],
      (variables?: UpdatePaymentItemMutationVariables) => fetcher<UpdatePaymentItemMutation, UpdatePaymentItemMutationVariables>(UpdatePaymentItemDocument, variables)(),
      options
    );
useUpdatePaymentItemMutation.getKey = () => ['UpdatePaymentItem'];

useUpdatePaymentItemMutation.fetcher = (variables: UpdatePaymentItemMutationVariables, options?: RequestInit['headers']) => fetcher<UpdatePaymentItemMutation, UpdatePaymentItemMutationVariables>(UpdatePaymentItemDocument, variables, options);
export const DeletePaymentItemDocument = `
    mutation DeletePaymentItem($id: BigInt!) {
  deletePlatbyItem(input: {piId: $id}) {
    __typename
  }
}
    `;
export const useDeletePaymentItemMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeletePaymentItemMutation, TError, DeletePaymentItemMutationVariables, TContext>) =>
    useMutation<DeletePaymentItemMutation, TError, DeletePaymentItemMutationVariables, TContext>(
      ['DeletePaymentItem'],
      (variables?: DeletePaymentItemMutationVariables) => fetcher<DeletePaymentItemMutation, DeletePaymentItemMutationVariables>(DeletePaymentItemDocument, variables)(),
      options
    );
useDeletePaymentItemMutation.getKey = () => ['DeletePaymentItem'];

useDeletePaymentItemMutation.fetcher = (variables: DeletePaymentItemMutationVariables, options?: RequestInit['headers']) => fetcher<DeletePaymentItemMutation, DeletePaymentItemMutationVariables>(DeletePaymentItemDocument, variables, options);
export const PaymentCategoryListDocument = `
    query PaymentCategoryList {
  platbyCategories {
    totalCount
    nodes {
      ...PaymentCategory
    }
  }
}
    ${PaymentCategoryFragmentDoc}`;
export const usePaymentCategoryListQuery = <
      TData = PaymentCategoryListQuery,
      TError = unknown
    >(
      variables?: PaymentCategoryListQueryVariables,
      options?: UseQueryOptions<PaymentCategoryListQuery, TError, TData>
    ) =>
    useQuery<PaymentCategoryListQuery, TError, TData>(
      variables === undefined ? ['PaymentCategoryList'] : ['PaymentCategoryList', variables],
      fetcher<PaymentCategoryListQuery, PaymentCategoryListQueryVariables>(PaymentCategoryListDocument, variables),
      options
    );

usePaymentCategoryListQuery.getKey = (variables?: PaymentCategoryListQueryVariables) => variables === undefined ? ['PaymentCategoryList'] : ['PaymentCategoryList', variables];
;

usePaymentCategoryListQuery.fetcher = (variables?: PaymentCategoryListQueryVariables, options?: RequestInit['headers']) => fetcher<PaymentCategoryListQuery, PaymentCategoryListQueryVariables>(PaymentCategoryListDocument, variables, options);
export const PaymentCategoryDocument = `
    query PaymentCategory($id: BigInt!) {
  platbyCategory(pcId: $id) {
    ...PaymentCategory
  }
}
    ${PaymentCategoryFragmentDoc}`;
export const usePaymentCategoryQuery = <
      TData = PaymentCategoryQuery,
      TError = unknown
    >(
      variables: PaymentCategoryQueryVariables,
      options?: UseQueryOptions<PaymentCategoryQuery, TError, TData>
    ) =>
    useQuery<PaymentCategoryQuery, TError, TData>(
      ['PaymentCategory', variables],
      fetcher<PaymentCategoryQuery, PaymentCategoryQueryVariables>(PaymentCategoryDocument, variables),
      options
    );

usePaymentCategoryQuery.getKey = (variables: PaymentCategoryQueryVariables) => ['PaymentCategory', variables];
;

usePaymentCategoryQuery.fetcher = (variables: PaymentCategoryQueryVariables, options?: RequestInit['headers']) => fetcher<PaymentCategoryQuery, PaymentCategoryQueryVariables>(PaymentCategoryDocument, variables, options);
export const CreatePaymentCategoryDocument = `
    mutation CreatePaymentCategory($input: PlatbyCategoryInput!) {
  createPlatbyCategory(input: {platbyCategory: $input}) {
    platbyCategory {
      id: pcId
    }
  }
}
    `;
export const useCreatePaymentCategoryMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreatePaymentCategoryMutation, TError, CreatePaymentCategoryMutationVariables, TContext>) =>
    useMutation<CreatePaymentCategoryMutation, TError, CreatePaymentCategoryMutationVariables, TContext>(
      ['CreatePaymentCategory'],
      (variables?: CreatePaymentCategoryMutationVariables) => fetcher<CreatePaymentCategoryMutation, CreatePaymentCategoryMutationVariables>(CreatePaymentCategoryDocument, variables)(),
      options
    );
useCreatePaymentCategoryMutation.getKey = () => ['CreatePaymentCategory'];

useCreatePaymentCategoryMutation.fetcher = (variables: CreatePaymentCategoryMutationVariables, options?: RequestInit['headers']) => fetcher<CreatePaymentCategoryMutation, CreatePaymentCategoryMutationVariables>(CreatePaymentCategoryDocument, variables, options);
export const UpdatePaymentCategoryDocument = `
    mutation UpdatePaymentCategory($id: BigInt!, $patch: PlatbyCategoryPatch!) {
  updatePlatbyCategory(input: {pcId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdatePaymentCategoryMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdatePaymentCategoryMutation, TError, UpdatePaymentCategoryMutationVariables, TContext>) =>
    useMutation<UpdatePaymentCategoryMutation, TError, UpdatePaymentCategoryMutationVariables, TContext>(
      ['UpdatePaymentCategory'],
      (variables?: UpdatePaymentCategoryMutationVariables) => fetcher<UpdatePaymentCategoryMutation, UpdatePaymentCategoryMutationVariables>(UpdatePaymentCategoryDocument, variables)(),
      options
    );
useUpdatePaymentCategoryMutation.getKey = () => ['UpdatePaymentCategory'];

useUpdatePaymentCategoryMutation.fetcher = (variables: UpdatePaymentCategoryMutationVariables, options?: RequestInit['headers']) => fetcher<UpdatePaymentCategoryMutation, UpdatePaymentCategoryMutationVariables>(UpdatePaymentCategoryDocument, variables, options);
export const DeletePaymentCategoryDocument = `
    mutation DeletePaymentCategory($id: BigInt!) {
  deletePlatbyCategory(input: {pcId: $id}) {
    __typename
  }
}
    `;
export const useDeletePaymentCategoryMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeletePaymentCategoryMutation, TError, DeletePaymentCategoryMutationVariables, TContext>) =>
    useMutation<DeletePaymentCategoryMutation, TError, DeletePaymentCategoryMutationVariables, TContext>(
      ['DeletePaymentCategory'],
      (variables?: DeletePaymentCategoryMutationVariables) => fetcher<DeletePaymentCategoryMutation, DeletePaymentCategoryMutationVariables>(DeletePaymentCategoryDocument, variables)(),
      options
    );
useDeletePaymentCategoryMutation.getKey = () => ['DeletePaymentCategory'];

useDeletePaymentCategoryMutation.fetcher = (variables: DeletePaymentCategoryMutationVariables, options?: RequestInit['headers']) => fetcher<DeletePaymentCategoryMutation, DeletePaymentCategoryMutationVariables>(DeletePaymentCategoryDocument, variables, options);