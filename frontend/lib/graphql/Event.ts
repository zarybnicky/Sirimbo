/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type EventFragment = { __typename: 'Akce', aOd: string, aDo: string, aInfo: string, aDokumenty: string, aJmeno: string, aKapacita: string, aKde: string, aLock: boolean, aTimestamp: string | null, aVisible: boolean, id: string };

export type EventWithItemsFragment = { __typename: 'Akce', aOd: string, aDo: string, aInfo: string, aDokumenty: string, aJmeno: string, aKapacita: string, aKde: string, aLock: boolean, aTimestamp: string | null, aVisible: boolean, id: string, akceItemsByAiIdRodic: { __typename?: 'AkceItemsConnection', totalCount: number, nodes: Array<{ __typename: 'AkceItem', id: string, userByAiUser: { __typename?: 'User', uId: string, uJmeno: string, uPrijmeni: string } | null }> } };

export type EventItemFragment = { __typename: 'AkceItem', id: string, userByAiUser: { __typename?: 'User', uJmeno: string, uPrijmeni: string, uRodneCislo: string | null, uTelefon: string, uEmail: string } | null };

export type EventParticipantsQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type EventParticipantsQuery = { __typename?: 'Query', akce: { __typename?: 'Akce', aId: string, aJmeno: string, id: string, akceItemsByAiIdRodic: { __typename?: 'AkceItemsConnection', nodes: Array<{ __typename: 'AkceItem', id: string, userByAiUser: { __typename?: 'User', uJmeno: string, uPrijmeni: string, uRodneCislo: string | null, uTelefon: string, uEmail: string } | null }> } } | null };

export type EventListQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
  visible?: Types.InputMaybe<Types.Scalars['Boolean']>;
}>;


export type EventListQuery = { __typename?: 'Query', akces: { __typename?: 'AkcesConnection', totalCount: number, nodes: Array<{ __typename: 'Akce', aOd: string, aDo: string, aInfo: string, aDokumenty: string, aJmeno: string, aKapacita: string, aKde: string, aLock: boolean, aTimestamp: string | null, aVisible: boolean, id: string, akceItemsByAiIdRodic: { __typename?: 'AkceItemsConnection', totalCount: number, nodes: Array<{ __typename: 'AkceItem', id: string, userByAiUser: { __typename?: 'User', uId: string, uJmeno: string, uPrijmeni: string } | null }> } }> } | null };

export type EventQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type EventQuery = { __typename?: 'Query', akce: { __typename: 'Akce', aOd: string, aDo: string, aInfo: string, aDokumenty: string, aJmeno: string, aKapacita: string, aKde: string, aLock: boolean, aTimestamp: string | null, aVisible: boolean, id: string } | null };

export type ToggleEventVisibleMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  visible: Types.Scalars['Boolean'];
}>;


export type ToggleEventVisibleMutation = { __typename?: 'Mutation', updateAkce: { __typename?: 'UpdateAkcePayload', akce: { __typename?: 'Akce', aId: string } | null } | null };

export type CreateEventMutationVariables = Types.Exact<{
  input: Types.AkceInput;
}>;


export type CreateEventMutation = { __typename?: 'Mutation', createAkce: { __typename?: 'CreateAkcePayload', akce: { __typename?: 'Akce', id: string } | null } | null };

export type UpdateEventMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.AkcePatch;
}>;


export type UpdateEventMutation = { __typename?: 'Mutation', updateAkce: { __typename: 'UpdateAkcePayload' } | null };

export type DeleteEventMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteEventMutation = { __typename?: 'Mutation', deleteAkce: { __typename: 'DeleteAkcePayload' } | null };

export const EventFragmentDoc = `
    fragment Event on Akce {
  __typename
  id: aId
  aOd
  aDo
  aInfo
  aDokumenty
  aJmeno
  aKapacita
  aKde
  aLock
  aTimestamp
  aVisible
}
    `;
export const EventWithItemsFragmentDoc = `
    fragment EventWithItems on Akce {
  ...Event
  akceItemsByAiIdRodic {
    totalCount
    nodes {
      __typename
      id: aiId
      userByAiUser {
        uId
        uJmeno
        uPrijmeni
      }
    }
  }
}
    ${EventFragmentDoc}`;
export const EventItemFragmentDoc = `
    fragment EventItem on AkceItem {
  __typename
  id: aiId
  userByAiUser {
    uJmeno
    uPrijmeni
    uRodneCislo
    uTelefon
    uEmail
  }
}
    `;
export const EventParticipantsDocument = `
    query EventParticipants($id: BigInt!) {
  akce(aId: $id) {
    id: aId
    aId
    aJmeno
    akceItemsByAiIdRodic {
      nodes {
        ...EventItem
      }
    }
  }
}
    ${EventItemFragmentDoc}`;
export const useEventParticipantsQuery = <
      TData = EventParticipantsQuery,
      TError = unknown
    >(
      variables: EventParticipantsQueryVariables,
      options?: UseQueryOptions<EventParticipantsQuery, TError, TData>
    ) =>
    useQuery<EventParticipantsQuery, TError, TData>(
      ['EventParticipants', variables],
      fetcher<EventParticipantsQuery, EventParticipantsQueryVariables>(EventParticipantsDocument, variables),
      options
    );

useEventParticipantsQuery.getKey = (variables: EventParticipantsQueryVariables) => ['EventParticipants', variables];
;

useEventParticipantsQuery.fetcher = (variables: EventParticipantsQueryVariables, options?: RequestInit['headers']) => fetcher<EventParticipantsQuery, EventParticipantsQueryVariables>(EventParticipantsDocument, variables, options);
export const EventListDocument = `
    query EventList($limit: Int, $offset: Int, $visible: Boolean) {
  akces(
    first: $limit
    offset: $offset
    orderBy: [A_OD_DESC]
    condition: {aVisible: $visible}
  ) {
    totalCount
    nodes {
      ...EventWithItems
    }
  }
}
    ${EventWithItemsFragmentDoc}`;
export const useEventListQuery = <
      TData = EventListQuery,
      TError = unknown
    >(
      variables?: EventListQueryVariables,
      options?: UseQueryOptions<EventListQuery, TError, TData>
    ) =>
    useQuery<EventListQuery, TError, TData>(
      variables === undefined ? ['EventList'] : ['EventList', variables],
      fetcher<EventListQuery, EventListQueryVariables>(EventListDocument, variables),
      options
    );

useEventListQuery.getKey = (variables?: EventListQueryVariables) => variables === undefined ? ['EventList'] : ['EventList', variables];
;

useEventListQuery.fetcher = (variables?: EventListQueryVariables, options?: RequestInit['headers']) => fetcher<EventListQuery, EventListQueryVariables>(EventListDocument, variables, options);
export const EventDocument = `
    query Event($id: BigInt!) {
  akce(aId: $id) {
    ...Event
  }
}
    ${EventFragmentDoc}`;
export const useEventQuery = <
      TData = EventQuery,
      TError = unknown
    >(
      variables: EventQueryVariables,
      options?: UseQueryOptions<EventQuery, TError, TData>
    ) =>
    useQuery<EventQuery, TError, TData>(
      ['Event', variables],
      fetcher<EventQuery, EventQueryVariables>(EventDocument, variables),
      options
    );

useEventQuery.getKey = (variables: EventQueryVariables) => ['Event', variables];
;

useEventQuery.fetcher = (variables: EventQueryVariables, options?: RequestInit['headers']) => fetcher<EventQuery, EventQueryVariables>(EventDocument, variables, options);
export const ToggleEventVisibleDocument = `
    mutation ToggleEventVisible($id: BigInt!, $visible: Boolean!) {
  updateAkce(input: {aId: $id, patch: {aVisible: $visible}}) {
    akce {
      aId
    }
  }
}
    `;
export const useToggleEventVisibleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ToggleEventVisibleMutation, TError, ToggleEventVisibleMutationVariables, TContext>) =>
    useMutation<ToggleEventVisibleMutation, TError, ToggleEventVisibleMutationVariables, TContext>(
      ['ToggleEventVisible'],
      (variables?: ToggleEventVisibleMutationVariables) => fetcher<ToggleEventVisibleMutation, ToggleEventVisibleMutationVariables>(ToggleEventVisibleDocument, variables)(),
      options
    );
useToggleEventVisibleMutation.getKey = () => ['ToggleEventVisible'];

useToggleEventVisibleMutation.fetcher = (variables: ToggleEventVisibleMutationVariables, options?: RequestInit['headers']) => fetcher<ToggleEventVisibleMutation, ToggleEventVisibleMutationVariables>(ToggleEventVisibleDocument, variables, options);
export const CreateEventDocument = `
    mutation CreateEvent($input: AkceInput!) {
  createAkce(input: {akce: $input}) {
    akce {
      id: aId
    }
  }
}
    `;
export const useCreateEventMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateEventMutation, TError, CreateEventMutationVariables, TContext>) =>
    useMutation<CreateEventMutation, TError, CreateEventMutationVariables, TContext>(
      ['CreateEvent'],
      (variables?: CreateEventMutationVariables) => fetcher<CreateEventMutation, CreateEventMutationVariables>(CreateEventDocument, variables)(),
      options
    );
useCreateEventMutation.getKey = () => ['CreateEvent'];

useCreateEventMutation.fetcher = (variables: CreateEventMutationVariables, options?: RequestInit['headers']) => fetcher<CreateEventMutation, CreateEventMutationVariables>(CreateEventDocument, variables, options);
export const UpdateEventDocument = `
    mutation UpdateEvent($id: BigInt!, $patch: AkcePatch!) {
  updateAkce(input: {aId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateEventMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateEventMutation, TError, UpdateEventMutationVariables, TContext>) =>
    useMutation<UpdateEventMutation, TError, UpdateEventMutationVariables, TContext>(
      ['UpdateEvent'],
      (variables?: UpdateEventMutationVariables) => fetcher<UpdateEventMutation, UpdateEventMutationVariables>(UpdateEventDocument, variables)(),
      options
    );
useUpdateEventMutation.getKey = () => ['UpdateEvent'];

useUpdateEventMutation.fetcher = (variables: UpdateEventMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateEventMutation, UpdateEventMutationVariables>(UpdateEventDocument, variables, options);
export const DeleteEventDocument = `
    mutation DeleteEvent($id: BigInt!) {
  deleteAkce(input: {aId: $id}) {
    __typename
  }
}
    `;
export const useDeleteEventMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteEventMutation, TError, DeleteEventMutationVariables, TContext>) =>
    useMutation<DeleteEventMutation, TError, DeleteEventMutationVariables, TContext>(
      ['DeleteEvent'],
      (variables?: DeleteEventMutationVariables) => fetcher<DeleteEventMutation, DeleteEventMutationVariables>(DeleteEventDocument, variables)(),
      options
    );
useDeleteEventMutation.getKey = () => ['DeleteEvent'];

useDeleteEventMutation.fetcher = (variables: DeleteEventMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteEventMutation, DeleteEventMutationVariables>(DeleteEventDocument, variables, options);