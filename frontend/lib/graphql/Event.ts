/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type EventFragment = { __typename: 'Event', id: string, since: string, until: string, summary: string, description: string, filesLegacy: string, name: string, capacity: string, remainingSpots: number | null, locationText: string, isLocked: boolean, isVisible: boolean, isPublic: boolean, enableNotes: boolean };

export type EventItemFragment = { __typename?: 'AttendeeUser', id: string, notes: string, user: { __typename?: 'User', uJmeno: string, uPrijmeni: string, uRodneCislo: string | null, uTelefon: string, uEmail: string } | null };

export type EventWithItemsFragment = { __typename: 'Event', id: string, since: string, until: string, summary: string, description: string, filesLegacy: string, name: string, capacity: string, remainingSpots: number | null, locationText: string, isLocked: boolean, isVisible: boolean, isPublic: boolean, enableNotes: boolean, attendeeExternals: { __typename?: 'AttendeeExternalsConnection', nodes: Array<{ __typename?: 'AttendeeExternal', firstName: string, lastName: string }> }, attendeeUsers: { __typename?: 'AttendeeUsersConnection', nodes: Array<{ __typename?: 'AttendeeUser', notes: string, user: { __typename?: 'User', uId: string, uJmeno: string, uPrijmeni: string, uNarozeni: string, uTelefon: string, uEmail: string, uRodneCislo: string | null } | null }> } };

export type EventQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type EventQuery = { __typename?: 'Query', event: { __typename: 'Event', id: string, since: string, until: string, summary: string, description: string, filesLegacy: string, name: string, capacity: string, remainingSpots: number | null, locationText: string, isLocked: boolean, isVisible: boolean, isPublic: boolean, enableNotes: boolean, attendeeExternals: { __typename?: 'AttendeeExternalsConnection', nodes: Array<{ __typename?: 'AttendeeExternal', firstName: string, lastName: string }> }, attendeeUsers: { __typename?: 'AttendeeUsersConnection', nodes: Array<{ __typename?: 'AttendeeUser', notes: string, user: { __typename?: 'User', uId: string, uJmeno: string, uPrijmeni: string, uNarozeni: string, uTelefon: string, uEmail: string, uRodneCislo: string | null } | null }> } } | null };

export type EventListQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
  visible?: Types.InputMaybe<Types.Scalars['Boolean']>;
}>;


export type EventListQuery = { __typename?: 'Query', events: { __typename?: 'EventsConnection', totalCount: number, nodes: Array<{ __typename: 'Event', id: string, since: string, until: string, summary: string, description: string, filesLegacy: string, name: string, capacity: string, remainingSpots: number | null, locationText: string, isLocked: boolean, isVisible: boolean, isPublic: boolean, enableNotes: boolean, attendeeExternals: { __typename?: 'AttendeeExternalsConnection', nodes: Array<{ __typename?: 'AttendeeExternal', firstName: string, lastName: string }> }, attendeeUsers: { __typename?: 'AttendeeUsersConnection', nodes: Array<{ __typename?: 'AttendeeUser', notes: string, user: { __typename?: 'User', uId: string, uJmeno: string, uPrijmeni: string, uNarozeni: string, uTelefon: string, uEmail: string, uRodneCislo: string | null } | null }> } }> } | null };

export type ToggleEventVisibleMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  visible: Types.Scalars['Boolean'];
}>;


export type ToggleEventVisibleMutation = { __typename?: 'Mutation', updateEvent: { __typename?: 'UpdateEventPayload', event: { __typename?: 'Event', id: string } | null } | null };

export type CreateEventMutationVariables = Types.Exact<{
  input: Types.EventInput;
}>;


export type CreateEventMutation = { __typename?: 'Mutation', createEvent: { __typename?: 'CreateEventPayload', event: { __typename?: 'Event', id: string } | null } | null };

export type UpdateEventMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.EventPatch;
}>;


export type UpdateEventMutation = { __typename?: 'Mutation', updateEvent: { __typename: 'UpdateEventPayload' } | null };

export type DeleteEventMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteEventMutation = { __typename?: 'Mutation', deleteEvent: { __typename: 'DeleteEventPayload' } | null };

export type MyEventFragment = { __typename: 'Event', id: string, since: string, until: string, summary: string, description: string, filesLegacy: string, name: string, capacity: string, remainingSpots: number | null, locationText: string, isLocked: boolean, isVisible: boolean, isPublic: boolean, enableNotes: boolean, attendeeExternals: { __typename?: 'AttendeeExternalsConnection', nodes: Array<{ __typename?: 'AttendeeExternal', firstName: string, lastName: string }> }, attendeeUsers: { __typename?: 'AttendeeUsersConnection', nodes: Array<{ __typename?: 'AttendeeUser', notes: string, user: { __typename?: 'User', uId: string, uJmeno: string, uPrijmeni: string, uNarozeni: string, uTelefon: string, uEmail: string, uRodneCislo: string | null } | null }> } };

export type MyEventsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type MyEventsQuery = { __typename?: 'Query', events: { __typename?: 'EventsConnection', nodes: Array<{ __typename: 'Event', id: string, since: string, until: string, summary: string, description: string, filesLegacy: string, name: string, capacity: string, remainingSpots: number | null, locationText: string, isLocked: boolean, isVisible: boolean, isPublic: boolean, enableNotes: boolean, attendeeExternals: { __typename?: 'AttendeeExternalsConnection', nodes: Array<{ __typename?: 'AttendeeExternal', firstName: string, lastName: string }> }, attendeeUsers: { __typename?: 'AttendeeUsersConnection', nodes: Array<{ __typename?: 'AttendeeUser', notes: string, user: { __typename?: 'User', uId: string, uJmeno: string, uPrijmeni: string, uNarozeni: string, uTelefon: string, uEmail: string, uRodneCislo: string | null } | null }> } }> } | null };

export type CreateParticipationMutationVariables = Types.Exact<{
  input: Types.CreateParticipationInput;
}>;


export type CreateParticipationMutation = { __typename?: 'Mutation', createParticipation: { __typename: 'CreateParticipationPayload' } | null };

export type CancelParticipationMutationVariables = Types.Exact<{
  input: Types.CancelParticipationInput;
}>;


export type CancelParticipationMutation = { __typename?: 'Mutation', cancelParticipation: { __typename: 'CancelParticipationPayload' } | null };

export const EventItemFragmentDoc = `
    fragment EventItem on AttendeeUser {
  id
  notes
  user {
    uJmeno
    uPrijmeni
    uRodneCislo
    uTelefon
    uEmail
  }
}
    `;
export const EventFragmentDoc = `
    fragment Event on Event {
  __typename
  id
  since
  until
  summary
  description
  filesLegacy
  name
  capacity
  remainingSpots
  locationText
  isLocked
  isVisible
  isPublic
  enableNotes
}
    `;
export const EventWithItemsFragmentDoc = `
    fragment EventWithItems on Event {
  ...Event
  attendeeExternals {
    nodes {
      firstName
      lastName
    }
  }
  attendeeUsers {
    nodes {
      notes
      user {
        uId
        uJmeno
        uPrijmeni
        uNarozeni
        uTelefon
        uEmail
        uRodneCislo
      }
    }
  }
}
    ${EventFragmentDoc}`;
export const MyEventFragmentDoc = `
    fragment MyEvent on Event {
  ...EventWithItems
}
    ${EventWithItemsFragmentDoc}`;
export const EventDocument = `
    query Event($id: BigInt!) {
  event(id: $id) {
    ...EventWithItems
  }
}
    ${EventWithItemsFragmentDoc}`;
export const useEventQuery = <
      TData = EventQuery,
      TError = unknown
    >(
      variables: EventQueryVariables,
      options?: UseQueryOptions<EventQuery, TError, TData>
    ) =>
    useQuery<EventQuery, TError, TData>(
      ['Event', variables],
      fetcher<EventQuery, EventQueryVariables>(EventDocument, variables),
      options
    );

useEventQuery.getKey = (variables: EventQueryVariables) => ['Event', variables];
;

useEventQuery.fetcher = (variables: EventQueryVariables, options?: RequestInit['headers']) => fetcher<EventQuery, EventQueryVariables>(EventDocument, variables, options);
export const EventListDocument = `
    query EventList($limit: Int, $offset: Int, $visible: Boolean) {
  events(
    first: $limit
    offset: $offset
    orderBy: [SINCE_DESC]
    condition: {isVisible: $visible}
  ) {
    totalCount
    nodes {
      ...EventWithItems
    }
  }
}
    ${EventWithItemsFragmentDoc}`;
export const useEventListQuery = <
      TData = EventListQuery,
      TError = unknown
    >(
      variables?: EventListQueryVariables,
      options?: UseQueryOptions<EventListQuery, TError, TData>
    ) =>
    useQuery<EventListQuery, TError, TData>(
      variables === undefined ? ['EventList'] : ['EventList', variables],
      fetcher<EventListQuery, EventListQueryVariables>(EventListDocument, variables),
      options
    );

useEventListQuery.getKey = (variables?: EventListQueryVariables) => variables === undefined ? ['EventList'] : ['EventList', variables];
;

useEventListQuery.fetcher = (variables?: EventListQueryVariables, options?: RequestInit['headers']) => fetcher<EventListQuery, EventListQueryVariables>(EventListDocument, variables, options);
export const ToggleEventVisibleDocument = `
    mutation ToggleEventVisible($id: BigInt!, $visible: Boolean!) {
  updateEvent(input: {id: $id, patch: {isVisible: $visible}}) {
    event {
      id
    }
  }
}
    `;
export const useToggleEventVisibleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ToggleEventVisibleMutation, TError, ToggleEventVisibleMutationVariables, TContext>) =>
    useMutation<ToggleEventVisibleMutation, TError, ToggleEventVisibleMutationVariables, TContext>(
      ['ToggleEventVisible'],
      (variables?: ToggleEventVisibleMutationVariables) => fetcher<ToggleEventVisibleMutation, ToggleEventVisibleMutationVariables>(ToggleEventVisibleDocument, variables)(),
      options
    );
useToggleEventVisibleMutation.getKey = () => ['ToggleEventVisible'];

useToggleEventVisibleMutation.fetcher = (variables: ToggleEventVisibleMutationVariables, options?: RequestInit['headers']) => fetcher<ToggleEventVisibleMutation, ToggleEventVisibleMutationVariables>(ToggleEventVisibleDocument, variables, options);
export const CreateEventDocument = `
    mutation CreateEvent($input: EventInput!) {
  createEvent(input: {event: $input}) {
    event {
      id
    }
  }
}
    `;
export const useCreateEventMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateEventMutation, TError, CreateEventMutationVariables, TContext>) =>
    useMutation<CreateEventMutation, TError, CreateEventMutationVariables, TContext>(
      ['CreateEvent'],
      (variables?: CreateEventMutationVariables) => fetcher<CreateEventMutation, CreateEventMutationVariables>(CreateEventDocument, variables)(),
      options
    );
useCreateEventMutation.getKey = () => ['CreateEvent'];

useCreateEventMutation.fetcher = (variables: CreateEventMutationVariables, options?: RequestInit['headers']) => fetcher<CreateEventMutation, CreateEventMutationVariables>(CreateEventDocument, variables, options);
export const UpdateEventDocument = `
    mutation UpdateEvent($id: BigInt!, $patch: EventPatch!) {
  updateEvent(input: {id: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateEventMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateEventMutation, TError, UpdateEventMutationVariables, TContext>) =>
    useMutation<UpdateEventMutation, TError, UpdateEventMutationVariables, TContext>(
      ['UpdateEvent'],
      (variables?: UpdateEventMutationVariables) => fetcher<UpdateEventMutation, UpdateEventMutationVariables>(UpdateEventDocument, variables)(),
      options
    );
useUpdateEventMutation.getKey = () => ['UpdateEvent'];

useUpdateEventMutation.fetcher = (variables: UpdateEventMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateEventMutation, UpdateEventMutationVariables>(UpdateEventDocument, variables, options);
export const DeleteEventDocument = `
    mutation DeleteEvent($id: BigInt!) {
  deleteEvent(input: {id: $id}) {
    __typename
  }
}
    `;
export const useDeleteEventMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteEventMutation, TError, DeleteEventMutationVariables, TContext>) =>
    useMutation<DeleteEventMutation, TError, DeleteEventMutationVariables, TContext>(
      ['DeleteEvent'],
      (variables?: DeleteEventMutationVariables) => fetcher<DeleteEventMutation, DeleteEventMutationVariables>(DeleteEventDocument, variables)(),
      options
    );
useDeleteEventMutation.getKey = () => ['DeleteEvent'];

useDeleteEventMutation.fetcher = (variables: DeleteEventMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteEventMutation, DeleteEventMutationVariables>(DeleteEventDocument, variables, options);
export const MyEventsDocument = `
    query MyEvents {
  events(condition: {isVisible: true}, orderBy: [SINCE_ASC]) {
    nodes {
      ...MyEvent
    }
  }
}
    ${MyEventFragmentDoc}`;
export const useMyEventsQuery = <
      TData = MyEventsQuery,
      TError = unknown
    >(
      variables?: MyEventsQueryVariables,
      options?: UseQueryOptions<MyEventsQuery, TError, TData>
    ) =>
    useQuery<MyEventsQuery, TError, TData>(
      variables === undefined ? ['MyEvents'] : ['MyEvents', variables],
      fetcher<MyEventsQuery, MyEventsQueryVariables>(MyEventsDocument, variables),
      options
    );

useMyEventsQuery.getKey = (variables?: MyEventsQueryVariables) => variables === undefined ? ['MyEvents'] : ['MyEvents', variables];
;

useMyEventsQuery.fetcher = (variables?: MyEventsQueryVariables, options?: RequestInit['headers']) => fetcher<MyEventsQuery, MyEventsQueryVariables>(MyEventsDocument, variables, options);
export const CreateParticipationDocument = `
    mutation CreateParticipation($input: CreateParticipationInput!) {
  createParticipation(input: $input) {
    __typename
  }
}
    `;
export const useCreateParticipationMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateParticipationMutation, TError, CreateParticipationMutationVariables, TContext>) =>
    useMutation<CreateParticipationMutation, TError, CreateParticipationMutationVariables, TContext>(
      ['CreateParticipation'],
      (variables?: CreateParticipationMutationVariables) => fetcher<CreateParticipationMutation, CreateParticipationMutationVariables>(CreateParticipationDocument, variables)(),
      options
    );
useCreateParticipationMutation.getKey = () => ['CreateParticipation'];

useCreateParticipationMutation.fetcher = (variables: CreateParticipationMutationVariables, options?: RequestInit['headers']) => fetcher<CreateParticipationMutation, CreateParticipationMutationVariables>(CreateParticipationDocument, variables, options);
export const CancelParticipationDocument = `
    mutation CancelParticipation($input: CancelParticipationInput!) {
  cancelParticipation(input: $input) {
    __typename
  }
}
    `;
export const useCancelParticipationMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CancelParticipationMutation, TError, CancelParticipationMutationVariables, TContext>) =>
    useMutation<CancelParticipationMutation, TError, CancelParticipationMutationVariables, TContext>(
      ['CancelParticipation'],
      (variables?: CancelParticipationMutationVariables) => fetcher<CancelParticipationMutation, CancelParticipationMutationVariables>(CancelParticipationDocument, variables)(),
      options
    );
useCancelParticipationMutation.getKey = () => ['CancelParticipation'];

useCancelParticipationMutation.fetcher = (variables: CancelParticipationMutationVariables, options?: RequestInit['headers']) => fetcher<CancelParticipationMutation, CancelParticipationMutationVariables>(CancelParticipationDocument, variables, options);