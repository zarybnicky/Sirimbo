/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type TenantFragment = { __typename?: 'Tenant', id: string, name: string, memberInfo: { [key: string]: any }, locationsByTenant: { __typename?: 'LocationsConnection', nodes: Array<{ __typename?: 'Location', id: string, name: string, description: { [key: string]: any } }> } };

export type CurrentTenantQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type CurrentTenantQuery = { __typename?: 'Query', getCurrentTenant: { __typename?: 'Tenant', id: string, name: string, memberInfo: { [key: string]: any }, locationsByTenant: { __typename?: 'LocationsConnection', nodes: Array<{ __typename?: 'Location', id: string, name: string, description: { [key: string]: any } }> } } | null };

export type UpdateTenantMutationVariables = Types.Exact<{
  input: Types.UpdateTenantInput;
}>;


export type UpdateTenantMutation = { __typename?: 'Mutation', updateTenant: { __typename: 'UpdateTenantPayload' } | null };

export const TenantFragmentDoc = `
    fragment Tenant on Tenant {
  id
  name
  memberInfo
  locationsByTenant {
    nodes {
      id
      name
      description
    }
  }
}
    `;
export const CurrentTenantDocument = `
    query CurrentTenant {
  getCurrentTenant {
    ...Tenant
  }
}
    ${TenantFragmentDoc}`;
export const useCurrentTenantQuery = <
      TData = CurrentTenantQuery,
      TError = unknown
    >(
      variables?: CurrentTenantQueryVariables,
      options?: UseQueryOptions<CurrentTenantQuery, TError, TData>
    ) =>
    useQuery<CurrentTenantQuery, TError, TData>(
      variables === undefined ? ['CurrentTenant'] : ['CurrentTenant', variables],
      fetcher<CurrentTenantQuery, CurrentTenantQueryVariables>(CurrentTenantDocument, variables),
      options
    );

useCurrentTenantQuery.getKey = (variables?: CurrentTenantQueryVariables) => variables === undefined ? ['CurrentTenant'] : ['CurrentTenant', variables];
;

useCurrentTenantQuery.fetcher = (variables?: CurrentTenantQueryVariables, options?: RequestInit['headers']) => fetcher<CurrentTenantQuery, CurrentTenantQueryVariables>(CurrentTenantDocument, variables, options);
export const UpdateTenantDocument = `
    mutation UpdateTenant($input: UpdateTenantInput!) {
  updateTenant(input: $input) {
    __typename
  }
}
    `;
export const useUpdateTenantMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateTenantMutation, TError, UpdateTenantMutationVariables, TContext>) =>
    useMutation<UpdateTenantMutation, TError, UpdateTenantMutationVariables, TContext>(
      ['UpdateTenant'],
      (variables?: UpdateTenantMutationVariables) => fetcher<UpdateTenantMutation, UpdateTenantMutationVariables>(UpdateTenantDocument, variables)(),
      options
    );
useUpdateTenantMutation.getKey = () => ['UpdateTenant'];

useUpdateTenantMutation.fetcher = (variables: UpdateTenantMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateTenantMutation, UpdateTenantMutationVariables>(UpdateTenantDocument, variables, options);