/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type ActiveProspectsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type ActiveProspectsQuery = { __typename?: 'Query', activeProspects: { __typename?: 'ActiveProspectsConnection', totalCount: number, nodes: Array<{ __typename?: 'ActiveProspectsRecord', id: string | null, cohort: Types.CrmCohort | null, updatedAt: string | null, data: { __typename?: 'ProspectDatum', name: string | null, surname: string | null, email: string | null, phone: string | null, yearofbirth: string | null } | null }> } | null };

export type SubmitProspectFormMutationVariables = Types.Exact<{
  cohort: Types.CrmCohort;
  origin: Types.Scalars['String'];
  prospectData: Types.ProspectDatumInput;
}>;


export type SubmitProspectFormMutation = { __typename?: 'Mutation', prospectFormDancer: { __typename?: 'ProspectFormDancerPayload', clientMutationId: string | null } | null };


export const ActiveProspectsDocument = `
    query ActiveProspects {
  activeProspects {
    totalCount
    nodes {
      id
      data {
        name
        surname
        email
        phone
        yearofbirth
      }
      cohort
      updatedAt
    }
  }
}
    `;
export const useActiveProspectsQuery = <
      TData = ActiveProspectsQuery,
      TError = unknown
    >(
      variables?: ActiveProspectsQueryVariables,
      options?: UseQueryOptions<ActiveProspectsQuery, TError, TData>
    ) =>
    useQuery<ActiveProspectsQuery, TError, TData>(
      variables === undefined ? ['ActiveProspects'] : ['ActiveProspects', variables],
      fetcher<ActiveProspectsQuery, ActiveProspectsQueryVariables>(ActiveProspectsDocument, variables),
      options
    );

useActiveProspectsQuery.getKey = (variables?: ActiveProspectsQueryVariables) => variables === undefined ? ['ActiveProspects'] : ['ActiveProspects', variables];
;

useActiveProspectsQuery.fetcher = (variables?: ActiveProspectsQueryVariables, options?: RequestInit['headers']) => fetcher<ActiveProspectsQuery, ActiveProspectsQueryVariables>(ActiveProspectsDocument, variables, options);
export const SubmitProspectFormDocument = `
    mutation SubmitProspectForm($cohort: CrmCohort!, $origin: String!, $prospectData: ProspectDatumInput!) {
  prospectFormDancer(
    input: {cohort: $cohort, origin: $origin, prospectData: $prospectData, note: ""}
  ) {
    clientMutationId
  }
}
    `;
export const useSubmitProspectFormMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SubmitProspectFormMutation, TError, SubmitProspectFormMutationVariables, TContext>) =>
    useMutation<SubmitProspectFormMutation, TError, SubmitProspectFormMutationVariables, TContext>(
      ['SubmitProspectForm'],
      (variables?: SubmitProspectFormMutationVariables) => fetcher<SubmitProspectFormMutation, SubmitProspectFormMutationVariables>(SubmitProspectFormDocument, variables)(),
      options
    );
useSubmitProspectFormMutation.getKey = () => ['SubmitProspectForm'];

useSubmitProspectFormMutation.fetcher = (variables: SubmitProspectFormMutationVariables, options?: RequestInit['headers']) => fetcher<SubmitProspectFormMutation, SubmitProspectFormMutationVariables>(SubmitProspectFormDocument, variables, options);