/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type FormResponsesQueryVariables = Types.Exact<{
  type?: Types.InputMaybe<Types.Scalars['String']>;
}>;


export type FormResponsesQuery = { __typename?: 'Query', formResponses: { __typename?: 'FormResponsesConnection', totalCount: number, nodes: Array<{ __typename?: 'FormResponse', id: string, data: { [key: string]: any }, type: string, url: string, createdAt: string }> } | null };

export type SubmitFormMutationVariables = Types.Exact<{
  type: Types.Scalars['String'];
  url: Types.Scalars['String'];
  data: Types.Scalars['JSON'];
}>;


export type SubmitFormMutation = { __typename?: 'Mutation', submitForm: { __typename?: 'SubmitFormPayload', clientMutationId: string | null } | null };


export const FormResponsesDocument = `
    query FormResponses($type: String) {
  formResponses(condition: {type: $type}, orderBy: UPDATED_AT_DESC) {
    totalCount
    nodes {
      id
      data
      type
      url
      createdAt
    }
  }
}
    `;
export const useFormResponsesQuery = <
      TData = FormResponsesQuery,
      TError = unknown
    >(
      variables?: FormResponsesQueryVariables,
      options?: UseQueryOptions<FormResponsesQuery, TError, TData>
    ) =>
    useQuery<FormResponsesQuery, TError, TData>(
      variables === undefined ? ['FormResponses'] : ['FormResponses', variables],
      fetcher<FormResponsesQuery, FormResponsesQueryVariables>(FormResponsesDocument, variables),
      options
    );

useFormResponsesQuery.getKey = (variables?: FormResponsesQueryVariables) => variables === undefined ? ['FormResponses'] : ['FormResponses', variables];
;

useFormResponsesQuery.fetcher = (variables?: FormResponsesQueryVariables, options?: RequestInit['headers']) => fetcher<FormResponsesQuery, FormResponsesQueryVariables>(FormResponsesDocument, variables, options);
export const SubmitFormDocument = `
    mutation SubmitForm($type: String!, $url: String!, $data: JSON!) {
  submitForm(input: {type: $type, url: $url, data: $data}) {
    clientMutationId
  }
}
    `;
export const useSubmitFormMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SubmitFormMutation, TError, SubmitFormMutationVariables, TContext>) =>
    useMutation<SubmitFormMutation, TError, SubmitFormMutationVariables, TContext>(
      ['SubmitForm'],
      (variables?: SubmitFormMutationVariables) => fetcher<SubmitFormMutation, SubmitFormMutationVariables>(SubmitFormDocument, variables)(),
      options
    );
useSubmitFormMutation.getKey = () => ['SubmitForm'];

useSubmitFormMutation.fetcher = (variables: SubmitFormMutationVariables, options?: RequestInit['headers']) => fetcher<SubmitFormMutation, SubmitFormMutationVariables>(SubmitFormDocument, variables, options);