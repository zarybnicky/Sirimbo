/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type CohortGroupFragment = { __typename: 'CohortGroup', id: string, name: string, description: string, isPublic: boolean, ordering: number };

export type CohortGroupListQueryVariables = Types.Exact<{
  isPublic?: Types.InputMaybe<Types.Scalars['Boolean']>;
}>;


export type CohortGroupListQuery = { __typename?: 'Query', cohortGroups: { __typename?: 'CohortGroupsConnection', nodes: Array<{ __typename: 'CohortGroup', id: string, name: string, description: string, isPublic: boolean, ordering: number }> } | null };

export type CohortGroupQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type CohortGroupQuery = { __typename?: 'Query', cohortGroup: { __typename: 'CohortGroup', id: string, name: string, description: string, isPublic: boolean, ordering: number } | null };

export type CreateCohortGroupMutationVariables = Types.Exact<{
  input: Types.CohortGroupInput;
}>;


export type CreateCohortGroupMutation = { __typename?: 'Mutation', createCohortGroup: { __typename?: 'CreateCohortGroupPayload', cohortGroup: { __typename?: 'CohortGroup', id: string } | null } | null };

export type UpdateCohortGroupMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.CohortGroupPatch;
}>;


export type UpdateCohortGroupMutation = { __typename?: 'Mutation', updateCohortGroup: { __typename: 'UpdateCohortGroupPayload' } | null };

export type DeleteCohortGroupMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteCohortGroupMutation = { __typename?: 'Mutation', deleteCohortGroup: { __typename: 'DeleteCohortGroupPayload' } | null };

export const CohortGroupFragmentDoc = `
    fragment CohortGroup on CohortGroup {
  __typename
  id
  name
  description
  isPublic
  ordering
}
    `;
export const CohortGroupListDocument = `
    query CohortGroupList($isPublic: Boolean) {
  cohortGroups(condition: {isPublic: $isPublic}, orderBy: [ORDERING_ASC]) {
    nodes {
      ...CohortGroup
    }
  }
}
    ${CohortGroupFragmentDoc}`;
export const useCohortGroupListQuery = <
      TData = CohortGroupListQuery,
      TError = unknown
    >(
      variables?: CohortGroupListQueryVariables,
      options?: UseQueryOptions<CohortGroupListQuery, TError, TData>
    ) =>
    useQuery<CohortGroupListQuery, TError, TData>(
      variables === undefined ? ['CohortGroupList'] : ['CohortGroupList', variables],
      fetcher<CohortGroupListQuery, CohortGroupListQueryVariables>(CohortGroupListDocument, variables),
      options
    );

useCohortGroupListQuery.getKey = (variables?: CohortGroupListQueryVariables) => variables === undefined ? ['CohortGroupList'] : ['CohortGroupList', variables];
;

useCohortGroupListQuery.fetcher = (variables?: CohortGroupListQueryVariables, options?: RequestInit['headers']) => fetcher<CohortGroupListQuery, CohortGroupListQueryVariables>(CohortGroupListDocument, variables, options);
export const CohortGroupDocument = `
    query CohortGroup($id: BigInt!) {
  cohortGroup(id: $id) {
    ...CohortGroup
  }
}
    ${CohortGroupFragmentDoc}`;
export const useCohortGroupQuery = <
      TData = CohortGroupQuery,
      TError = unknown
    >(
      variables: CohortGroupQueryVariables,
      options?: UseQueryOptions<CohortGroupQuery, TError, TData>
    ) =>
    useQuery<CohortGroupQuery, TError, TData>(
      ['CohortGroup', variables],
      fetcher<CohortGroupQuery, CohortGroupQueryVariables>(CohortGroupDocument, variables),
      options
    );

useCohortGroupQuery.getKey = (variables: CohortGroupQueryVariables) => ['CohortGroup', variables];
;

useCohortGroupQuery.fetcher = (variables: CohortGroupQueryVariables, options?: RequestInit['headers']) => fetcher<CohortGroupQuery, CohortGroupQueryVariables>(CohortGroupDocument, variables, options);
export const CreateCohortGroupDocument = `
    mutation CreateCohortGroup($input: CohortGroupInput!) {
  createCohortGroup(input: {cohortGroup: $input}) {
    cohortGroup {
      id
    }
  }
}
    `;
export const useCreateCohortGroupMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateCohortGroupMutation, TError, CreateCohortGroupMutationVariables, TContext>) =>
    useMutation<CreateCohortGroupMutation, TError, CreateCohortGroupMutationVariables, TContext>(
      ['CreateCohortGroup'],
      (variables?: CreateCohortGroupMutationVariables) => fetcher<CreateCohortGroupMutation, CreateCohortGroupMutationVariables>(CreateCohortGroupDocument, variables)(),
      options
    );
useCreateCohortGroupMutation.getKey = () => ['CreateCohortGroup'];

useCreateCohortGroupMutation.fetcher = (variables: CreateCohortGroupMutationVariables, options?: RequestInit['headers']) => fetcher<CreateCohortGroupMutation, CreateCohortGroupMutationVariables>(CreateCohortGroupDocument, variables, options);
export const UpdateCohortGroupDocument = `
    mutation UpdateCohortGroup($id: BigInt!, $patch: CohortGroupPatch!) {
  updateCohortGroup(input: {id: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateCohortGroupMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateCohortGroupMutation, TError, UpdateCohortGroupMutationVariables, TContext>) =>
    useMutation<UpdateCohortGroupMutation, TError, UpdateCohortGroupMutationVariables, TContext>(
      ['UpdateCohortGroup'],
      (variables?: UpdateCohortGroupMutationVariables) => fetcher<UpdateCohortGroupMutation, UpdateCohortGroupMutationVariables>(UpdateCohortGroupDocument, variables)(),
      options
    );
useUpdateCohortGroupMutation.getKey = () => ['UpdateCohortGroup'];

useUpdateCohortGroupMutation.fetcher = (variables: UpdateCohortGroupMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateCohortGroupMutation, UpdateCohortGroupMutationVariables>(UpdateCohortGroupDocument, variables, options);
export const DeleteCohortGroupDocument = `
    mutation DeleteCohortGroup($id: BigInt!) {
  deleteCohortGroup(input: {id: $id}) {
    __typename
  }
}
    `;
export const useDeleteCohortGroupMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteCohortGroupMutation, TError, DeleteCohortGroupMutationVariables, TContext>) =>
    useMutation<DeleteCohortGroupMutation, TError, DeleteCohortGroupMutationVariables, TContext>(
      ['DeleteCohortGroup'],
      (variables?: DeleteCohortGroupMutationVariables) => fetcher<DeleteCohortGroupMutation, DeleteCohortGroupMutationVariables>(DeleteCohortGroupDocument, variables)(),
      options
    );
useDeleteCohortGroupMutation.getKey = () => ['DeleteCohortGroup'];

useDeleteCohortGroupMutation.fetcher = (variables: DeleteCohortGroupMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteCohortGroupMutation, DeleteCohortGroupMutationVariables>(DeleteCohortGroupDocument, variables, options);