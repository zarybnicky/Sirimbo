/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { CouplePartialFragmentDoc } from './Couple';
import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type ScheduleBasicFragment = { __typename: 'Rozpi', rDatum: string, rKde: string, rLock: boolean, rTrener: string, rVisible: boolean, id: string, userByRTrener: { __typename?: 'User', uJmeno: string, uPrijmeni: string, fullName: string | null, id: string } | null };

export type ScheduleItemBasicFragment = { __typename: 'RozpisItem', riOd: string, riDo: string, riLock: boolean, riPartner: string | null, id: string, paryByRiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null };

export type ScheduleItemFragment = { __typename: 'RozpisItem', riOd: string, riDo: string, riLock: boolean, riPartner: string | null, id: string, rozpiByRiIdRodic: { __typename: 'Rozpi', rDatum: string, rKde: string, rLock: boolean, rTrener: string, rVisible: boolean, id: string, userByRTrener: { __typename?: 'User', uJmeno: string, uPrijmeni: string, fullName: string | null, id: string } | null } | null, paryByRiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null };

export type ScheduleFragment = { __typename: 'Rozpi', rDatum: string, rKde: string, rLock: boolean, rTrener: string, rVisible: boolean, id: string, rozpisItemsByRiIdRodic: { __typename?: 'RozpisItemsConnection', nodes: Array<{ __typename: 'RozpisItem', riOd: string, riDo: string, riLock: boolean, riPartner: string | null, id: string, paryByRiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null }> }, userByRTrener: { __typename?: 'User', uJmeno: string, uPrijmeni: string, fullName: string | null, id: string } | null };

export type ScheduleRangeQueryVariables = Types.Exact<{
  startDate: Types.Scalars['Date'];
  endDate: Types.Scalars['Date'];
}>;


export type ScheduleRangeQuery = { __typename?: 'Query', schedulesForRange: { __typename?: 'RozpisConnection', nodes: Array<{ __typename: 'Rozpi', rDatum: string, rKde: string, rLock: boolean, rTrener: string, rVisible: boolean, id: string, rozpisItemsByRiIdRodic: { __typename?: 'RozpisItemsConnection', nodes: Array<{ __typename: 'RozpisItem', riOd: string, riDo: string, riLock: boolean, riPartner: string | null, id: string, paryByRiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null }> }, userByRTrener: { __typename?: 'User', uJmeno: string, uPrijmeni: string, fullName: string | null, id: string } | null }> } | null };

export type ScheduleListQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type ScheduleListQuery = { __typename?: 'Query', rozpis: { __typename?: 'RozpisConnection', totalCount: number, nodes: Array<{ __typename: 'Rozpi', rDatum: string, rKde: string, rLock: boolean, rTrener: string, rVisible: boolean, id: string, rozpisItemsByRiIdRodic: { __typename?: 'RozpisItemsConnection', nodes: Array<{ __typename: 'RozpisItem', riOd: string, riDo: string, riLock: boolean, riPartner: string | null, id: string, paryByRiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null }> }, userByRTrener: { __typename?: 'User', uJmeno: string, uPrijmeni: string, fullName: string | null, id: string } | null }> } | null };

export type MyLessonsQueryVariables = Types.Exact<{
  startDate?: Types.InputMaybe<Types.Scalars['Date']>;
  endDate?: Types.InputMaybe<Types.Scalars['Date']>;
}>;


export type MyLessonsQuery = { __typename?: 'Query', currentSessionId: string | null, currentUserId: string | null, currentCoupleIds: { __typename?: 'CurrentCoupleIdsConnection', nodes: Array<string | null> } | null, myLessons: { __typename?: 'RozpisItemsConnection', nodes: Array<{ __typename: 'RozpisItem', riOd: string, riDo: string, riLock: boolean, riPartner: string | null, id: string, rozpiByRiIdRodic: { __typename: 'Rozpi', rDatum: string, rKde: string, rLock: boolean, rTrener: string, rVisible: boolean, id: string, userByRTrener: { __typename?: 'User', uJmeno: string, uPrijmeni: string, fullName: string | null, id: string } | null } | null, paryByRiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null }> } | null };

export type ScheduleQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type ScheduleQuery = { __typename?: 'Query', rozpi: { __typename: 'Rozpi', rDatum: string, rKde: string, rLock: boolean, rTrener: string, rVisible: boolean, id: string, rozpisItemsByRiIdRodic: { __typename?: 'RozpisItemsConnection', nodes: Array<{ __typename: 'RozpisItem', riOd: string, riDo: string, riLock: boolean, riPartner: string | null, id: string, paryByRiPartner: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null }> }, userByRTrener: { __typename?: 'User', uJmeno: string, uPrijmeni: string, fullName: string | null, id: string } | null } | null };

export type ToggleScheduleVisibleMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  visible: Types.Scalars['Boolean'];
}>;


export type ToggleScheduleVisibleMutation = { __typename?: 'Mutation', updateRozpi: { __typename?: 'UpdateRozpiPayload', rozpi: { __typename?: 'Rozpi', id: string } | null } | null };

export type CreateScheduleMutationVariables = Types.Exact<{
  input: Types.RozpiInput;
}>;


export type CreateScheduleMutation = { __typename?: 'Mutation', createRozpi: { __typename?: 'CreateRozpiPayload', rozpi: { __typename?: 'Rozpi', id: string } | null } | null };

export type UpdateScheduleMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.RozpiPatch;
}>;


export type UpdateScheduleMutation = { __typename?: 'Mutation', updateRozpi: { __typename: 'UpdateRozpiPayload' } | null };

export type DeleteScheduleMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteScheduleMutation = { __typename?: 'Mutation', deleteRozpi: { __typename: 'DeleteRozpiPayload' } | null };

export type BookLessonMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type BookLessonMutation = { __typename?: 'Mutation', bookLesson: { __typename: 'BookLessonPayload' } | null };

export type CancelLessonMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type CancelLessonMutation = { __typename?: 'Mutation', cancelLesson: { __typename: 'CancelLessonPayload' } | null };

export const ScheduleItemBasicFragmentDoc = `
    fragment ScheduleItemBasic on RozpisItem {
  __typename
  riOd
  riDo
  id: riId
  riLock
  riPartner
  paryByRiPartner {
    ...CouplePartial
  }
}
    ${CouplePartialFragmentDoc}`;
export const ScheduleBasicFragmentDoc = `
    fragment ScheduleBasic on Rozpi {
  __typename
  rDatum
  id: rId
  rKde
  rLock
  rTrener
  rVisible
  userByRTrener {
    id: uId
    uJmeno
    uPrijmeni
    fullName
  }
}
    `;
export const ScheduleItemFragmentDoc = `
    fragment ScheduleItem on RozpisItem {
  ...ScheduleItemBasic
  rozpiByRiIdRodic {
    ...ScheduleBasic
  }
}
    ${ScheduleItemBasicFragmentDoc}
${ScheduleBasicFragmentDoc}`;
export const ScheduleFragmentDoc = `
    fragment Schedule on Rozpi {
  ...ScheduleBasic
  rozpisItemsByRiIdRodic(orderBy: [RI_OD_ASC]) {
    nodes {
      ...ScheduleItemBasic
    }
  }
}
    ${ScheduleBasicFragmentDoc}
${ScheduleItemBasicFragmentDoc}`;
export const ScheduleRangeDocument = `
    query ScheduleRange($startDate: Date!, $endDate: Date!) {
  schedulesForRange(startDate: $startDate, endDate: $endDate) {
    nodes {
      ...Schedule
    }
  }
}
    ${ScheduleFragmentDoc}`;
export const useScheduleRangeQuery = <
      TData = ScheduleRangeQuery,
      TError = unknown
    >(
      variables: ScheduleRangeQueryVariables,
      options?: UseQueryOptions<ScheduleRangeQuery, TError, TData>
    ) =>
    useQuery<ScheduleRangeQuery, TError, TData>(
      ['ScheduleRange', variables],
      fetcher<ScheduleRangeQuery, ScheduleRangeQueryVariables>(ScheduleRangeDocument, variables),
      options
    );

useScheduleRangeQuery.getKey = (variables: ScheduleRangeQueryVariables) => ['ScheduleRange', variables];
;

useScheduleRangeQuery.fetcher = (variables: ScheduleRangeQueryVariables, options?: RequestInit['headers']) => fetcher<ScheduleRangeQuery, ScheduleRangeQueryVariables>(ScheduleRangeDocument, variables, options);
export const ScheduleListDocument = `
    query ScheduleList($limit: Int, $offset: Int) {
  rozpis(first: $limit, offset: $offset, orderBy: [R_DATUM_DESC]) {
    totalCount
    nodes {
      ...Schedule
    }
  }
}
    ${ScheduleFragmentDoc}`;
export const useScheduleListQuery = <
      TData = ScheduleListQuery,
      TError = unknown
    >(
      variables?: ScheduleListQueryVariables,
      options?: UseQueryOptions<ScheduleListQuery, TError, TData>
    ) =>
    useQuery<ScheduleListQuery, TError, TData>(
      variables === undefined ? ['ScheduleList'] : ['ScheduleList', variables],
      fetcher<ScheduleListQuery, ScheduleListQueryVariables>(ScheduleListDocument, variables),
      options
    );

useScheduleListQuery.getKey = (variables?: ScheduleListQueryVariables) => variables === undefined ? ['ScheduleList'] : ['ScheduleList', variables];
;

useScheduleListQuery.fetcher = (variables?: ScheduleListQueryVariables, options?: RequestInit['headers']) => fetcher<ScheduleListQuery, ScheduleListQueryVariables>(ScheduleListDocument, variables, options);
export const MyLessonsDocument = `
    query MyLessons($startDate: Date, $endDate: Date) {
  currentCoupleIds {
    nodes
  }
  currentSessionId
  currentUserId
  myLessons(startDate: $startDate, endDate: $endDate) {
    nodes {
      ...ScheduleItem
    }
  }
}
    ${ScheduleItemFragmentDoc}`;
export const useMyLessonsQuery = <
      TData = MyLessonsQuery,
      TError = unknown
    >(
      variables?: MyLessonsQueryVariables,
      options?: UseQueryOptions<MyLessonsQuery, TError, TData>
    ) =>
    useQuery<MyLessonsQuery, TError, TData>(
      variables === undefined ? ['MyLessons'] : ['MyLessons', variables],
      fetcher<MyLessonsQuery, MyLessonsQueryVariables>(MyLessonsDocument, variables),
      options
    );

useMyLessonsQuery.getKey = (variables?: MyLessonsQueryVariables) => variables === undefined ? ['MyLessons'] : ['MyLessons', variables];
;

useMyLessonsQuery.fetcher = (variables?: MyLessonsQueryVariables, options?: RequestInit['headers']) => fetcher<MyLessonsQuery, MyLessonsQueryVariables>(MyLessonsDocument, variables, options);
export const ScheduleDocument = `
    query Schedule($id: BigInt!) {
  rozpi(rId: $id) {
    ...Schedule
  }
}
    ${ScheduleFragmentDoc}`;
export const useScheduleQuery = <
      TData = ScheduleQuery,
      TError = unknown
    >(
      variables: ScheduleQueryVariables,
      options?: UseQueryOptions<ScheduleQuery, TError, TData>
    ) =>
    useQuery<ScheduleQuery, TError, TData>(
      ['Schedule', variables],
      fetcher<ScheduleQuery, ScheduleQueryVariables>(ScheduleDocument, variables),
      options
    );

useScheduleQuery.getKey = (variables: ScheduleQueryVariables) => ['Schedule', variables];
;

useScheduleQuery.fetcher = (variables: ScheduleQueryVariables, options?: RequestInit['headers']) => fetcher<ScheduleQuery, ScheduleQueryVariables>(ScheduleDocument, variables, options);
export const ToggleScheduleVisibleDocument = `
    mutation ToggleScheduleVisible($id: BigInt!, $visible: Boolean!) {
  updateRozpi(input: {rId: $id, patch: {rVisible: $visible}}) {
    rozpi {
      id: rId
    }
  }
}
    `;
export const useToggleScheduleVisibleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ToggleScheduleVisibleMutation, TError, ToggleScheduleVisibleMutationVariables, TContext>) =>
    useMutation<ToggleScheduleVisibleMutation, TError, ToggleScheduleVisibleMutationVariables, TContext>(
      ['ToggleScheduleVisible'],
      (variables?: ToggleScheduleVisibleMutationVariables) => fetcher<ToggleScheduleVisibleMutation, ToggleScheduleVisibleMutationVariables>(ToggleScheduleVisibleDocument, variables)(),
      options
    );
useToggleScheduleVisibleMutation.getKey = () => ['ToggleScheduleVisible'];

useToggleScheduleVisibleMutation.fetcher = (variables: ToggleScheduleVisibleMutationVariables, options?: RequestInit['headers']) => fetcher<ToggleScheduleVisibleMutation, ToggleScheduleVisibleMutationVariables>(ToggleScheduleVisibleDocument, variables, options);
export const CreateScheduleDocument = `
    mutation CreateSchedule($input: RozpiInput!) {
  createRozpi(input: {rozpi: $input}) {
    rozpi {
      id: rId
    }
  }
}
    `;
export const useCreateScheduleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateScheduleMutation, TError, CreateScheduleMutationVariables, TContext>) =>
    useMutation<CreateScheduleMutation, TError, CreateScheduleMutationVariables, TContext>(
      ['CreateSchedule'],
      (variables?: CreateScheduleMutationVariables) => fetcher<CreateScheduleMutation, CreateScheduleMutationVariables>(CreateScheduleDocument, variables)(),
      options
    );
useCreateScheduleMutation.getKey = () => ['CreateSchedule'];

useCreateScheduleMutation.fetcher = (variables: CreateScheduleMutationVariables, options?: RequestInit['headers']) => fetcher<CreateScheduleMutation, CreateScheduleMutationVariables>(CreateScheduleDocument, variables, options);
export const UpdateScheduleDocument = `
    mutation UpdateSchedule($id: BigInt!, $patch: RozpiPatch!) {
  updateRozpi(input: {rId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateScheduleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateScheduleMutation, TError, UpdateScheduleMutationVariables, TContext>) =>
    useMutation<UpdateScheduleMutation, TError, UpdateScheduleMutationVariables, TContext>(
      ['UpdateSchedule'],
      (variables?: UpdateScheduleMutationVariables) => fetcher<UpdateScheduleMutation, UpdateScheduleMutationVariables>(UpdateScheduleDocument, variables)(),
      options
    );
useUpdateScheduleMutation.getKey = () => ['UpdateSchedule'];

useUpdateScheduleMutation.fetcher = (variables: UpdateScheduleMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateScheduleMutation, UpdateScheduleMutationVariables>(UpdateScheduleDocument, variables, options);
export const DeleteScheduleDocument = `
    mutation DeleteSchedule($id: BigInt!) {
  deleteRozpi(input: {rId: $id}) {
    __typename
  }
}
    `;
export const useDeleteScheduleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteScheduleMutation, TError, DeleteScheduleMutationVariables, TContext>) =>
    useMutation<DeleteScheduleMutation, TError, DeleteScheduleMutationVariables, TContext>(
      ['DeleteSchedule'],
      (variables?: DeleteScheduleMutationVariables) => fetcher<DeleteScheduleMutation, DeleteScheduleMutationVariables>(DeleteScheduleDocument, variables)(),
      options
    );
useDeleteScheduleMutation.getKey = () => ['DeleteSchedule'];

useDeleteScheduleMutation.fetcher = (variables: DeleteScheduleMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteScheduleMutation, DeleteScheduleMutationVariables>(DeleteScheduleDocument, variables, options);
export const BookLessonDocument = `
    mutation BookLesson($id: BigInt!) {
  bookLesson(input: {lessonId: $id}) {
    __typename
  }
}
    `;
export const useBookLessonMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<BookLessonMutation, TError, BookLessonMutationVariables, TContext>) =>
    useMutation<BookLessonMutation, TError, BookLessonMutationVariables, TContext>(
      ['BookLesson'],
      (variables?: BookLessonMutationVariables) => fetcher<BookLessonMutation, BookLessonMutationVariables>(BookLessonDocument, variables)(),
      options
    );
useBookLessonMutation.getKey = () => ['BookLesson'];

useBookLessonMutation.fetcher = (variables: BookLessonMutationVariables, options?: RequestInit['headers']) => fetcher<BookLessonMutation, BookLessonMutationVariables>(BookLessonDocument, variables, options);
export const CancelLessonDocument = `
    mutation CancelLesson($id: BigInt!) {
  cancelLesson(input: {lessonId: $id}) {
    __typename
  }
}
    `;
export const useCancelLessonMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CancelLessonMutation, TError, CancelLessonMutationVariables, TContext>) =>
    useMutation<CancelLessonMutation, TError, CancelLessonMutationVariables, TContext>(
      ['CancelLesson'],
      (variables?: CancelLessonMutationVariables) => fetcher<CancelLessonMutation, CancelLessonMutationVariables>(CancelLessonDocument, variables)(),
      options
    );
useCancelLessonMutation.getKey = () => ['CancelLesson'];

useCancelLessonMutation.fetcher = (variables: CancelLessonMutationVariables, options?: RequestInit['headers']) => fetcher<CancelLessonMutation, CancelLessonMutationVariables>(CancelLessonDocument, variables, options);