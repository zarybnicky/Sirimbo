/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { UserFragmentDoc } from './CurrentUser';
import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type UserPublicFragment = { __typename?: 'User', uJmeno: string, uPrijmeni: string, uRodneCislo: string | null, uTelefon: string, uEmail: string, id: string };

export type UserQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type UserQuery = { __typename?: 'Query', user: { __typename?: 'User', uLogin: string, uJmeno: string, uPrijmeni: string, uEmail: string, uTelefon: string, uConfirmed: boolean, uTeacher: boolean, uDancer: boolean, uSystem: boolean, uLock: boolean, uBan: boolean, uGroup: string, uSkupina: string, uTimestamp: string, uStreet: string, uRodneCislo: string | null, uPoznamky: string, uPostalCode: string, uPohlavi: string, uOrientationNumber: string, uNationality: string, uNarozeni: string, uMemberUntil: string | null, uMemberSince: string | null, uGdprSignedAt: string | null, uDistrict: string, uCreatedAt: string, uConscriptionNumber: string, uCity: string, id: string } | null };

export type UserListQueryVariables = Types.Exact<{
  confirmed?: Types.InputMaybe<Types.Scalars['Boolean']>;
  system?: Types.InputMaybe<Types.Scalars['Boolean']>;
  ban?: Types.InputMaybe<Types.Scalars['Boolean']>;
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type UserListQuery = { __typename?: 'Query', users: { __typename?: 'UsersConnection', totalCount: number, nodes: Array<{ __typename?: 'User', uLogin: string, uJmeno: string, uPrijmeni: string, uEmail: string, uTelefon: string, uConfirmed: boolean, uTeacher: boolean, uDancer: boolean, uSystem: boolean, uLock: boolean, uBan: boolean, uGroup: string, uSkupina: string, uTimestamp: string, uStreet: string, uRodneCislo: string | null, uPoznamky: string, uPostalCode: string, uPohlavi: string, uOrientationNumber: string, uNationality: string, uNarozeni: string, uMemberUntil: string | null, uMemberSince: string | null, uGdprSignedAt: string | null, uDistrict: string, uCreatedAt: string, uConscriptionNumber: string, uCity: string, id: string }> } | null };

export type MsmtExportQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type MsmtExportQuery = { __typename?: 'Query', members: { __typename?: 'MembersConnection', nodes: Array<{ __typename?: 'Member', uJmeno: string | null, uPrijmeni: string | null, uEmail: string | null, uTelefon: string | null, uRodneCislo: string | null, uNationality: string | null, uNarozeni: string | null, uCity: string | null, uDistrict: string | null, uConscriptionNumber: string | null, uOrientationNumber: string | null, uPostalCode: string | null, uStreet: string | null, sId: string | null, sName: string | null, sColorRgb: string | null, sDescription: string | null, sVisible: boolean | null, paymentValid: boolean | null, oldestPayment: string | null, newestPayment: string | null, uGroup: string | null, id: string | null }> } | null };

export type MemberListQueryVariables = Types.Exact<{
  cohortId?: Types.InputMaybe<Types.Scalars['BigInt']>;
}>;


export type MemberListQuery = { __typename?: 'Query', members: { __typename?: 'MembersConnection', totalCount: number, nodes: Array<{ __typename?: 'Member', uJmeno: string | null, uPrijmeni: string | null, uEmail: string | null, uTelefon: string | null, uRodneCislo: string | null, sId: string | null, sName: string | null, sColorRgb: string | null, sDescription: string | null, sVisible: boolean | null, paymentValid: boolean | null, id: string | null }> } | null };

export type TrainerListQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type TrainerListQuery = { __typename?: 'Query', trainers: { __typename?: 'UsersConnection', totalCount: number, nodes: Array<{ __typename?: 'User', uLogin: string, uJmeno: string, uPrijmeni: string, uEmail: string, uTelefon: string, uConfirmed: boolean, uTeacher: boolean, uDancer: boolean, uSystem: boolean, uLock: boolean, uBan: boolean, uGroup: string, uSkupina: string, uTimestamp: string, uStreet: string, uRodneCislo: string | null, uPoznamky: string, uPostalCode: string, uPohlavi: string, uOrientationNumber: string, uNationality: string, uNarozeni: string, uMemberUntil: string | null, uMemberSince: string | null, uGdprSignedAt: string | null, uDistrict: string, uCreatedAt: string, uConscriptionNumber: string, uCity: string, id: string }> } | null };

export type ConfirmUserMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  role: Types.Scalars['BigInt'];
  cohort: Types.Scalars['BigInt'];
}>;


export type ConfirmUserMutation = { __typename?: 'Mutation', confirmUser: { __typename: 'ConfirmUserPayload' } | null };

export type CreateUserMutationVariables = Types.Exact<{
  input: Types.UserInput;
}>;


export type CreateUserMutation = { __typename?: 'Mutation', createUser: { __typename?: 'CreateUserPayload', user: { __typename?: 'User', id: string } | null } | null };

export type UpdateUserMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.UserPatch;
}>;


export type UpdateUserMutation = { __typename?: 'Mutation', updateUser: { __typename: 'UpdateUserPayload' } | null };

export type DeleteUserMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteUserMutation = { __typename?: 'Mutation', deleteUser: { __typename: 'DeleteUserPayload' } | null };

export const UserPublicFragmentDoc = `
    fragment UserPublic on User {
  id: uId
  uJmeno
  uPrijmeni
  uRodneCislo
  uTelefon
  uEmail
}
    `;
export const UserDocument = `
    query User($id: BigInt!) {
  user(uId: $id) {
    ...User
  }
}
    ${UserFragmentDoc}`;
export const useUserQuery = <
      TData = UserQuery,
      TError = unknown
    >(
      variables: UserQueryVariables,
      options?: UseQueryOptions<UserQuery, TError, TData>
    ) =>
    useQuery<UserQuery, TError, TData>(
      ['User', variables],
      fetcher<UserQuery, UserQueryVariables>(UserDocument, variables),
      options
    );

useUserQuery.getKey = (variables: UserQueryVariables) => ['User', variables];
;

useUserQuery.fetcher = (variables: UserQueryVariables, options?: RequestInit['headers']) => fetcher<UserQuery, UserQueryVariables>(UserDocument, variables, options);
export const UserListDocument = `
    query UserList($confirmed: Boolean, $system: Boolean = false, $ban: Boolean = false, $limit: Int, $offset: Int) {
  users(
    condition: {uBan: $ban, uSystem: $system, uConfirmed: $confirmed}
    offset: $offset
    first: $limit
  ) {
    totalCount
    nodes {
      ...User
    }
  }
}
    ${UserFragmentDoc}`;
export const useUserListQuery = <
      TData = UserListQuery,
      TError = unknown
    >(
      variables?: UserListQueryVariables,
      options?: UseQueryOptions<UserListQuery, TError, TData>
    ) =>
    useQuery<UserListQuery, TError, TData>(
      variables === undefined ? ['UserList'] : ['UserList', variables],
      fetcher<UserListQuery, UserListQueryVariables>(UserListDocument, variables),
      options
    );

useUserListQuery.getKey = (variables?: UserListQueryVariables) => variables === undefined ? ['UserList'] : ['UserList', variables];
;

useUserListQuery.fetcher = (variables?: UserListQueryVariables, options?: RequestInit['headers']) => fetcher<UserListQuery, UserListQueryVariables>(UserListDocument, variables, options);
export const MsmtExportDocument = `
    query MsmtExport {
  members(condition: {sVisible: true}) {
    nodes {
      id: uId
      uJmeno
      uPrijmeni
      uEmail
      uTelefon
      uRodneCislo
      uNationality
      uNarozeni
      uCity
      uDistrict
      uConscriptionNumber
      uOrientationNumber
      uPostalCode
      uStreet
      sId
      sName
      sColorRgb
      sDescription
      sVisible
      paymentValid
      oldestPayment
      newestPayment
      uGroup
    }
  }
}
    `;
export const useMsmtExportQuery = <
      TData = MsmtExportQuery,
      TError = unknown
    >(
      variables?: MsmtExportQueryVariables,
      options?: UseQueryOptions<MsmtExportQuery, TError, TData>
    ) =>
    useQuery<MsmtExportQuery, TError, TData>(
      variables === undefined ? ['MsmtExport'] : ['MsmtExport', variables],
      fetcher<MsmtExportQuery, MsmtExportQueryVariables>(MsmtExportDocument, variables),
      options
    );

useMsmtExportQuery.getKey = (variables?: MsmtExportQueryVariables) => variables === undefined ? ['MsmtExport'] : ['MsmtExport', variables];
;

useMsmtExportQuery.fetcher = (variables?: MsmtExportQueryVariables, options?: RequestInit['headers']) => fetcher<MsmtExportQuery, MsmtExportQueryVariables>(MsmtExportDocument, variables, options);
export const MemberListDocument = `
    query MemberList($cohortId: BigInt) {
  members(condition: {sId: $cohortId}) {
    totalCount
    nodes {
      id: uId
      uJmeno
      uPrijmeni
      uEmail
      uTelefon
      uRodneCislo
      sId
      sName
      sColorRgb
      sDescription
      sVisible
      paymentValid
    }
  }
}
    `;
export const useMemberListQuery = <
      TData = MemberListQuery,
      TError = unknown
    >(
      variables?: MemberListQueryVariables,
      options?: UseQueryOptions<MemberListQuery, TError, TData>
    ) =>
    useQuery<MemberListQuery, TError, TData>(
      variables === undefined ? ['MemberList'] : ['MemberList', variables],
      fetcher<MemberListQuery, MemberListQueryVariables>(MemberListDocument, variables),
      options
    );

useMemberListQuery.getKey = (variables?: MemberListQueryVariables) => variables === undefined ? ['MemberList'] : ['MemberList', variables];
;

useMemberListQuery.fetcher = (variables?: MemberListQueryVariables, options?: RequestInit['headers']) => fetcher<MemberListQuery, MemberListQueryVariables>(MemberListDocument, variables, options);
export const TrainerListDocument = `
    query TrainerList {
  trainers {
    totalCount
    nodes {
      ...User
    }
  }
}
    ${UserFragmentDoc}`;
export const useTrainerListQuery = <
      TData = TrainerListQuery,
      TError = unknown
    >(
      variables?: TrainerListQueryVariables,
      options?: UseQueryOptions<TrainerListQuery, TError, TData>
    ) =>
    useQuery<TrainerListQuery, TError, TData>(
      variables === undefined ? ['TrainerList'] : ['TrainerList', variables],
      fetcher<TrainerListQuery, TrainerListQueryVariables>(TrainerListDocument, variables),
      options
    );

useTrainerListQuery.getKey = (variables?: TrainerListQueryVariables) => variables === undefined ? ['TrainerList'] : ['TrainerList', variables];
;

useTrainerListQuery.fetcher = (variables?: TrainerListQueryVariables, options?: RequestInit['headers']) => fetcher<TrainerListQuery, TrainerListQueryVariables>(TrainerListDocument, variables, options);
export const ConfirmUserDocument = `
    mutation ConfirmUser($id: BigInt!, $role: BigInt!, $cohort: BigInt!) {
  confirmUser(input: {id: $id, grp: $role, cohort: $cohort}) {
    __typename
  }
}
    `;
export const useConfirmUserMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ConfirmUserMutation, TError, ConfirmUserMutationVariables, TContext>) =>
    useMutation<ConfirmUserMutation, TError, ConfirmUserMutationVariables, TContext>(
      ['ConfirmUser'],
      (variables?: ConfirmUserMutationVariables) => fetcher<ConfirmUserMutation, ConfirmUserMutationVariables>(ConfirmUserDocument, variables)(),
      options
    );
useConfirmUserMutation.getKey = () => ['ConfirmUser'];

useConfirmUserMutation.fetcher = (variables: ConfirmUserMutationVariables, options?: RequestInit['headers']) => fetcher<ConfirmUserMutation, ConfirmUserMutationVariables>(ConfirmUserDocument, variables, options);
export const CreateUserDocument = `
    mutation CreateUser($input: UserInput!) {
  createUser(input: {user: $input}) {
    user {
      id: uId
    }
  }
}
    `;
export const useCreateUserMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateUserMutation, TError, CreateUserMutationVariables, TContext>) =>
    useMutation<CreateUserMutation, TError, CreateUserMutationVariables, TContext>(
      ['CreateUser'],
      (variables?: CreateUserMutationVariables) => fetcher<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, variables)(),
      options
    );
useCreateUserMutation.getKey = () => ['CreateUser'];

useCreateUserMutation.fetcher = (variables: CreateUserMutationVariables, options?: RequestInit['headers']) => fetcher<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, variables, options);
export const UpdateUserDocument = `
    mutation UpdateUser($id: BigInt!, $patch: UserPatch!) {
  updateUser(input: {uId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateUserMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateUserMutation, TError, UpdateUserMutationVariables, TContext>) =>
    useMutation<UpdateUserMutation, TError, UpdateUserMutationVariables, TContext>(
      ['UpdateUser'],
      (variables?: UpdateUserMutationVariables) => fetcher<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, variables)(),
      options
    );
useUpdateUserMutation.getKey = () => ['UpdateUser'];

useUpdateUserMutation.fetcher = (variables: UpdateUserMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, variables, options);
export const DeleteUserDocument = `
    mutation DeleteUser($id: BigInt!) {
  deleteUser(input: {uId: $id}) {
    __typename
  }
}
    `;
export const useDeleteUserMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteUserMutation, TError, DeleteUserMutationVariables, TContext>) =>
    useMutation<DeleteUserMutation, TError, DeleteUserMutationVariables, TContext>(
      ['DeleteUser'],
      (variables?: DeleteUserMutationVariables) => fetcher<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, variables)(),
      options
    );
useDeleteUserMutation.getKey = () => ['DeleteUser'];

useDeleteUserMutation.fetcher = (variables: DeleteUserMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, variables, options);