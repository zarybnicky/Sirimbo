/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type FileFragment = { __typename: 'Dokumenty', dName: string, dFilename: string, dKategorie: number, dTimestamp: string | null, id: string };

export type FileListQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
  category?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type FileListQuery = { __typename?: 'Query', dokumenties: { __typename?: 'DokumentiesConnection', totalCount: number, nodes: Array<{ __typename: 'Dokumenty', dName: string, dFilename: string, dKategorie: number, dTimestamp: string | null, id: string, userByDKdo: { __typename?: 'User', uJmeno: string, uPrijmeni: string } | null }> } | null };

export type FileQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type FileQuery = { __typename?: 'Query', dokumenty: { __typename: 'Dokumenty', dName: string, dFilename: string, dKategorie: number, dTimestamp: string | null, id: string } | null };

export type CreateFileMutationVariables = Types.Exact<{
  input: Types.DokumentyInput;
}>;


export type CreateFileMutation = { __typename?: 'Mutation', createDokumenty: { __typename?: 'CreateDokumentyPayload', dokumenty: { __typename?: 'Dokumenty', id: string } | null } | null };

export type UpdateFileMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.DokumentyPatch;
}>;


export type UpdateFileMutation = { __typename?: 'Mutation', updateDokumenty: { __typename: 'UpdateDokumentyPayload' } | null };

export type DeleteFileMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteFileMutation = { __typename?: 'Mutation', deleteDokumenty: { __typename: 'DeleteDokumentyPayload' } | null };

export const FileFragmentDoc = `
    fragment File on Dokumenty {
  __typename
  id: dId
  dName
  dFilename
  dKategorie
  dTimestamp
}
    `;
export const FileListDocument = `
    query FileList($limit: Int, $offset: Int, $category: Int) {
  dokumenties(
    offset: $offset
    first: $limit
    condition: {dKategorie: $category}
    orderBy: D_TIMESTAMP_DESC
  ) {
    totalCount
    nodes {
      ...File
      userByDKdo {
        uJmeno
        uPrijmeni
      }
    }
  }
}
    ${FileFragmentDoc}`;
export const useFileListQuery = <
      TData = FileListQuery,
      TError = unknown
    >(
      variables?: FileListQueryVariables,
      options?: UseQueryOptions<FileListQuery, TError, TData>
    ) =>
    useQuery<FileListQuery, TError, TData>(
      variables === undefined ? ['FileList'] : ['FileList', variables],
      fetcher<FileListQuery, FileListQueryVariables>(FileListDocument, variables),
      options
    );

useFileListQuery.getKey = (variables?: FileListQueryVariables) => variables === undefined ? ['FileList'] : ['FileList', variables];
;

useFileListQuery.fetcher = (variables?: FileListQueryVariables, options?: RequestInit['headers']) => fetcher<FileListQuery, FileListQueryVariables>(FileListDocument, variables, options);
export const FileDocument = `
    query File($id: BigInt!) {
  dokumenty(dId: $id) {
    ...File
  }
}
    ${FileFragmentDoc}`;
export const useFileQuery = <
      TData = FileQuery,
      TError = unknown
    >(
      variables: FileQueryVariables,
      options?: UseQueryOptions<FileQuery, TError, TData>
    ) =>
    useQuery<FileQuery, TError, TData>(
      ['File', variables],
      fetcher<FileQuery, FileQueryVariables>(FileDocument, variables),
      options
    );

useFileQuery.getKey = (variables: FileQueryVariables) => ['File', variables];
;

useFileQuery.fetcher = (variables: FileQueryVariables, options?: RequestInit['headers']) => fetcher<FileQuery, FileQueryVariables>(FileDocument, variables, options);
export const CreateFileDocument = `
    mutation CreateFile($input: DokumentyInput!) {
  createDokumenty(input: {dokumenty: $input}) {
    dokumenty {
      id: dId
    }
  }
}
    `;
export const useCreateFileMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateFileMutation, TError, CreateFileMutationVariables, TContext>) =>
    useMutation<CreateFileMutation, TError, CreateFileMutationVariables, TContext>(
      ['CreateFile'],
      (variables?: CreateFileMutationVariables) => fetcher<CreateFileMutation, CreateFileMutationVariables>(CreateFileDocument, variables)(),
      options
    );
useCreateFileMutation.getKey = () => ['CreateFile'];

useCreateFileMutation.fetcher = (variables: CreateFileMutationVariables, options?: RequestInit['headers']) => fetcher<CreateFileMutation, CreateFileMutationVariables>(CreateFileDocument, variables, options);
export const UpdateFileDocument = `
    mutation UpdateFile($id: BigInt!, $patch: DokumentyPatch!) {
  updateDokumenty(input: {dId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateFileMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateFileMutation, TError, UpdateFileMutationVariables, TContext>) =>
    useMutation<UpdateFileMutation, TError, UpdateFileMutationVariables, TContext>(
      ['UpdateFile'],
      (variables?: UpdateFileMutationVariables) => fetcher<UpdateFileMutation, UpdateFileMutationVariables>(UpdateFileDocument, variables)(),
      options
    );
useUpdateFileMutation.getKey = () => ['UpdateFile'];

useUpdateFileMutation.fetcher = (variables: UpdateFileMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateFileMutation, UpdateFileMutationVariables>(UpdateFileDocument, variables, options);
export const DeleteFileDocument = `
    mutation DeleteFile($id: BigInt!) {
  deleteDokumenty(input: {dId: $id}) {
    __typename
  }
}
    `;
export const useDeleteFileMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteFileMutation, TError, DeleteFileMutationVariables, TContext>) =>
    useMutation<DeleteFileMutation, TError, DeleteFileMutationVariables, TContext>(
      ['DeleteFile'],
      (variables?: DeleteFileMutationVariables) => fetcher<DeleteFileMutation, DeleteFileMutationVariables>(DeleteFileDocument, variables)(),
      options
    );
useDeleteFileMutation.getKey = () => ['DeleteFile'];

useDeleteFileMutation.fetcher = (variables: DeleteFileMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteFileMutation, DeleteFileMutationVariables>(DeleteFileDocument, variables, options);