/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { CouplePartialFragmentDoc } from './CurrentUser';
import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type CoupleExtendedFragment = { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, rozpisItemsByRiPartner: { __typename?: 'RozpisItemsConnection', nodes: Array<{ __typename?: 'RozpisItem', riOd: string, riDo: string, id: string, rozpiByRiIdRodic: { __typename?: 'Rozpi', rKde: string, rDatum: string, id: string, userByRTrener: { __typename?: 'User', fullName: string | null } | null } | null }> }, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null };

export type CoupleListQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type CoupleListQuery = { __typename?: 'Query', activeCouples: { __typename?: 'PariesConnection', totalCount: number, nodes: Array<{ __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null }> } | null };

export type CoupleQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type CoupleQuery = { __typename?: 'Query', pary: { __typename?: 'Pary', pIdPartner: string, pIdPartnerka: string | null, pArchiv: boolean, id: string, rozpisItemsByRiPartner: { __typename?: 'RozpisItemsConnection', nodes: Array<{ __typename?: 'RozpisItem', riOd: string, riDo: string, id: string, rozpiByRiIdRodic: { __typename?: 'Rozpi', rKde: string, rDatum: string, id: string, userByRTrener: { __typename?: 'User', fullName: string | null } | null } | null }> }, userByPIdPartner: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null, userByPIdPartnerka: { __typename?: 'User', uJmeno: string, uPrijmeni: string, id: string } | null } | null };

export type CreateCoupleMutationVariables = Types.Exact<{
  man: Types.Scalars['BigInt'];
  woman: Types.Scalars['BigInt'];
}>;


export type CreateCoupleMutation = { __typename?: 'Mutation', createCouple: { __typename?: 'CreateCouplePayload', paries: Array<{ __typename?: 'Pary', id: string }> | null } | null };

export type DeleteCoupleMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteCoupleMutation = { __typename?: 'Mutation', deletePary: { __typename: 'DeleteParyPayload' } | null };

export type FixUnpairedCouplesMutationVariables = Types.Exact<{ [key: string]: never; }>;


export type FixUnpairedCouplesMutation = { __typename?: 'Mutation', fixUnpairedCouples: { __typename?: 'FixUnpairedCouplesPayload', paries: Array<{ __typename?: 'Pary', id: string }> | null } | null };

export const CoupleExtendedFragmentDoc = `
    fragment CoupleExtended on Pary {
  ...CouplePartial
  rozpisItemsByRiPartner(orderBy: [ROZPI_BY_RI_ID_RODIC__R_DATUM_DESC]) {
    nodes {
      id: riId
      riOd
      riDo
      rozpiByRiIdRodic {
        id: rId
        rKde
        rDatum
        userByRTrener {
          fullName
        }
      }
    }
  }
}
    ${CouplePartialFragmentDoc}`;
export const CoupleListDocument = `
    query CoupleList {
  activeCouples {
    totalCount
    nodes {
      ...CouplePartial
    }
  }
}
    ${CouplePartialFragmentDoc}`;
export const useCoupleListQuery = <
      TData = CoupleListQuery,
      TError = unknown
    >(
      variables?: CoupleListQueryVariables,
      options?: UseQueryOptions<CoupleListQuery, TError, TData>
    ) =>
    useQuery<CoupleListQuery, TError, TData>(
      variables === undefined ? ['CoupleList'] : ['CoupleList', variables],
      fetcher<CoupleListQuery, CoupleListQueryVariables>(CoupleListDocument, variables),
      options
    );

useCoupleListQuery.getKey = (variables?: CoupleListQueryVariables) => variables === undefined ? ['CoupleList'] : ['CoupleList', variables];
;

useCoupleListQuery.fetcher = (variables?: CoupleListQueryVariables, options?: RequestInit['headers']) => fetcher<CoupleListQuery, CoupleListQueryVariables>(CoupleListDocument, variables, options);
export const CoupleDocument = `
    query Couple($id: BigInt!) {
  pary(pId: $id) {
    ...CoupleExtended
  }
}
    ${CoupleExtendedFragmentDoc}`;
export const useCoupleQuery = <
      TData = CoupleQuery,
      TError = unknown
    >(
      variables: CoupleQueryVariables,
      options?: UseQueryOptions<CoupleQuery, TError, TData>
    ) =>
    useQuery<CoupleQuery, TError, TData>(
      ['Couple', variables],
      fetcher<CoupleQuery, CoupleQueryVariables>(CoupleDocument, variables),
      options
    );

useCoupleQuery.getKey = (variables: CoupleQueryVariables) => ['Couple', variables];
;

useCoupleQuery.fetcher = (variables: CoupleQueryVariables, options?: RequestInit['headers']) => fetcher<CoupleQuery, CoupleQueryVariables>(CoupleDocument, variables, options);
export const CreateCoupleDocument = `
    mutation CreateCouple($man: BigInt!, $woman: BigInt!) {
  createCouple(input: {man: $man, woman: $woman}) {
    paries {
      id: pId
    }
  }
}
    `;
export const useCreateCoupleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateCoupleMutation, TError, CreateCoupleMutationVariables, TContext>) =>
    useMutation<CreateCoupleMutation, TError, CreateCoupleMutationVariables, TContext>(
      ['CreateCouple'],
      (variables?: CreateCoupleMutationVariables) => fetcher<CreateCoupleMutation, CreateCoupleMutationVariables>(CreateCoupleDocument, variables)(),
      options
    );
useCreateCoupleMutation.getKey = () => ['CreateCouple'];

useCreateCoupleMutation.fetcher = (variables: CreateCoupleMutationVariables, options?: RequestInit['headers']) => fetcher<CreateCoupleMutation, CreateCoupleMutationVariables>(CreateCoupleDocument, variables, options);
export const DeleteCoupleDocument = `
    mutation DeleteCouple($id: BigInt!) {
  deletePary(input: {pId: $id}) {
    __typename
  }
}
    `;
export const useDeleteCoupleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteCoupleMutation, TError, DeleteCoupleMutationVariables, TContext>) =>
    useMutation<DeleteCoupleMutation, TError, DeleteCoupleMutationVariables, TContext>(
      ['DeleteCouple'],
      (variables?: DeleteCoupleMutationVariables) => fetcher<DeleteCoupleMutation, DeleteCoupleMutationVariables>(DeleteCoupleDocument, variables)(),
      options
    );
useDeleteCoupleMutation.getKey = () => ['DeleteCouple'];

useDeleteCoupleMutation.fetcher = (variables: DeleteCoupleMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteCoupleMutation, DeleteCoupleMutationVariables>(DeleteCoupleDocument, variables, options);
export const FixUnpairedCouplesDocument = `
    mutation FixUnpairedCouples {
  fixUnpairedCouples(input: {}) {
    paries {
      id: pId
    }
  }
}
    `;
export const useFixUnpairedCouplesMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<FixUnpairedCouplesMutation, TError, FixUnpairedCouplesMutationVariables, TContext>) =>
    useMutation<FixUnpairedCouplesMutation, TError, FixUnpairedCouplesMutationVariables, TContext>(
      ['FixUnpairedCouples'],
      (variables?: FixUnpairedCouplesMutationVariables) => fetcher<FixUnpairedCouplesMutation, FixUnpairedCouplesMutationVariables>(FixUnpairedCouplesDocument, variables)(),
      options
    );
useFixUnpairedCouplesMutation.getKey = () => ['FixUnpairedCouples'];

useFixUnpairedCouplesMutation.fetcher = (variables?: FixUnpairedCouplesMutationVariables, options?: RequestInit['headers']) => fetcher<FixUnpairedCouplesMutation, FixUnpairedCouplesMutationVariables>(FixUnpairedCouplesDocument, variables, options);