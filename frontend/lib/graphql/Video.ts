/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type TitleVideosQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type TitleVideosQuery = { __typename?: 'Query', titleVideos: { __typename?: 'VideosConnection', nodes: Array<{ __typename?: 'Video', vTitle: string, vUri: string }> } | null };

export type VideoSourceFragment = { __typename: 'VideoSource', vsId: string, vsTitle: string | null, vsUrl: string, vsDescription: string | null, vsLastChecked: string | null, vsCreatedAt: string };

export type VideoSourceQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type VideoSourceQuery = { __typename?: 'Query', videoSource: { __typename: 'VideoSource', vsId: string, vsTitle: string | null, vsUrl: string, vsDescription: string | null, vsLastChecked: string | null, vsCreatedAt: string } | null };

export type VideoSourceListQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type VideoSourceListQuery = { __typename?: 'Query', videoSources: { __typename?: 'VideoSourcesConnection', nodes: Array<{ __typename: 'VideoSource', vsId: string, vsTitle: string | null, vsUrl: string, vsDescription: string | null, vsLastChecked: string | null, vsCreatedAt: string }> } | null };

export type CreateVideoSourceMutationVariables = Types.Exact<{
  input: Types.VideoSourceInput;
}>;


export type CreateVideoSourceMutation = { __typename?: 'Mutation', createVideoSource: { __typename: 'CreateVideoSourcePayload' } | null };

export type UpdateVideoSourceMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.VideoSourcePatch;
}>;


export type UpdateVideoSourceMutation = { __typename?: 'Mutation', updateVideoSource: { __typename: 'UpdateVideoSourcePayload' } | null };

export type DeleteVideoSourceMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteVideoSourceMutation = { __typename?: 'Mutation', deleteVideoSource: { __typename: 'DeleteVideoSourcePayload' } | null };

export type VideoFragment = { __typename: 'Video', vId: string, vAuthor: string, vPlaylist: string | null, vTitle: string, vDescription: string, vUri: string, vCreatedAt: string };

export type VideoQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type VideoQuery = { __typename?: 'Query', video: { __typename: 'Video', vId: string, vAuthor: string, vPlaylist: string | null, vTitle: string, vDescription: string, vUri: string, vCreatedAt: string } | null };

export type VideoListQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type VideoListQuery = { __typename?: 'Query', videos: { __typename?: 'VideosConnection', nodes: Array<{ __typename: 'Video', vId: string, vAuthor: string, vPlaylist: string | null, vTitle: string, vDescription: string, vUri: string, vCreatedAt: string }> } | null };

export type CreateVideoMutationVariables = Types.Exact<{
  input: Types.VideoInput;
}>;


export type CreateVideoMutation = { __typename?: 'Mutation', createVideo: { __typename: 'CreateVideoPayload' } | null };

export type UpdateVideoMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.VideoPatch;
}>;


export type UpdateVideoMutation = { __typename?: 'Mutation', updateVideo: { __typename: 'UpdateVideoPayload' } | null };

export type DeleteVideoMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteVideoMutation = { __typename?: 'Mutation', deleteVideo: { __typename: 'DeleteVideoPayload' } | null };

export const VideoSourceFragmentDoc = `
    fragment VideoSource on VideoSource {
  __typename
  vsId
  vsTitle
  vsUrl
  vsDescription
  vsLastChecked
  vsCreatedAt
}
    `;
export const VideoFragmentDoc = `
    fragment Video on Video {
  __typename
  vId
  vAuthor
  vPlaylist
  vTitle
  vDescription
  vUri
  vCreatedAt
}
    `;
export const TitleVideosDocument = `
    query TitleVideos {
  titleVideos {
    nodes {
      vTitle
      vUri
    }
  }
}
    `;
export const useTitleVideosQuery = <
      TData = TitleVideosQuery,
      TError = unknown
    >(
      variables?: TitleVideosQueryVariables,
      options?: UseQueryOptions<TitleVideosQuery, TError, TData>
    ) =>
    useQuery<TitleVideosQuery, TError, TData>(
      variables === undefined ? ['TitleVideos'] : ['TitleVideos', variables],
      fetcher<TitleVideosQuery, TitleVideosQueryVariables>(TitleVideosDocument, variables),
      options
    );

useTitleVideosQuery.getKey = (variables?: TitleVideosQueryVariables) => variables === undefined ? ['TitleVideos'] : ['TitleVideos', variables];
;

useTitleVideosQuery.fetcher = (variables?: TitleVideosQueryVariables, options?: RequestInit['headers']) => fetcher<TitleVideosQuery, TitleVideosQueryVariables>(TitleVideosDocument, variables, options);
export const VideoSourceDocument = `
    query VideoSource($id: BigInt!) {
  videoSource(vsId: $id) {
    ...VideoSource
  }
}
    ${VideoSourceFragmentDoc}`;
export const useVideoSourceQuery = <
      TData = VideoSourceQuery,
      TError = unknown
    >(
      variables: VideoSourceQueryVariables,
      options?: UseQueryOptions<VideoSourceQuery, TError, TData>
    ) =>
    useQuery<VideoSourceQuery, TError, TData>(
      ['VideoSource', variables],
      fetcher<VideoSourceQuery, VideoSourceQueryVariables>(VideoSourceDocument, variables),
      options
    );

useVideoSourceQuery.getKey = (variables: VideoSourceQueryVariables) => ['VideoSource', variables];
;

useVideoSourceQuery.fetcher = (variables: VideoSourceQueryVariables, options?: RequestInit['headers']) => fetcher<VideoSourceQuery, VideoSourceQueryVariables>(VideoSourceDocument, variables, options);
export const VideoSourceListDocument = `
    query VideoSourceList($limit: Int, $offset: Int) {
  videoSources(first: $limit, offset: $offset) {
    nodes {
      ...VideoSource
    }
  }
}
    ${VideoSourceFragmentDoc}`;
export const useVideoSourceListQuery = <
      TData = VideoSourceListQuery,
      TError = unknown
    >(
      variables?: VideoSourceListQueryVariables,
      options?: UseQueryOptions<VideoSourceListQuery, TError, TData>
    ) =>
    useQuery<VideoSourceListQuery, TError, TData>(
      variables === undefined ? ['VideoSourceList'] : ['VideoSourceList', variables],
      fetcher<VideoSourceListQuery, VideoSourceListQueryVariables>(VideoSourceListDocument, variables),
      options
    );

useVideoSourceListQuery.getKey = (variables?: VideoSourceListQueryVariables) => variables === undefined ? ['VideoSourceList'] : ['VideoSourceList', variables];
;

useVideoSourceListQuery.fetcher = (variables?: VideoSourceListQueryVariables, options?: RequestInit['headers']) => fetcher<VideoSourceListQuery, VideoSourceListQueryVariables>(VideoSourceListDocument, variables, options);
export const CreateVideoSourceDocument = `
    mutation CreateVideoSource($input: VideoSourceInput!) {
  createVideoSource(input: {videoSource: $input}) {
    __typename
  }
}
    `;
export const useCreateVideoSourceMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateVideoSourceMutation, TError, CreateVideoSourceMutationVariables, TContext>) =>
    useMutation<CreateVideoSourceMutation, TError, CreateVideoSourceMutationVariables, TContext>(
      ['CreateVideoSource'],
      (variables?: CreateVideoSourceMutationVariables) => fetcher<CreateVideoSourceMutation, CreateVideoSourceMutationVariables>(CreateVideoSourceDocument, variables)(),
      options
    );
useCreateVideoSourceMutation.getKey = () => ['CreateVideoSource'];

useCreateVideoSourceMutation.fetcher = (variables: CreateVideoSourceMutationVariables, options?: RequestInit['headers']) => fetcher<CreateVideoSourceMutation, CreateVideoSourceMutationVariables>(CreateVideoSourceDocument, variables, options);
export const UpdateVideoSourceDocument = `
    mutation UpdateVideoSource($id: BigInt!, $patch: VideoSourcePatch!) {
  updateVideoSource(input: {vsId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateVideoSourceMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateVideoSourceMutation, TError, UpdateVideoSourceMutationVariables, TContext>) =>
    useMutation<UpdateVideoSourceMutation, TError, UpdateVideoSourceMutationVariables, TContext>(
      ['UpdateVideoSource'],
      (variables?: UpdateVideoSourceMutationVariables) => fetcher<UpdateVideoSourceMutation, UpdateVideoSourceMutationVariables>(UpdateVideoSourceDocument, variables)(),
      options
    );
useUpdateVideoSourceMutation.getKey = () => ['UpdateVideoSource'];

useUpdateVideoSourceMutation.fetcher = (variables: UpdateVideoSourceMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateVideoSourceMutation, UpdateVideoSourceMutationVariables>(UpdateVideoSourceDocument, variables, options);
export const DeleteVideoSourceDocument = `
    mutation DeleteVideoSource($id: BigInt!) {
  deleteVideoSource(input: {vsId: $id}) {
    __typename
  }
}
    `;
export const useDeleteVideoSourceMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteVideoSourceMutation, TError, DeleteVideoSourceMutationVariables, TContext>) =>
    useMutation<DeleteVideoSourceMutation, TError, DeleteVideoSourceMutationVariables, TContext>(
      ['DeleteVideoSource'],
      (variables?: DeleteVideoSourceMutationVariables) => fetcher<DeleteVideoSourceMutation, DeleteVideoSourceMutationVariables>(DeleteVideoSourceDocument, variables)(),
      options
    );
useDeleteVideoSourceMutation.getKey = () => ['DeleteVideoSource'];

useDeleteVideoSourceMutation.fetcher = (variables: DeleteVideoSourceMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteVideoSourceMutation, DeleteVideoSourceMutationVariables>(DeleteVideoSourceDocument, variables, options);
export const VideoDocument = `
    query Video($id: BigInt!) {
  video(vId: $id) {
    ...Video
  }
}
    ${VideoFragmentDoc}`;
export const useVideoQuery = <
      TData = VideoQuery,
      TError = unknown
    >(
      variables: VideoQueryVariables,
      options?: UseQueryOptions<VideoQuery, TError, TData>
    ) =>
    useQuery<VideoQuery, TError, TData>(
      ['Video', variables],
      fetcher<VideoQuery, VideoQueryVariables>(VideoDocument, variables),
      options
    );

useVideoQuery.getKey = (variables: VideoQueryVariables) => ['Video', variables];
;

useVideoQuery.fetcher = (variables: VideoQueryVariables, options?: RequestInit['headers']) => fetcher<VideoQuery, VideoQueryVariables>(VideoDocument, variables, options);
export const VideoListDocument = `
    query VideoList($limit: Int, $offset: Int) {
  videos(first: $limit, offset: $offset) {
    nodes {
      ...Video
    }
  }
}
    ${VideoFragmentDoc}`;
export const useVideoListQuery = <
      TData = VideoListQuery,
      TError = unknown
    >(
      variables?: VideoListQueryVariables,
      options?: UseQueryOptions<VideoListQuery, TError, TData>
    ) =>
    useQuery<VideoListQuery, TError, TData>(
      variables === undefined ? ['VideoList'] : ['VideoList', variables],
      fetcher<VideoListQuery, VideoListQueryVariables>(VideoListDocument, variables),
      options
    );

useVideoListQuery.getKey = (variables?: VideoListQueryVariables) => variables === undefined ? ['VideoList'] : ['VideoList', variables];
;

useVideoListQuery.fetcher = (variables?: VideoListQueryVariables, options?: RequestInit['headers']) => fetcher<VideoListQuery, VideoListQueryVariables>(VideoListDocument, variables, options);
export const CreateVideoDocument = `
    mutation CreateVideo($input: VideoInput!) {
  createVideo(input: {video: $input}) {
    __typename
  }
}
    `;
export const useCreateVideoMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateVideoMutation, TError, CreateVideoMutationVariables, TContext>) =>
    useMutation<CreateVideoMutation, TError, CreateVideoMutationVariables, TContext>(
      ['CreateVideo'],
      (variables?: CreateVideoMutationVariables) => fetcher<CreateVideoMutation, CreateVideoMutationVariables>(CreateVideoDocument, variables)(),
      options
    );
useCreateVideoMutation.getKey = () => ['CreateVideo'];

useCreateVideoMutation.fetcher = (variables: CreateVideoMutationVariables, options?: RequestInit['headers']) => fetcher<CreateVideoMutation, CreateVideoMutationVariables>(CreateVideoDocument, variables, options);
export const UpdateVideoDocument = `
    mutation UpdateVideo($id: BigInt!, $patch: VideoPatch!) {
  updateVideo(input: {vId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateVideoMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateVideoMutation, TError, UpdateVideoMutationVariables, TContext>) =>
    useMutation<UpdateVideoMutation, TError, UpdateVideoMutationVariables, TContext>(
      ['UpdateVideo'],
      (variables?: UpdateVideoMutationVariables) => fetcher<UpdateVideoMutation, UpdateVideoMutationVariables>(UpdateVideoDocument, variables)(),
      options
    );
useUpdateVideoMutation.getKey = () => ['UpdateVideo'];

useUpdateVideoMutation.fetcher = (variables: UpdateVideoMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateVideoMutation, UpdateVideoMutationVariables>(UpdateVideoDocument, variables, options);
export const DeleteVideoDocument = `
    mutation DeleteVideo($id: BigInt!) {
  deleteVideo(input: {vId: $id}) {
    __typename
  }
}
    `;
export const useDeleteVideoMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteVideoMutation, TError, DeleteVideoMutationVariables, TContext>) =>
    useMutation<DeleteVideoMutation, TError, DeleteVideoMutationVariables, TContext>(
      ['DeleteVideo'],
      (variables?: DeleteVideoMutationVariables) => fetcher<DeleteVideoMutation, DeleteVideoMutationVariables>(DeleteVideoDocument, variables)(),
      options
    );
useDeleteVideoMutation.getKey = () => ['DeleteVideo'];

useDeleteVideoMutation.fetcher = (variables: DeleteVideoMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteVideoMutation, DeleteVideoMutationVariables>(DeleteVideoDocument, variables, options);