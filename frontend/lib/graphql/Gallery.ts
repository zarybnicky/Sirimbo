/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
/* eslint-disable */
import * as Types from './index';

import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { fetcher } from 'lib/query';
export type GalleryPhotoFragment = { __typename: 'GalerieFoto', nodeId: string, gfId: string, gfIdRodic: string, gfKdo: string, gfName: string, gfPath: string, gfTimestamp: string | null };

export type GalleryDirFragment = { __typename: 'GalerieDir', nodeId: string, gdId: string, gdIdRodic: string, gdName: string, gdPath: string, gdLevel: number, gdHidden: boolean };

export type GalleryDirQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type GalleryDirQuery = { __typename?: 'Query', galerieDir: { __typename: 'GalerieDir', nodeId: string, gdId: string, gdIdRodic: string, gdName: string, gdPath: string, gdLevel: number, gdHidden: boolean, galerieFotosByGfIdRodic: { __typename?: 'GalerieFotosConnection', nodes: Array<{ __typename: 'GalerieFoto', nodeId: string, gfId: string, gfIdRodic: string, gfKdo: string, gfName: string, gfPath: string, gfTimestamp: string | null }> } } | null, galerieDirs: { __typename?: 'GalerieDirsConnection', nodes: Array<{ __typename: 'GalerieDir', nodeId: string, gdId: string, gdIdRodic: string, gdName: string, gdPath: string, gdLevel: number, gdHidden: boolean, galerieFotosByGfIdRodic: { __typename?: 'GalerieFotosConnection', nodes: Array<{ __typename: 'GalerieFoto', nodeId: string, gfId: string, gfIdRodic: string, gfKdo: string, gfName: string, gfPath: string, gfTimestamp: string | null }> } }> } | null };

export type GalleryDirListQueryVariables = Types.Exact<{
  limit?: Types.InputMaybe<Types.Scalars['Int']>;
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
}>;


export type GalleryDirListQuery = { __typename?: 'Query', galerieDirs: { __typename?: 'GalerieDirsConnection', totalCount: number, nodes: Array<{ __typename: 'GalerieDir', nodeId: string, gdId: string, gdIdRodic: string, gdName: string, gdPath: string, gdLevel: number, gdHidden: boolean }> } | null };

export type ToggleGalleryDirVisibleMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  visible: Types.Scalars['Boolean'];
}>;


export type ToggleGalleryDirVisibleMutation = { __typename?: 'Mutation', updateGalerieDir: { __typename?: 'UpdateGalerieDirPayload', galerieDir: { __typename?: 'GalerieDir', gdId: string } | null } | null };

export type CreateGalleryDirMutationVariables = Types.Exact<{
  input: Types.GalerieDirInput;
}>;


export type CreateGalleryDirMutation = { __typename?: 'Mutation', createGalerieDir: { __typename: 'CreateGalerieDirPayload' } | null };

export type UpdateGalleryDirMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.GalerieDirPatch;
}>;


export type UpdateGalleryDirMutation = { __typename?: 'Mutation', updateGalerieDir: { __typename: 'UpdateGalerieDirPayload' } | null };

export type DeleteGalleryDirMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteGalleryDirMutation = { __typename?: 'Mutation', deleteGalerieDir: { __typename: 'DeleteGalerieDirPayload' } | null };

export type GalleryPhotoQueryVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type GalleryPhotoQuery = { __typename?: 'Query', galerieFoto: { __typename: 'GalerieFoto', nodeId: string, gfId: string, gfIdRodic: string, gfKdo: string, gfName: string, gfPath: string, gfTimestamp: string | null } | null };

export type CreateGalleryPhotoMutationVariables = Types.Exact<{
  input: Types.GalerieFotoInput;
}>;


export type CreateGalleryPhotoMutation = { __typename?: 'Mutation', createGalerieFoto: { __typename: 'CreateGalerieFotoPayload' } | null };

export type UpdateGalleryPhotoMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
  patch: Types.GalerieFotoPatch;
}>;


export type UpdateGalleryPhotoMutation = { __typename?: 'Mutation', updateGalerieFoto: { __typename: 'UpdateGalerieFotoPayload' } | null };

export type DeleteGalleryPhotoMutationVariables = Types.Exact<{
  id: Types.Scalars['BigInt'];
}>;


export type DeleteGalleryPhotoMutation = { __typename?: 'Mutation', deleteGalerieFoto: { __typename: 'DeleteGalerieFotoPayload' } | null };

export const GalleryPhotoFragmentDoc = `
    fragment GalleryPhoto on GalerieFoto {
  __typename
  nodeId
  gfId
  gfIdRodic
  gfKdo
  gfName
  gfPath
  gfTimestamp
}
    `;
export const GalleryDirFragmentDoc = `
    fragment GalleryDir on GalerieDir {
  __typename
  nodeId
  gdId
  gdIdRodic
  gdName
  gdPath
  gdLevel
  gdHidden
}
    `;
export const GalleryDirDocument = `
    query GalleryDir($id: BigInt!) {
  galerieDir(gdId: $id) {
    ...GalleryDir
    galerieFotosByGfIdRodic(orderBy: [GF_NAME_ASC]) {
      nodes {
        ...GalleryPhoto
      }
    }
  }
  galerieDirs(condition: {gdIdRodic: $id, gdHidden: false}) {
    nodes {
      ...GalleryDir
      galerieFotosByGfIdRodic(orderBy: [GF_NAME_ASC], first: 1) {
        nodes {
          ...GalleryPhoto
        }
      }
    }
  }
}
    ${GalleryDirFragmentDoc}
${GalleryPhotoFragmentDoc}`;
export const useGalleryDirQuery = <
      TData = GalleryDirQuery,
      TError = unknown
    >(
      variables: GalleryDirQueryVariables,
      options?: UseQueryOptions<GalleryDirQuery, TError, TData>
    ) =>
    useQuery<GalleryDirQuery, TError, TData>(
      ['GalleryDir', variables],
      fetcher<GalleryDirQuery, GalleryDirQueryVariables>(GalleryDirDocument, variables),
      options
    );

useGalleryDirQuery.getKey = (variables: GalleryDirQueryVariables) => ['GalleryDir', variables];
;

useGalleryDirQuery.fetcher = (variables: GalleryDirQueryVariables, options?: RequestInit['headers']) => fetcher<GalleryDirQuery, GalleryDirQueryVariables>(GalleryDirDocument, variables, options);
export const GalleryDirListDocument = `
    query GalleryDirList($limit: Int, $offset: Int) {
  galerieDirs(first: $limit, offset: $offset, orderBy: [GD_NAME_ASC]) {
    totalCount
    nodes {
      ...GalleryDir
    }
  }
}
    ${GalleryDirFragmentDoc}`;
export const useGalleryDirListQuery = <
      TData = GalleryDirListQuery,
      TError = unknown
    >(
      variables?: GalleryDirListQueryVariables,
      options?: UseQueryOptions<GalleryDirListQuery, TError, TData>
    ) =>
    useQuery<GalleryDirListQuery, TError, TData>(
      variables === undefined ? ['GalleryDirList'] : ['GalleryDirList', variables],
      fetcher<GalleryDirListQuery, GalleryDirListQueryVariables>(GalleryDirListDocument, variables),
      options
    );

useGalleryDirListQuery.getKey = (variables?: GalleryDirListQueryVariables) => variables === undefined ? ['GalleryDirList'] : ['GalleryDirList', variables];
;

useGalleryDirListQuery.fetcher = (variables?: GalleryDirListQueryVariables, options?: RequestInit['headers']) => fetcher<GalleryDirListQuery, GalleryDirListQueryVariables>(GalleryDirListDocument, variables, options);
export const ToggleGalleryDirVisibleDocument = `
    mutation ToggleGalleryDirVisible($id: BigInt!, $visible: Boolean!) {
  updateGalerieDir(input: {gdId: $id, patch: {gdHidden: $visible}}) {
    galerieDir {
      gdId
    }
  }
}
    `;
export const useToggleGalleryDirVisibleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ToggleGalleryDirVisibleMutation, TError, ToggleGalleryDirVisibleMutationVariables, TContext>) =>
    useMutation<ToggleGalleryDirVisibleMutation, TError, ToggleGalleryDirVisibleMutationVariables, TContext>(
      ['ToggleGalleryDirVisible'],
      (variables?: ToggleGalleryDirVisibleMutationVariables) => fetcher<ToggleGalleryDirVisibleMutation, ToggleGalleryDirVisibleMutationVariables>(ToggleGalleryDirVisibleDocument, variables)(),
      options
    );
useToggleGalleryDirVisibleMutation.getKey = () => ['ToggleGalleryDirVisible'];

useToggleGalleryDirVisibleMutation.fetcher = (variables: ToggleGalleryDirVisibleMutationVariables, options?: RequestInit['headers']) => fetcher<ToggleGalleryDirVisibleMutation, ToggleGalleryDirVisibleMutationVariables>(ToggleGalleryDirVisibleDocument, variables, options);
export const CreateGalleryDirDocument = `
    mutation CreateGalleryDir($input: GalerieDirInput!) {
  createGalerieDir(input: {galerieDir: $input}) {
    __typename
  }
}
    `;
export const useCreateGalleryDirMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateGalleryDirMutation, TError, CreateGalleryDirMutationVariables, TContext>) =>
    useMutation<CreateGalleryDirMutation, TError, CreateGalleryDirMutationVariables, TContext>(
      ['CreateGalleryDir'],
      (variables?: CreateGalleryDirMutationVariables) => fetcher<CreateGalleryDirMutation, CreateGalleryDirMutationVariables>(CreateGalleryDirDocument, variables)(),
      options
    );
useCreateGalleryDirMutation.getKey = () => ['CreateGalleryDir'];

useCreateGalleryDirMutation.fetcher = (variables: CreateGalleryDirMutationVariables, options?: RequestInit['headers']) => fetcher<CreateGalleryDirMutation, CreateGalleryDirMutationVariables>(CreateGalleryDirDocument, variables, options);
export const UpdateGalleryDirDocument = `
    mutation UpdateGalleryDir($id: BigInt!, $patch: GalerieDirPatch!) {
  updateGalerieDir(input: {gdId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateGalleryDirMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateGalleryDirMutation, TError, UpdateGalleryDirMutationVariables, TContext>) =>
    useMutation<UpdateGalleryDirMutation, TError, UpdateGalleryDirMutationVariables, TContext>(
      ['UpdateGalleryDir'],
      (variables?: UpdateGalleryDirMutationVariables) => fetcher<UpdateGalleryDirMutation, UpdateGalleryDirMutationVariables>(UpdateGalleryDirDocument, variables)(),
      options
    );
useUpdateGalleryDirMutation.getKey = () => ['UpdateGalleryDir'];

useUpdateGalleryDirMutation.fetcher = (variables: UpdateGalleryDirMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateGalleryDirMutation, UpdateGalleryDirMutationVariables>(UpdateGalleryDirDocument, variables, options);
export const DeleteGalleryDirDocument = `
    mutation DeleteGalleryDir($id: BigInt!) {
  deleteGalerieDir(input: {gdId: $id}) {
    __typename
  }
}
    `;
export const useDeleteGalleryDirMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteGalleryDirMutation, TError, DeleteGalleryDirMutationVariables, TContext>) =>
    useMutation<DeleteGalleryDirMutation, TError, DeleteGalleryDirMutationVariables, TContext>(
      ['DeleteGalleryDir'],
      (variables?: DeleteGalleryDirMutationVariables) => fetcher<DeleteGalleryDirMutation, DeleteGalleryDirMutationVariables>(DeleteGalleryDirDocument, variables)(),
      options
    );
useDeleteGalleryDirMutation.getKey = () => ['DeleteGalleryDir'];

useDeleteGalleryDirMutation.fetcher = (variables: DeleteGalleryDirMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteGalleryDirMutation, DeleteGalleryDirMutationVariables>(DeleteGalleryDirDocument, variables, options);
export const GalleryPhotoDocument = `
    query GalleryPhoto($id: BigInt!) {
  galerieFoto(gfId: $id) {
    ...GalleryPhoto
  }
}
    ${GalleryPhotoFragmentDoc}`;
export const useGalleryPhotoQuery = <
      TData = GalleryPhotoQuery,
      TError = unknown
    >(
      variables: GalleryPhotoQueryVariables,
      options?: UseQueryOptions<GalleryPhotoQuery, TError, TData>
    ) =>
    useQuery<GalleryPhotoQuery, TError, TData>(
      ['GalleryPhoto', variables],
      fetcher<GalleryPhotoQuery, GalleryPhotoQueryVariables>(GalleryPhotoDocument, variables),
      options
    );

useGalleryPhotoQuery.getKey = (variables: GalleryPhotoQueryVariables) => ['GalleryPhoto', variables];
;

useGalleryPhotoQuery.fetcher = (variables: GalleryPhotoQueryVariables, options?: RequestInit['headers']) => fetcher<GalleryPhotoQuery, GalleryPhotoQueryVariables>(GalleryPhotoDocument, variables, options);
export const CreateGalleryPhotoDocument = `
    mutation CreateGalleryPhoto($input: GalerieFotoInput!) {
  createGalerieFoto(input: {galerieFoto: $input}) {
    __typename
  }
}
    `;
export const useCreateGalleryPhotoMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateGalleryPhotoMutation, TError, CreateGalleryPhotoMutationVariables, TContext>) =>
    useMutation<CreateGalleryPhotoMutation, TError, CreateGalleryPhotoMutationVariables, TContext>(
      ['CreateGalleryPhoto'],
      (variables?: CreateGalleryPhotoMutationVariables) => fetcher<CreateGalleryPhotoMutation, CreateGalleryPhotoMutationVariables>(CreateGalleryPhotoDocument, variables)(),
      options
    );
useCreateGalleryPhotoMutation.getKey = () => ['CreateGalleryPhoto'];

useCreateGalleryPhotoMutation.fetcher = (variables: CreateGalleryPhotoMutationVariables, options?: RequestInit['headers']) => fetcher<CreateGalleryPhotoMutation, CreateGalleryPhotoMutationVariables>(CreateGalleryPhotoDocument, variables, options);
export const UpdateGalleryPhotoDocument = `
    mutation UpdateGalleryPhoto($id: BigInt!, $patch: GalerieFotoPatch!) {
  updateGalerieFoto(input: {gfId: $id, patch: $patch}) {
    __typename
  }
}
    `;
export const useUpdateGalleryPhotoMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateGalleryPhotoMutation, TError, UpdateGalleryPhotoMutationVariables, TContext>) =>
    useMutation<UpdateGalleryPhotoMutation, TError, UpdateGalleryPhotoMutationVariables, TContext>(
      ['UpdateGalleryPhoto'],
      (variables?: UpdateGalleryPhotoMutationVariables) => fetcher<UpdateGalleryPhotoMutation, UpdateGalleryPhotoMutationVariables>(UpdateGalleryPhotoDocument, variables)(),
      options
    );
useUpdateGalleryPhotoMutation.getKey = () => ['UpdateGalleryPhoto'];

useUpdateGalleryPhotoMutation.fetcher = (variables: UpdateGalleryPhotoMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateGalleryPhotoMutation, UpdateGalleryPhotoMutationVariables>(UpdateGalleryPhotoDocument, variables, options);
export const DeleteGalleryPhotoDocument = `
    mutation DeleteGalleryPhoto($id: BigInt!) {
  deleteGalerieFoto(input: {gfId: $id}) {
    __typename
  }
}
    `;
export const useDeleteGalleryPhotoMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteGalleryPhotoMutation, TError, DeleteGalleryPhotoMutationVariables, TContext>) =>
    useMutation<DeleteGalleryPhotoMutation, TError, DeleteGalleryPhotoMutationVariables, TContext>(
      ['DeleteGalleryPhoto'],
      (variables?: DeleteGalleryPhotoMutationVariables) => fetcher<DeleteGalleryPhotoMutation, DeleteGalleryPhotoMutationVariables>(DeleteGalleryPhotoDocument, variables)(),
      options
    );
useDeleteGalleryPhotoMutation.getKey = () => ['DeleteGalleryPhoto'];

useDeleteGalleryPhotoMutation.fetcher = (variables: DeleteGalleryPhotoMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteGalleryPhotoMutation, DeleteGalleryPhotoMutationVariables>(DeleteGalleryPhotoDocument, variables, options);