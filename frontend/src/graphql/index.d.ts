/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

declare module "graphql-tag" {

  export function gql(source: "\nquery UserQuery {\n  getCurrentUser {\n    permissionByUGroup {\n      peAkce\n      peAnkety\n      peAktuality\n      peDescription\n      peDokumenty\n      peGalerie\n      peId\n      peKonzole\n      peInzerce\n      peNabidka\n      peMain\n      peName\n      peNastenka\n      peNovinky\n      pePary\n      pePermissions\n      pePlatby\n      peRozpis\n      peSkupiny\n      peUsers\n    }\n    uTimestamp\n    uSystem\n    uTelefon\n    uTeacher\n    uStreet\n    uRodneCislo\n    uSkupina\n    uPrijmeni\n    uPoznamky\n    uPostalCode\n    uPohlavi\n    uPass\n    uOrientationNumber\n    uNationality\n    uNarozeni\n    uMemberUntil\n    uLogin\n    uMemberSince\n    uLock\n    uLevel\n    uJmeno\n    uGroup\n    uId\n    uGdprSignedAt\n    uEmail\n    uDancer\n    uDistrict\n    uCreatedAt\n    uConfirmed\n    uConscriptionNumber\n    uBan\n    uCity\n  }\n}"): typeof import('./graphql').UserQueryDocument;
  export function gql(source: "\nquery UpozorneniList($offset: Int, $limit: Int) {\n  allUpozornenis(first: $limit, offset: $offset, orderBy: UP_TIMESTAMP_ADD_DESC) {\n    nodes {\n      upId\n      upKdo\n      upLock\n      upNadpis\n      upText\n      upTimestamp\n      upTimestampAdd\n      userByUpKdo {\n        uId\n        uJmeno\n        uPrijmeni\n      }\n      upozorneniSkupiniesByUpsIdRodic {\n        nodes {\n          skupinyByUpsIdSkupina {\n            sName\n            sDescription\n            sColorText\n            sColorRgb\n          }\n        }\n      }\n    }\n    totalCount\n  }\n}"): typeof import('./graphql').UpozorneniListDocument;
  export function gql(source: "\nquery ArticlesAdminList($offset: Int, $limit: Int) {\n  allAktualities(first: $limit, offset: $offset, orderBy: AT_TIMESTAMP_ADD_DESC) {\n    nodes {\n      atFoto\n      atFotoMain\n      atId\n      atJmeno\n      atKdo\n      atPreview\n      atText\n      atTimestampAdd\n      atTimestamp\n    }\n    totalCount\n  }\n}"): typeof import('./graphql').ArticlesAdminListDocument;
  export function gql(source: "\nquery AkceList($offset: Int, $limit: Int) {\n  allAkces(first: $limit, offset: $offset, orderBy: A_OD_DESC) {\n    nodes {\n      aDo\n      aId\n      aInfo\n      aDokumenty\n      aJmeno\n      aKapacita\n      aKde\n      aLock\n      aOd\n      aTimestamp\n      aVisible\n      akceItemsByAiIdRodic {\n        nodes {\n          aiId\n          userByAiUser {\n            uJmeno\n            uPrijmeni\n            uId\n          }\n        }\n        totalCount\n      }\n    }\n    totalCount\n  }\n}"): typeof import('./graphql').AkceListDocument;
  export function gql(source: "\n  mutation setAkceVisible($id: BigInt!, $visible: Boolean!) {\n    updateAkceByAId(input: {aId: $id, akcePatch: {aVisible: $visible}}) {\n      akce {\n        aId\n      }\n    }\n  }\n"): typeof import('./graphql').SetAkceVisibleDocument;
  export function gql(source: "\nquery GalleryDirList($offset: Int, $limit: Int) {\n  allGalerieDirs(first: $limit, offset: $offset, orderBy: GD_NAME_ASC) {\n    nodes {\n      gdHidden\n      gdId\n      gdIdRodic\n      gdLevel\n      gdName\n      gdPath\n    }\n    totalCount\n  }\n}"): typeof import('./graphql').GalleryDirListDocument;
  export function gql(source: "\n  mutation setGalerieDirVisible($id: BigInt!, $visible: Boolean!) {\n    updateGalerieDirByGdId(input: {gdId: $id, galerieDirPatch: {gdHidden: $visible}}) {\n      galerieDir {\n        gdId\n      }\n    }\n  }\n"): typeof import('./graphql').SetGalerieDirVisibleDocument;
  export function gql(source: "\nquery ReservationAdminList($offset: Int, $limit: Int) {\n  allNabidkas(first: $limit, offset: $offset, orderBy: N_OD_DESC) {\n    nodes {\n      nDo\n      nId\n      nLock\n      nMaxPocetHod\n      nOd\n      nPocetHod\n      nTimestamp\n      nTrener\n      nVisible\n      nabidkaItemsByNiIdRodic {\n        nodes {\n          niPocetHod\n          niPartner\n          niLock\n          paryByNiPartner {\n            userByPIdPartner {\n              uJmeno\n              uPrijmeni\n              uId\n            }\n          }\n        }\n      }\n      userByNTrener {\n        uJmeno\n        uPrijmeni\n        uId\n      }\n    }\n    totalCount\n  }\n}"): typeof import('./graphql').ReservationAdminListDocument;
  export function gql(source: "\nmutation setNabidkaVisible($id: BigInt!, $visible: Boolean!) {\n  updateNabidkaByNId(input: {nabidkaPatch: {nVisible: $visible}, nId: $id}) {\n    nabidka {\n      nId\n    }\n  }\n}"): typeof import('./graphql').SetNabidkaVisibleDocument;
  export function gql(source: "\nquery NabidkaList($offset: Int, $limit: Int) {\n  allNabidkas(first: $limit, offset: $offset, orderBy: N_OD_DESC) {\n    nodes {\n      nDo\n      nId\n      nLock\n      nMaxPocetHod\n      nOd\n      nPocetHod\n      nTimestamp\n      nTrener\n      nVisible\n      nabidkaItemsByNiIdRodic {\n        nodes {\n          niPocetHod\n          niPartner\n          niLock\n          paryByNiPartner {\n            userByPIdPartner {\n              uJmeno\n              uPrijmeni\n              uId\n            }\n          }\n        }\n      }\n      userByNTrener {\n        uJmeno\n        uPrijmeni\n        uId\n      }\n    }\n    totalCount\n  }\n}"): typeof import('./graphql').NabidkaListDocument;
  export function gql(source: "\nquery ScheduleAdminList($offset: Int, $limit: Int) {\n  allRozpis(first: $limit, offset: $offset, orderBy: R_DATUM_DESC) {\n    nodes {\n      rDatum\n      rId\n      rKde\n      rLock\n      rTimestamp\n      rTrener\n      rVisible\n      userByRTrener {\n        uId\n        uJmeno\n        uPrijmeni\n      }\n      rozpisItemsByRiIdRodic {\n        nodes {\n          riDo\n          riOd\n          riId\n          riPartner\n        }\n      }\n    }\n    totalCount\n  }\n}"): typeof import('./graphql').ScheduleAdminListDocument;
  export function gql(source: "\nmutation setRozpisVisible($id: BigInt!, $visible: Boolean!) {\n  updateRozpiByRId(input: {rozpiPatch: {rVisible: $visible}, rId: $id}) {\n    rozpi {\n      rId\n    }\n  }\n}"): typeof import('./graphql').SetRozpisVisibleDocument;
  export function gql(source: "\nquery GetPage($url: String!) {\n  pageByUrl(url: $url) {\n    content\n  }\n}"): typeof import('./graphql').GetPageDocument;
  export function gql(source: "\nquery GetPhoto($id: BigInt!) {\n  galerieFotoByGfId(gfId: $id) {\n    gfId\n    gfIdRodic\n    gfKdo\n    gfName\n    gfPath\n    gfTimestamp\n    galerieDirByGfIdRodic {\n      gdId\n    }\n  }\n}"): typeof import('./graphql').GetPhotoDocument;
  export function gql(source: "\nmutation SignOut {\n  logout(input: {}) {\n    __typename\n  }\n}"): typeof import('./graphql').SignOutDocument;
  export function gql(source: "\nmutation SignIn($login: String!, $passwd: String!) {\n  login(input: {login: $login, passwd: $passwd}) {\n    result {\n      usr {\n        permissionByUGroup {\n          peAkce\n          peAnkety\n          peAktuality\n          peDescription\n          peDokumenty\n          peGalerie\n          peId\n          peKonzole\n          peInzerce\n          peNabidka\n          peMain\n          peName\n          peNastenka\n          peNovinky\n          pePary\n          pePermissions\n          pePlatby\n          peRozpis\n          peSkupiny\n          peUsers\n        }\n        uTimestamp\n        uSystem\n        uTelefon\n        uTeacher\n        uStreet\n        uRodneCislo\n        uSkupina\n        uPrijmeni\n        uPoznamky\n        uPostalCode\n        uPohlavi\n        uPass\n        uOrientationNumber\n        uNationality\n        uNarozeni\n        uMemberUntil\n        uLogin\n        uMemberSince\n        uLock\n        uLevel\n        uJmeno\n        uGroup\n        uId\n        uGdprSignedAt\n        uEmail\n        uDancer\n        uDistrict\n        uCreatedAt\n        uConfirmed\n        uConscriptionNumber\n        uBan\n        uCity\n      }\n    }\n  }\n}"): typeof import('./graphql').SignInDocument;
  export function gql(source: "\nquery GetMenu {\n  parameterByPaName(paName: \"menu\") {\n    paValue\n  }\n}"): typeof import('./graphql').GetMenuDocument;
  export function gql(source: string): unknown;

    export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<    infer TType,    any  >    ? TType    : never;  
}