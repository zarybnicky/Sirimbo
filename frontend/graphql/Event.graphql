fragment Event on Event {
  id
  type
  summary
  description
  descriptionMember
  filesLegacy
  name
  capacity
  remainingPersonSpots
  remainingLessons
  locationText
  isLocked
  isVisible
  isPublic
  enableNotes
  eventTrainersList {
    id
    lessonsOffered
    lessonsRemaining
    person {
      ...PersonBasic
    }
  }
  eventInstancesList(orderBy: RANGE_ASC) {
    ...EventInstance
  }
  eventTargetCohortsList {
    id
    cohort {
      id
      sName
      sColorRgb
    }
  }
}

fragment EventWithRegistrations on Event {
  ...Event
  eventRegistrationsList {
    ...EventRegistration
  }
}

fragment EventWithRegistrants on Event {
  ...Event
  registrantsList {
    ...Person
    cohortMembershipsList {
      id
      cohort {
        id
        sName
      }
    }
  }
}

fragment EventWithAttendance on Event {
  ...Event
  eventInstancesList(orderBy: RANGE_ASC) {
    ...EventInstance
    eventAttendancesByInstanceIdList(orderBy: [PERSON_BY_PERSON_ID__LAST_NAME_ASC, PERSON_BY_PERSON_ID__FIRST_NAME_ASC]) {
      ...EventAttendance
      person {
        id
        name
      }
    }
  }
}

fragment EventInstance on EventInstance {
  id
  since
  until
}

fragment EventInstanceWithRegistrations on EventInstance {
  ...EventInstance
  event {
    ...EventWithRegistrations
  }
}

fragment EventAttendance on EventAttendance {
  id
  personId
  instanceId
  registrationId
  status
  note
}

fragment EventRegistration on EventRegistration {
  id
  isConfirmed
  note
  statusTime
  paymentId
  personId
  person {
    ...PersonBasic
  }
  coupleId
  couple {
    ...Couple
  }
  eventLessonDemandsByRegistrationIdList {
    id
    lessonCount
    trainerId
  }
  createdAt
}

query EventRegistrants($id: BigInt!) {
  event(id: $id) {
    id
    name
    registrantsList {
      ...Person
      cohortMembershipsList {
        id
        cohort {
          ...CohortBasic
        }
      }
    }
  }
}

query Event($id: BigInt!) {
  event(id: $id) {
    ...EventWithRegistrations
    ...EventWithRegistrants
    ...EventWithAttendance
  }
}

query EventList($first: Int, $offset: Int, $cursor: Cursor) {
  events(first: $first, offset: $offset, after: $cursor, orderBy: [SINCE_DESC], condition: {type: CAMP}) {
    totalCount
    nodes {
      ...Event
    }
    pageInfo {
      __typename
      hasNextPage
      endCursor
    }
  }
}

query EventInstanceRange($start: Datetime!, $end: Datetime, $onlyMine: Boolean! = false, $type: EventType) {
  list: eventInstancesForRangeList(startRange: $start, endRange: $end, onlyMine: $onlyMine, onlyType: $type) {
    ...EventInstanceWithRegistrations
  }
}

mutation ToggleEventVisible($id: BigInt!, $visible: Boolean!) {
  updateEvent(input: {id: $id, patch: {isVisible: $visible}}) {
    event {
      ...Event
    }
  }
}

mutation CreateEvent($input: CreateEventInput!) {
  createEvent(input: $input) {
    event: info {
      ...Event
    }
  }
}

mutation UpdateEvent($id: BigInt!, $patch: EventPatch!) {
  updateEvent(input: {id: $id, patch: $patch}) {
    event {
      ...Event
    }
  }
}

mutation DeleteEvent($id: BigInt!) {
  deleteEvent(input: {id: $id}) {
    __typename
  }
}

mutation RegisterToEvent($input: RegisterToEventInput!) {
  registerToEvent(input: $input) {
    registration {
      ...EventRegistration
    }
  }
}

mutation EditRegistration($input: EditRegistrationInput!) {
  editRegistration(input: $input) {
    eventRegistration {
      ...EventRegistration
    }
  }
}

mutation CancelRegistration($input: CancelRegistrationInput!) {
  cancelRegistration(input: $input) {
    __typename
  }
}

mutation SetLessonDemand($input: SetLessonDemandInput!) {
  setLessonDemand(input: $input) {
    eventLessonDemand {
      id
      lessonCount
      trainerId
    }
  }
}

mutation MoveEventInstance($input: MoveEventInstanceInput!) {
  moveEventInstance(input: $input) {
    eventInstance {
      ...EventInstance
      event {
        ...Event
      }
    }
  }
}

mutation UpdateAttendance($input: UpdateEventAttendanceInput!) {
  updateEventAttendance(input: $input) {
    eventAttendance {
      ...EventAttendance
    }
  }
}
